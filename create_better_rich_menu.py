"""
üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏•‡∏∞‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
"""

from PIL import Image, ImageDraw, ImageFont
import os

def create_professional_rich_menu():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û"""
    
    # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á LINE Rich Menu
    width = 2500
    height = 1686
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏•‡πà‡πÄ‡∏â‡∏î‡∏™‡∏µ
    image = Image.new('RGB', (width, height))
    draw = ImageDraw.Draw(image)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏•‡πà‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏à‡∏≤‡∏Å‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°‡πÑ‡∏õ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á
    for y in range(height):
        ratio = y / height
        r = int(102 + (118 - 102) * ratio)  # 667eea -> 764ba2
        g = int(126 + (75 - 126) * ratio)
        b = int(234 + (162 - 234) * ratio)
        
        for x in range(width):
            image.putpixel((x, y), (r, g, b))
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏° (3x2 = 6 ‡∏õ‡∏∏‡πà‡∏°)
    button_width = (width - 80) // 3  # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö
    button_height = (height - 60) // 2
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏∏‡πà‡∏°
    buttons = [
        {'text': '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', 'emoji': 'üîç', 'color': (255, 107, 53), 'row': 0, 'col': 0},  # ‡∏™‡πâ‡∏°
        {'text': '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', 'emoji': 'üìÇ', 'color': (74, 144, 226), 'row': 0, 'col': 1},     # ‡∏ü‡πâ‡∏≤
        {'text': '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ', 'emoji': 'üèÜ', 'color': (39, 174, 96), 'row': 0, 'col': 2},   # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        {'text': '‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô', 'emoji': 'üéØ', 'color': (243, 156, 18), 'row': 1, 'col': 0},   # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
        {'text': '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', 'emoji': 'üìä', 'color': (155, 89, 182), 'row': 1, 'col': 1},        # ‡∏°‡πà‡∏ß‡∏á
        {'text': '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', 'emoji': '‚ùì', 'color': (231, 76, 60), 'row': 1, 'col': 2}     # ‡πÅ‡∏î‡∏á
    ]
    
    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏°‡∏∏‡∏°‡∏°‡∏ô
    def draw_rounded_rect(draw, coords, color, radius=20):
        x1, y1, x2, y2 = coords
        
        # ‡∏ß‡∏≤‡∏î‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏´‡∏•‡∏±‡∏Å
        draw.rectangle([x1 + radius, y1, x2 - radius, y2], fill=color)
        draw.rectangle([x1, y1 + radius, x2, y2 - radius], fill=color)
        
        # ‡∏ß‡∏≤‡∏î‡∏°‡∏∏‡∏°‡∏°‡∏ô
        draw.pieslice([x1, y1, x1 + radius * 2, y1 + radius * 2], 180, 270, fill=color)
        draw.pieslice([x2 - radius * 2, y1, x2, y1 + radius * 2], 270, 360, fill=color)
        draw.pieslice([x1, y2 - radius * 2, x1 + radius * 2, y2], 90, 180, fill=color)
        draw.pieslice([x2 - radius * 2, y2 - radius * 2, x2, y2], 0, 90, fill=color)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô
    for button in buttons:
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        x = 20 + (button['col'] * (button_width + 20))
        y = 20 + (button['row'] * (button_height + 20))
        
        # ‡∏ß‡∏≤‡∏î‡πÄ‡∏á‡∏≤
        shadow_color = (0, 0, 0, 80)
        draw_rounded_rect(draw, (x + 5, y + 5, x + button_width + 5, y + button_height + 5), 
                         (50, 50, 50), 25)
        
        # ‡∏ß‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å
        draw_rounded_rect(draw, (x, y, x + button_width, y + button_height), 
                         button['color'], 25)
        
        # ‡∏ß‡∏≤‡∏î‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
        highlight_color = tuple(min(255, c + 30) for c in button['color'])
        draw_rounded_rect(draw, (x, y, x + button_width, y + 50), 
                         highlight_color, 25)
        
        try:
            # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå Windows
            font_paths = [
                "C:/Windows/Fonts/arial.ttf",
                "C:/Windows/Fonts/calibri.ttf",
                "C:/Windows/Fonts/segoeui.ttf",
                "arial.ttf"
            ]
            
            emoji_font = None
            text_font = None
            
            # ‡∏´‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö emoji
            for path in font_paths:
                try:
                    emoji_font = ImageFont.truetype(path, 120)
                    text_font = ImageFont.truetype(path, 60)
                    break
                except (FileNotFoundError, OSError):
                    continue
            
            if emoji_font is None or text_font is None:
                # ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                emoji_font = ImageFont.load_default()
                text_font = ImageFont.load_default()
            
            # ‡∏ß‡∏≤‡∏î Emoji
            emoji = button['emoji']
            emoji_bbox = draw.textbbox((0, 0), emoji, font=emoji_font)
            emoji_width = emoji_bbox[2] - emoji_bbox[0]
            emoji_height = emoji_bbox[3] - emoji_bbox[1]
            emoji_x = x + (button_width - emoji_width) // 2
            emoji_y = y + button_height // 4
            
            # ‡πÄ‡∏á‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö emoji
            draw.text((emoji_x + 3, emoji_y + 3), emoji, fill=(0, 0, 0, 100), font=emoji_font)
            draw.text((emoji_x, emoji_y), emoji, fill='white', font=emoji_font)
            
            # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            text = button['text']
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            if len(text) > 8:
                # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
                words = text.split()
                if len(words) >= 2:
                    line1 = words[0]
                    line2 = ' '.join(words[1:])
                else:
                    mid = len(text) // 2
                    line1 = text[:mid]
                    line2 = text[mid:]
                
                # ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 1
                text1_bbox = draw.textbbox((0, 0), line1, font=text_font)
                text1_width = text1_bbox[2] - text1_bbox[0]
                text1_x = x + (button_width - text1_width) // 2
                text1_y = y + button_height * 2 // 3
                
                draw.text((text1_x + 2, text1_y + 2), line1, fill=(0, 0, 0, 100), font=text_font)
                draw.text((text1_x, text1_y), line1, fill='white', font=text_font)
                
                # ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 2
                text2_bbox = draw.textbbox((0, 0), line2, font=text_font)
                text2_width = text2_bbox[2] - text2_bbox[0]
                text2_x = x + (button_width - text2_width) // 2
                text2_y = text1_y + 70
                
                draw.text((text2_x + 2, text2_y + 2), line2, fill=(0, 0, 0, 100), font=text_font)
                draw.text((text2_x, text2_y), line2, fill='white', font=text_font)
            else:
                # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                text_bbox = draw.textbbox((0, 0), text, font=text_font)
                text_width = text_bbox[2] - text_bbox[0]
                text_x = x + (button_width - text_width) // 2
                text_y = y + button_height * 2 // 3
                
                draw.text((text_x + 2, text_y + 2), text, fill=(0, 0, 0, 100), font=text_font)
                draw.text((text_x, text_y), text, fill='white', font=text_font)
                
        except Exception as e:
            print(f"Warning: Font issue for button '{button['text']}': {e}")
            
            # Fallback: ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            default_font = ImageFont.load_default()
            
            # ‡∏£‡∏ß‡∏° emoji ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            combined_text = f"{button['emoji']} {button['text']}"
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
            text_bbox = draw.textbbox((0, 0), combined_text, font=default_font)
            text_width = text_bbox[2] - text_bbox[0]
            text_height = text_bbox[3] - text_bbox[1]
            text_x = x + (button_width - text_width) // 2
            text_y = y + (button_height - text_height) // 2
            
            # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            draw.text((text_x + 1, text_y + 1), combined_text, fill=(0, 0, 0), font=default_font)
            draw.text((text_x, text_y), combined_text, fill='white', font=default_font)
    
    return image

def main():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ Rich Menu"""
    print("‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu ‡πÉ‡∏´‡∏°‡πà...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    os.makedirs("rich_menu_images", exist_ok=True)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ Rich Menu ‡∏´‡∏•‡∏±‡∏Å
    main_image = create_professional_rich_menu()
    main_path = "rich_menu_images/main_rich_menu_new.png"
    main_image.save(main_path, "PNG", quality=95)
    
    print(f"‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {main_path}")
    print(f"‡∏Ç‡∏ô‡∏≤‡∏î: {main_image.size[0]} x {main_image.size[1]} pixels")
    print(f"‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {os.path.getsize(main_path) / 1024:.1f} KB")
    
    # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
    old_path = "rich_menu_images/main_rich_menu.png"
    if os.path.exists(old_path):
        main_image.save(old_path, "PNG", quality=95)
        print(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤: {old_path}")
    
    print("\nRich Menu ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
    print("‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: rich_menu_images/main_rich_menu.png")

if __name__ == "__main__":
    main()