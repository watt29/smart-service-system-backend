"""
üöÄ Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV ‡πÇ‡∏î‡∏¢ bypass RLS
‡πÉ‡∏ä‡πâ service role key ‡πÅ‡∏ó‡∏ô anon key
"""

import csv
import os
from supabase import create_client, Client
from dotenv import load_dotenv

load_dotenv()

def import_csv_data():
    """‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ service role"""
    
    # ‡πÉ‡∏ä‡πâ service role ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠ anon key
    supabase_url = os.environ.get('SUPABASE_URL')
    service_key = os.environ.get('SUPABASE_SERVICE_ROLE_KEY')  # service role key
    anon_key = os.environ.get('SUPABASE_KEY')  # anon key
    
    # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ service key ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ä‡πâ anon key
    api_key = service_key if service_key else anon_key
    
    if not supabase_url or not api_key:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö SUPABASE_URL ‡∏´‡∏£‡∏∑‡∏≠ API Key")
        return False
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á client
        supabase: Client = create_client(supabase_url, api_key)
        print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÉ‡∏ä‡πâ {'service role' if service_key else 'anon key'})")
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV
        csv_file = 'import_products_fixed.csv'
        if not os.path.exists(csv_file):
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {csv_file}")
            return False
        
        products_to_insert = []
        
        with open(csv_file, 'r', encoding='utf-8') as file:
            csv_reader = csv.DictReader(file)
            
            for index, row in enumerate(csv_reader, 1):
                try:
                    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    product_code = f"CSV{index:03d}"
                    price = float(str(row.get('price', 0)).replace(',', ''))
                    rating = float(str(row.get('rating', 0)))
                    sold_count = int(str(row.get('sold_count', 0)).replace(',', ''))
                    commission_rate = 15.0
                    commission_amount = price * (commission_rate / 100)
                    
                    product_data = {
                        'product_code': product_code,
                        'product_name': str(row.get('product_name', '')).strip(),
                        'category': str(row.get('category', '')).strip(),
                        'price': price,
                        'description': str(row.get('description', '')).strip(),
                        'rating': rating,
                        'sold_count': sold_count,
                        'shop_name': str(row.get('shop_name', '')).strip() or '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                        'commission_rate': commission_rate,
                        'commission_amount': commission_amount,
                        'product_link': str(row.get('affiliate_link', '')).strip(),
                        'offer_link': str(row.get('affiliate_link', '')).strip(),
                        'image_url': ''
                    }
                    
                    products_to_insert.append(product_data)
                    
                except Exception as e:
                    print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏ñ‡∏ß {index}: {e}")
                    continue
        
        if not products_to_insert:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤")
            return False
        
        print(f"üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ {len(products_to_insert)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...")
        
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô (optional)
        print("üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...")
        supabase.table('products').delete().neq('product_code', '').execute()
        
        # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡∏•‡∏∞ batch
        batch_size = 10
        success_count = 0
        
        for i in range(0, len(products_to_insert), batch_size):
            batch = products_to_insert[i:i + batch_size]
            
            try:
                response = supabase.table('products').insert(batch).execute()
                if response.data:
                    success_count += len(response.data)
                    print(f"‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à batch {i//batch_size + 1}: {len(response.data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                else:
                    print(f"‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß batch {i//batch_size + 1}")
                    
            except Exception as e:
                print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î batch {i//batch_size + 1}: {e}")
                continue
        
        print(f"\nüéâ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        print(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print(f"‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {len(products_to_insert) - success_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤
        result = supabase.table('products').select('*', count='exact').execute()
        print(f"üìä ‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {result.count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ
        categories_result = supabase.table('products').select('category').execute()
        categories = set([item['category'] for item in categories_result.data if item['category']])
        print(f"üìã ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ: {len(categories)} ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
        for cat in sorted(categories):
            print(f"  - {cat}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV...")
    success = import_csv_data()
    
    if success:
        print("\nüéØ ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå! ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    else:
        print("\nüí• ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")