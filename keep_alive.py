#!/usr/bin/env python3
"""
Keep-Alive Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Heroku Free Tier
‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ
"""

import requests
import time
import logging
from datetime import datetime

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s'
)
logger = logging.getLogger(__name__)

# URL ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ Heroku
APP_URL = "https://appreciate-1234-335b96804c19.herokuapp.com"
PING_INTERVAL = 25 * 60  # 25 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà Heroku ‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö)

def ping_server():
    """Ping ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠"""
    try:
        # Ping endpoint ‡∏´‡∏•‡∏±‡∏Å
        response = requests.get(f"{APP_URL}/ping", timeout=30)
        
        if response.status_code == 200:
            logger.info(f"‚úÖ Ping ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Status: {response.status_code}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö health
            health_response = requests.get(f"{APP_URL}/health", timeout=30)
            if health_response.status_code == 200:
                health_data = health_response.json()
                logger.info(f"üìä Health: {health_data.get('status')} - Products: {health_data.get('products_count', 0)}")
            
            return True
        else:
            logger.warning(f"‚ö†Ô∏è Ping ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Status: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå Ping error: {e}")
        return False

def keep_alive():
    """Keep-alive main loop"""
    logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Keep-Alive Service")
    logger.info(f"üìç Target: {APP_URL}")
    logger.info(f"‚è∞ Interval: {PING_INTERVAL // 60} ‡∏ô‡∏≤‡∏ó‡∏µ")
    
    while True:
        try:
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            logger.info(f"üîÑ Pinging at {current_time}")
            
            success = ping_server()
            
            if success:
                logger.info("üò¥ Sleeping for next ping...")
            else:
                logger.warning("‚ö†Ô∏è Ping failed, retrying in 5 minutes...")
                time.sleep(5 * 60)  # ‡∏£‡∏≠ 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤ ping ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                continue
                
            time.sleep(PING_INTERVAL)
            
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è Keep-Alive ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
            break
        except Exception as e:
            logger.error(f"üí• Unexpected error: {e}")
            time.sleep(60)  # ‡∏£‡∏≠ 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà

if __name__ == "__main__":
    keep_alive()