import urllib.parse
import os
import sqlite3
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage, QuickReply, QuickReplyButton, MessageAction

# URL ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏•‡∏≤‡∏á
CGD_BASE_URL = "https://mbdb.cgd.go.th/wel/searchmed.jsp"

# ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite
DB_FILE = 'knowledge_base.db'

def init_db():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS items (
            lab_code TEXT PRIMARY KEY,
            name_th TEXT,
            name_en TEXT,
            rate_baht REAL,
            reimbursable INTEGER,
            rights TEXT,
            cgd_code TEXT,
            cpt_code TEXT,
            icd10_code TEXT,
            icd10_desc TEXT,
            notes TEXT
        )
    """)
    conn.commit()
    conn.close()

def populate_initial_data():
    """‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    initial_data = [
        {
            "lab_code": "31001",
            "name_th": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
            "name_en": "Urinalysis",
            "rate_baht": 80.00,
            "reimbursable": True,
            "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
            "cgd_code": "MED0301010",
            "cpt_code": "81000",
            "icd10_code": "R82.9",
            "icd10_desc": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞",
            "notes": "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
        },
        {
            "lab_code": "30101",
            "name_th": "‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏à‡∏≤‡∏á",
            "name_en": "CBC",
            "rate_baht": 100.00,
            "reimbursable": True,
            "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
            "cgd_code": "MED0301020",
            "cpt_code": "85025",
            "icd10_code": "D69.6",
            "icd10_desc": "‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
            "notes": "‡∏≠‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 8 ‡∏ä‡∏°."
        },
        {
            "lab_code": "32401",
            "name_th": "HbA1c",
            "name_en": "HbA1c",
            "rate_baht": 180.00,
            "reimbursable": True,
            "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
            "cgd_code": "MED0302040",
            "cpt_code": "83036",
            "icd10_code": "E11.9",
            "icd10_desc": "‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏ó‡∏µ‡πà 2",
            "notes": "‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏î‡πâ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏õ‡∏µ"
        }
    ]

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM items")
    if cursor.fetchone()[0] == 0: # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
        for item in initial_data:
            cursor.execute("""
                INSERT INTO items (lab_code, name_th, name_en, rate_baht, reimbursable, rights, cgd_code, cpt_code, icd10_code, icd10_desc, notes)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                item['lab_code'], item['name_th'], item['name_en'], item['rate_baht'],
                1 if item['reimbursable'] else 0, item['rights'], item['cgd_code'],
                item['cpt_code'], item['icd10_code'], item['icd10_desc'], item['notes']
            ))
        conn.commit()
    conn.close()

def generate_cgd_search_link(query: str) -> str:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏•‡∏≤‡∏á"""
    encoded_query = urllib.parse.quote(query)
    return f"{CGD_BASE_URL}?method=search&service_name={encoded_query}"

def search_knowledge_base(query: str):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    query_lower = query.lower()
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢, ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡∏ï‡∏±‡∏ß)
    cursor.execute("""
        SELECT * FROM items WHERE
        LOWER(lab_code) = ? OR
        LOWER(name_th) = ? OR
        LOWER(name_en) = ?
    """, (query_lower, query_lower, query_lower))
    result = cursor.fetchone()
    
    if result:
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å tuple ‡πÄ‡∏õ‡πá‡∏ô dict
        columns = [description[0] for description in cursor.description]
        item = dict(zip(columns, result))
        conn.close()
        return item

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô (fuzzy search) ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
    cursor.execute("""
        SELECT * FROM items WHERE
        LOWER(name_th) LIKE ? OR
        LOWER(name_en) LIKE ?
    """, (f'%{query_lower}%', f'%{query_lower}%'))
    result = cursor.fetchone()

    if result:
        columns = [description[0] for description in cursor.description]
        item = dict(zip(columns, result))
        conn.close()
        return item

    conn.close()
    return None

def format_response(item: dict, original_query: str) -> str:
    """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE Bot ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ"""
    response = f"üîç ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {item['name_th']} ({item['name_en']})\n"
    response += f"üíµ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤: {item['rate_baht']:.2f} ‡∏ö‡∏≤‡∏ó\n"
    response += f"‚úÖ ‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥: {item['rights']}\n"
    if item.get("notes"):
        response += f"üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {item['notes']}\n"
    
    response += f"üîó ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£:\n"
    response += f"[‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÉ‡∏ô mbdb.cgd.go.th]({generate_cgd_search_link(original_query)})\n"
    
    response += f"‚ÑπÔ∏è ‡∏£‡∏´‡∏±‡∏™‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô:\n"
    response += f"- CPT: {item['cpt_code']}\n"
    response += f"- ICD-10: {item['icd10_code']} ({item['icd10_desc']})\n"
    response += "\n*‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏•‡∏≤‡∏á*"
    return response

def handle_user_query(query: str) -> dict:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    found_item = search_knowledge_base(query)
    
    if found_item:
        return {"message": format_response(found_item, query), "found": True}
    else:
        # ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
        response = f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• \"{query}\" ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô\n\n"
        response += f"‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà:\n"
        response += f"[‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ \"{query}\" ‡πÉ‡∏ô mbdb.cgd.go.th]({generate_cgd_search_link(query)})"
        return {"message": response, "found": False}

# --- LINE Bot Integration ---

app = Flask(__name__)

# ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Channel Access Token ‡πÅ‡∏•‡∏∞ Channel Secret ‡∏à‡∏≤‡∏Å Environment Variables
# ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£ hardcode ‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏£‡∏¥‡∏á
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN')
LINE_CHANNEL_SECRET = os.environ.get('LINE_CHANNEL_SECRET')

# Admin User ID (LINE User ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
# ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏´‡∏≤ LINE User ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á‡∏à‡∏≤‡∏Å LINE Developers Console ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å Webhook Event
ADMIN_USER_ID = os.environ.get('ADMIN_USER_ID') # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Heroku Config Vars

if not LINE_CHANNEL_ACCESS_TOKEN:
    print("Error: LINE_CHANNEL_ACCESS_TOKEN environment variable not set.")
    print("Please set it before running the application.")
    exit(1)

if not LINE_CHANNEL_SECRET:
    print("Error: LINE_CHANNEL_SECRET environment variable not set.")
    print("Please set it before running the application.")
    exit(1)

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Quick Reply Buttons ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å init_db ‡πÅ‡∏•‡∏∞ populate_initial_data
def get_quick_reply_items():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT name_en FROM items")
    items = [row[0] for row in cursor.fetchall()]
    conn.close()
    
    quick_reply_buttons = []
    for item_name_en in items:
        quick_reply_buttons.append(
            QuickReplyButton(
                action=MessageAction(label=item_name_en, text=item_name_en)
            )
        )
    return QuickReply(items=quick_reply_buttons)

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ
init_db()
populate_initial_data()
quick_reply = get_quick_reply_items()

@app.route("/callback", methods=['POST'])
def callback():
    # get X-Line-Signature header value
    signature = request.headers['X-Line-Signature']

    # get request body as text
    body = request.get_data(as_text=True)
    app.logger.info("Request body: " + body)

    # handle webhook body
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        print("Invalid signature. Please check your channel access token/channel secret.")
        abort(400)

    return 'OK'

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_message = event.message.text.strip()
    user_id = event.source.user_id # ‡∏î‡∏∂‡∏á User ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    user_message_lower = user_message.lower()

    # --- Admin Commands ---
    if user_id == ADMIN_USER_ID and user_message_lower.startswith("admin add:"):
        try:
            data_str = user_message[len("admin add:"):].strip()
            parts = data_str.split(', ')
            new_item = {}
            for part in parts:
                key, value = part.split('=', 1)
                new_item[key.strip()] = value.strip()
            
            # ‡πÅ‡∏õ‡∏•‡∏á reimbursable ‡πÄ‡∏õ‡πá‡∏ô boolean
            if 'reimbursable' in new_item:
                new_item['reimbursable'] = (new_item['reimbursable'].lower() == 'true')
            
            conn = sqlite3.connect(DB_FILE)
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO items (lab_code, name_th, name_en, rate_baht, reimbursable, rights, cgd_code, cpt_code, icd10_code, icd10_desc, notes)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                new_item.get('lab_code'), new_item.get('name_th'), new_item.get('name_en'), 
                float(new_item.get('rate_baht', 0)), 1 if new_item.get('reimbursable', False) else 0, 
                new_item.get('rights'), new_item.get('cgd_code'), new_item.get('cpt_code'), 
                new_item.get('icd10_code'), new_item.get('icd10_desc'), new_item.get('notes')
            ))
            conn.commit()
            conn.close()
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Quick Reply Buttons ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            global quick_reply
            quick_reply = get_quick_reply_items()

            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text=f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• \"{new_item.get('name_th', new_item.get('lab_code'))}\" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
            )
        except Exception as e:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text=f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}\n\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: admin add: lab_code=..., name_th=..., ...")
            )
        return

    # --- User Queries ---
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    greeting_keywords = ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "‡πÄ‡∏°‡∏ô‡∏π", "hi", "hello", "help", "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "start"]
    if any(keyword in user_message_lower for keyword in greeting_keywords):
        reply_message_text = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö?\n\n" \
                             "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô HbA1c, CBC, 31001) ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=reply_message_text, quick_reply=quick_reply)
        )
        return

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
    query_result = handle_user_query(user_message)
    reply_message_text = query_result["message"]
    found_in_kb = query_result["found"]
    
    if not found_in_kb:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á Quick Reply ‡∏î‡πâ‡∏ß‡∏¢
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=reply_message_text, quick_reply=quick_reply)
        )
    else:
        # ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=reply_message_text)
        )

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô Flask app
if __name__ == "__main__":
    # ‡πÉ‡∏ä‡πâ os.getenv ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á PORT ‡∏à‡∏≤‡∏Å environment variable ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ 5000 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)