import urllib.parse
import os
import sqlite3
from flask import Flask, request, abort
from linebot.v3.webhook import WebhookHandler

from linebot.exceptions import InvalidSignatureError
from linebot.v3.messaging import MessageEvent, TextMessage, TextSendMessage, QuickReply, QuickReplyButton, MessageAction

# URL ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏•‡∏≤‡∏á
CGD_BASE_URL = "https://mbdb.cgd.go.th/wel/searchmed.jsp"

# ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite
DB_FILE = 'knowledge_base.db'

def init_db():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS items (
            lab_code TEXT PRIMARY KEY,
            name_th TEXT,
            name_en TEXT,
            rate_baht REAL,
            reimbursable INTEGER,
            rights TEXT,
            cgd_code TEXT,
            cpt_code TEXT,
            icd10_code TEXT,
            icd10_desc TEXT,
            notes TEXT
        )
    """)
    conn.commit()
    conn.close()

def populate_initial_data():
    """‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    initial_data = [
        {
            "lab_code": "31001",
            "name_th": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
            "name_en": "Urinalysis",
            "rate_baht": 80.00,
            "reimbursable": True,
            "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
            "cgd_code": "MED0301010",
            "cpt_code": "81000",
            "icd10_code": "R82.9",
            "icd10_desc": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞",
            "notes": "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
        },
        {
            "lab_code": "30101",
            "name_th": "‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏à‡∏≤‡∏á",
            "name_en": "CBC",
            "rate_baht": 100.00,
            "reimbursable": True,
            "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
            "cgd_code": "MED0301020",
            "cpt_code": "85025",
            "icd10_code": "D69.6",
            "icd10_desc": "‡∏†‡∏≤‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
            "notes": "‡∏≠‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 8 ‡∏ä‡∏°."
        },
        {
            "lab_code": "32401",
            "name_th": "HbA1c",
            "name_en": "HbA1c",
            "rate_baht": 180.00,
            "reimbursable": True,
            "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
            "cgd_code": "MED0302040",
            "cpt_code": "83036",
            "icd10_code": "E11.9",
            "icd10_desc": "‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏ó‡∏µ‡πà 2",
            "notes": "‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏î‡πâ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏õ‡∏µ"
        },
        {
            "lab_code": "30201",
            "name_th": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î",
            "name_en": "Glucose",
            "rate_baht": 50.00,
            "reimbursable": True,
            "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
            "cgd_code": "MED0302010",
            "cpt_code": "82947",
            "icd10_code": "R73.0",
            "icd10_desc": "‡∏†‡∏≤‡∏ß‡∏∞‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á",
            "notes": "‡∏≠‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 8-12 ‡∏ä‡∏°."
        },
        {
            "lab_code": "30301",
            "name_th": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•",
            "name_en": "Cholesterol",
            "rate_baht": 60.00,
            "reimbursable": True,
            "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
            "cgd_code": "MED0303010",
            "cpt_code": "82465",
            "icd10_code": "E78.0",
            "icd10_desc": "‡∏†‡∏≤‡∏ß‡∏∞‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á",
            "notes": "‡∏≠‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 9-12 ‡∏ä‡∏°."
        },
        {
            "lab_code": "30401",
            "name_th": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏£‡∏î‡∏¢‡∏π‡∏£‡∏¥‡∏Å‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î",
            "name_en": "Uric Acid",
            "rate_baht": 70.00,
            "reimbursable": True,
            "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
            "cgd_code": "MED0304010",
            "cpt_code": "84550",
            "icd10_code": "M10.9",
            "icd10_desc": "‡πÇ‡∏£‡∏Ñ‡πÄ‡∏Å‡∏≤‡∏ï‡πå‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
            "notes": "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
        },
        {
            "lab_code": "64101",
            "name_th": "‡∏Ç‡∏π‡∏î‡∏´‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏≤‡∏Å",
            "name_en": "Full Mouth Scaling",
            "rate_baht": 280.00,
            "reimbursable": True,
            "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
            "cgd_code": "DENT010101",
            "cpt_code": "D1110",
            "icd10_code": "K03.6",
            "icd10_desc": "Deposits on teeth",
            "notes": "‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏•‡∏≤‡∏á ‡∏î‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏ó‡∏µ‡πà ‡∏Å‡∏Ñ 0431.2/‡∏ß 246 ‡∏•‡∏ß. 16 ‡∏°‡∏¥.‡∏¢.59 ‡πÅ‡∏•‡∏∞‡∏î‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏ó‡∏µ‡πà ‡∏Å‡∏Ñ 0416.2/ ‡∏ß 369 ‡∏•‡∏ß. 21 ‡∏Å.‡∏¢.59"
        }
    ]

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM items")
    if cursor.fetchone()[0] == 0: # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
        for item in initial_data:
            cursor.execute("""
                INSERT INTO items (lab_code, name_th, name_en, rate_baht, reimbursable, rights, cgd_code, cpt_code, icd10_code, icd10_desc, notes)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                item['lab_code'], item['name_th'], item['name_en'], item['rate_baht'],
                1 if item['reimbursable'] else 0, item['rights'], item['cgd_code'],
                item['cpt_code'], item['icd10_code'], item['icd10_desc'], item['notes']
            ))
        conn.commit()
    conn.close()

def generate_cgd_search_link(query: str) -> str:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏•‡∏≤‡∏á"""
    encoded_query = urllib.parse.quote(query)
    return f"{CGD_BASE_URL}?method=search&service_name={encoded_query}"

def search_knowledge_base(query: str):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    query_lower = query.lower()
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢, ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡∏ï‡∏±‡∏ß)
    cursor.execute("""
        SELECT * FROM items WHERE
        LOWER(lab_code) = ? OR
        LOWER(name_th) = ? OR
        LOWER(name_en) = ?
    """, (query_lower, query_lower, query_lower))
    result = cursor.fetchone()
    
    if result:
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å tuple ‡πÄ‡∏õ‡πá‡∏ô dict
        columns = [description[0] for description in cursor.description]
        item = dict(zip(columns, result))
        conn.close()
        return item

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô (fuzzy search) ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
    cursor.execute("""
        SELECT * FROM items WHERE
        LOWER(name_th) LIKE ? OR
        LOWER(name_en) LIKE ?
    """, (f'%{query_lower}%', f'%{query_lower}%'))
    result = cursor.fetchone()

    if result:
        columns = [description[0] for description in cursor.description]
        item = dict(zip(columns, result))
        conn.close()
        return item

    conn.close()
    return None

def get_all_items_from_db():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM items")
    rows = cursor.fetchall()
    columns = [description[0] for description in cursor.description]
    items = []
    for row in rows:
        items.append(dict(zip(columns, row)))
    conn.close()
    return items

def format_response(item: dict, original_query: str) -> str:
    """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE Bot ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ"""
    response = f"üîç ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {item['name_th']} ({item['name_en']})\n"
    response += f"üíµ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤: {item['rate_baht']:.2f} ‡∏ö‡∏≤‡∏ó\n"
    response += f"‚úÖ ‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥: {item['rights']}\n"
    if item.get("notes"):
        response += f"üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {item['notes']}\n"
    
    cgd_link = generate_cgd_search_link(original_query)
    response += f"üîó ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£:\n"
    response += f"[{cgd_link}]({cgd_link})\n"
    
    response += f"‚ÑπÔ∏è ‡∏£‡∏´‡∏±‡∏™‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô:\n"
    response += f"- CPT: {item['cpt_code']}\n"
    response += f"- ICD-10: {item['icd10_code']} ({item['icd10_desc']})\n"
    response += "\n*‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏•‡∏≤‡∏á*"
    return response

def handle_user_query(query: str) -> dict:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    found_item = search_knowledge_base(query)
    
    if found_item:
        return {"message": format_response(found_item, query), "found": True}
    else:
        # ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
        cgd_link = generate_cgd_search_link(query)
        response = f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• \"{query}\" ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô\n\n"
        response += f"‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà:\n"
        response += f"[{cgd_link}]({cgd_link})"
        return {"message": response, "found": False}



# --- LINE Bot Integration ---

app = Flask(__name__)

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (In-memory state)
# key ‡∏Ñ‡∏∑‡∏≠ user_id ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô, value ‡∏Ñ‡∏∑‡∏≠ dict ‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: { 'Uxxxxxxxxxxxx': {'state': 'adding_item', 'step': 'waiting_lab_code', 'data': {} } }
admin_states = {}

# ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Channel Access Token ‡πÅ‡∏•‡∏∞ Channel Secret ‡∏à‡∏≤‡∏Å Environment Variables
# ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£ hardcode ‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏£‡∏¥‡∏á
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN')
LINE_CHANNEL_SECRET = os.environ.get('LINE_CHANNEL_SECRET')

# Admin User ID (LINE User ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
# ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏´‡∏≤ LINE User ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á‡∏à‡∏≤‡∏Å LINE Developers Console ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å Webhook Event
ADMIN_USER_ID = os.environ.get('ADMIN_USER_ID') # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Heroku Config Vars

if not LINE_CHANNEL_ACCESS_TOKEN:
    print("Error: LINE_CHANNEL_ACCESS_TOKEN environment variable not set.")
    print("Please set it before running the application.")
    exit(1)

if not LINE_CHANNEL_SECRET:
    print("Error: LINE_CHANNEL_SECRET environment variable not set.")
    print("Please set it before running the application.")
    exit(1)

if not ADMIN_USER_ID:
    print("Error: ADMIN_USER_ID environment variable not set.")
    print("Admin features will not be available. Please set it in Heroku Config Vars.")

configuration = Configuration(access_token=LINE_CHANNEL_ACCESS_TOKEN)
line_bot_api = MessagingApi(ApiClient(configuration))
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Quick Reply Buttons ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å init_db ‡πÅ‡∏•‡∏∞ populate_initial_data
def get_quick_reply_items():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Quick Reply Buttons ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°"""
    # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
    popular_items = ["CBC", "HbA1c", "Urine", "Cholesterol"]
    
    quick_reply_buttons = []
    for item in popular_items:
        quick_reply_buttons.append(
            QuickReplyButton(
                action=MessageAction(label=item, text=item)
            )
        )
    return QuickReply(items=quick_reply_buttons)

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ
init_db()
populate_initial_data()
quick_reply = get_quick_reply_items()

@app.route("/callback", methods=['POST'])
def callback():
    # get X-Line-Signature header value
    signature = request.headers['X-Line-Signature']

    # get request body as text
    body = request.get_data(as_text=True)
    app.logger.info("Request body: " + body)

    # handle webhook body
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        print("Invalid signature. Please check your channel access token/channel secret.")
        abort(400)

    return 'OK'

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_message = event.message.text.strip()
    user_id = event.source.user_id # ‡∏î‡∏∂‡∏á User ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    user_message_lower = user_message.lower()

    # DEBUG PRINT: Check user_id and ADMIN_USER_ID
    print(f"DEBUG: Incoming user_id: '{user_id}'")
    print(f"DEBUG: Configured ADMIN_USER_ID from env: '{ADMIN_USER_ID}'")
    print(f"DEBUG: Message: '{user_message_lower}'")

    # --- Admin Conversation State Machine ---
    if user_id in admin_states:
        state_info = admin_states[user_id]
        state = state_info.get('state')

        # --- Cancel Command ---
        if user_message_lower == "cancel":
            del admin_states[user_id]
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß"))
            return

        # --- Add Item State Machine ---
        if state == 'adding_item':
            step = state_info.get('step')
            
            if step == 'waiting_lab_code':
                # TODO: Check for duplicate lab_code
                state_info['data']['lab_code'] = user_message
                state_info['step'] = 'waiting_name_th'
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚úîÔ∏è ‡∏£‡∏´‡∏±‡∏™: " + user_message + "\n‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢):"))
                return

            elif step == 'waiting_name_th':
                state_info['data']['name_th'] = user_message
                state_info['step'] = 'waiting_name_en'
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚úîÔ∏è ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢: " + user_message + "\n‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©):"))
                return

            elif step == 'waiting_name_en':
                state_info['data']['name_en'] = user_message
                state_info['step'] = 'waiting_rate_baht'
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚úîÔ∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©: " + user_message + "\n‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡∏õ‡πâ‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô):"))
                return

            elif step == 'waiting_rate_baht':
                try:
                    rate = float(user_message)
                    state_info['data']['rate_baht'] = rate
                    state_info['step'] = 'waiting_reimbursable'
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"‚úîÔ∏è ‡∏≠‡∏±‡∏ï‡∏£‡∏≤: {rate:.2f} ‡∏ö‡∏≤‡∏ó\n‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (‡∏û‡∏¥‡∏°‡∏û‡πå `yes` ‡∏´‡∏£‡∏∑‡∏≠ `no`):"))
                    return
                except ValueError:
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 150 ‡∏´‡∏£‡∏∑‡∏≠ 80.50)"))
                    return
            
            elif step == 'waiting_reimbursable':
                reimbursable = user_message.lower() in ['yes', 'y', 'true', '‡πÉ‡∏ä‡πà']
                state_info['data']['reimbursable'] = reimbursable
                state_info['step'] = 'waiting_rights'
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚úîÔ∏è ‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ: " + ("‡πÉ‡∏ä‡πà" if reimbursable else "‡πÑ‡∏°‡πà") + "\n‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡∏õ‡πâ‡∏≠‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ (‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥, ‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏•‡∏≤‡∏á):"))
                return

            elif step == 'waiting_rights':
                state_info['data']['rights'] = user_message
                state_info['step'] = 'waiting_cgd_code'
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚úîÔ∏è ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥: " + user_message + "\n‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏•‡∏≤‡∏á (CGD Code) (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ):"))
                return

            elif step == 'waiting_cgd_code':
                state_info['data']['cgd_code'] = user_message
                state_info['step'] = 'waiting_cpt_code'
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚úîÔ∏è ‡∏£‡∏´‡∏±‡∏™ CGD: " + user_message + "\n‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™ CPT (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ):"))
                return

            elif step == 'waiting_cpt_code':
                state_info['data']['cpt_code'] = user_message
                state_info['step'] = 'waiting_icd10_code'
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚úîÔ∏è ‡∏£‡∏´‡∏±‡∏™ CPT: " + user_message + "\n‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™ ICD-10 (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ):"))
                return

            elif step == 'waiting_icd10_code':
                state_info['data']['icd10_code'] = user_message
                state_info['step'] = 'waiting_icd10_desc'
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚úîÔ∏è ‡∏£‡∏´‡∏±‡∏™ ICD-10: " + user_message + "\n‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ ICD-10 (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ):"))
                return

            elif step == 'waiting_icd10_desc':
                state_info['data']['icd10_desc'] = user_message
                state_info['step'] = 'waiting_notes'
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚úîÔ∏è ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ ICD-10: " + user_message + "\n‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏õ‡πâ‡∏≠‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ):"))
                return

            elif step == 'waiting_notes':
                state_info['data']['notes'] = user_message
                state_info['step'] = 'waiting_confirmation'
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                summary = "üìù ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°:\n"
                for key, value in state_info['data'].items():
                    summary += f"- {key}: {value}\n"
                summary += "\n‡∏û‡∏¥‡∏°‡∏û‡πå `confirm` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏£‡∏∑‡∏≠ `cancel` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"

                line_bot_api.reply_message(event.reply_token, TextSendMessage(text=summary))
                return

            elif step == 'waiting_confirmation':
                if user_message.lower() == 'confirm':
                    try:
                        new_item = state_info['data']
                        conn = sqlite3.connect(DB_FILE)
                        cursor = conn.cursor()
                        cursor.execute("""                            INSERT INTO items (lab_code, name_th, name_en, rate_baht, reimbursable, rights, cgd_code, cpt_code, icd10_code, icd10_desc, notes)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """, (
                            new_item.get('lab_code'), new_item.get('name_th'), new_item.get('name_en'),
                            new_item.get('rate_baht', 0),
                            1 if new_item.get('reimbursable', False) else 0,
                            new_item.get('rights'), new_item.get('cgd_code'), new_item.get('cpt_code'),
                            new_item.get('icd10_code'), new_item.get('icd10_desc'), new_item.get('notes')
                        ))
                        conn.commit()
                        conn.close()
                        del admin_states[user_id]
                        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"))
                    except Exception as e:
                        del admin_states[user_id]
                        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}"))
                else:
                    del admin_states[user_id]
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß"))
                return

        # --- Edit Item State Machine ---
        elif state == 'editing_item':
            step = state_info.get('step')

            if step == 'waiting_edit_lab_code':
                lab_code_to_edit = user_message.strip()
                found_item = search_knowledge_base(lab_code_to_edit)
                if found_item:
                    state_info['data'] = found_item # Store the original item data
                    state_info['step'] = 'waiting_field_to_edit'
                    
                    # Display current data and ask for field to edit
                    current_data_msg = "‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™ " + lab_code_to_edit + ":\n"
                    for key, value in found_item.items():
                        current_data_msg += f"- {key}: {value}\n"
                    current_data_msg += "\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÄ‡∏ä‡πà‡∏ô name_th, rate_baht, notes):"
                    
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=current_data_msg))
                else:
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™ " + lab_code_to_edit + "\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå `cancel` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"))
                return

            elif step == 'waiting_field_to_edit':
                field_to_edit = user_message.strip().lower()
                # Validate if the field exists in the item data
                if field_to_edit in state_info['data']:
                    state_info['data']['field_to_edit'] = field_to_edit
                    state_info['step'] = 'waiting_new_value'
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"‚úîÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå: {field_to_edit}\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {field_to_edit}:"))
                else:
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå `cancel` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"))
                return

            elif step == 'waiting_new_value':
                field_to_edit = state_info['data']['field_to_edit']
                new_value = user_message.strip()

                # Type conversion for specific fields
                if field_to_edit == 'rate_baht':
                    try:
                        new_value = float(new_value)
                    except ValueError:
                        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 150 ‡∏´‡∏£‡∏∑‡∏≠ 80.50)"))
                        return
                elif field_to_edit == 'reimbursable':
                    new_value = new_value.lower() in ['yes', 'y', 'true', '‡πÉ‡∏ä‡πà']

                state_info['data']['new_value'] = new_value
                state_info['step'] = 'waiting_edit_confirmation'

                # Prepare confirmation message
                original_item = state_info['data']
                confirmation_msg = f"‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n"
                confirmation_msg += f"‡∏£‡∏´‡∏±‡∏™: {original_item['lab_code']}\n"
                confirmation_msg += f"‡∏ü‡∏¥‡∏•‡∏î‡πå: {field_to_edit}\n"
                confirmation_msg += f"‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°: {original_item[field_to_edit]}\n"
                confirmation_msg += f"‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà: {new_value}\n\n"
                confirmation_msg += "‡∏û‡∏¥‡∏°‡∏û‡πå `confirm` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ `cancel` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"

                line_bot_api.reply_message(event.reply_token, TextSendMessage(text=confirmation_msg))
                return

            elif step == 'waiting_edit_confirmation':
                if user_message.lower() == 'confirm':
                    try:
                        item_to_update = state_info['data']
                        lab_code = item_to_update['lab_code']
                        field_to_edit = item_to_update['field_to_edit']
                        new_value = item_to_update['new_value']

                        conn = sqlite3.connect(DB_FILE)
                        cursor = conn.cursor()
                        
                        # Special handling for reimbursable (boolean to int)
                        if field_to_edit == 'reimbursable':
                            new_value = 1 if new_value else 0

                        cursor.execute(f"UPDATE items SET {field_to_edit} = ? WHERE lab_code = ?", (new_value, lab_code))
                        conn.commit()
                        conn.close()
                        del admin_states[user_id]
                        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ {lab_code} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!"))
                    except Exception as e:
                        del admin_states[user_id]
                        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}"))
                else:
                    del admin_states[user_id]
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß"))
                return

        # --- Delete Item State Machine ---
        elif state == 'deleting_item':
            step = state_info.get('step')

            if step == 'waiting_delete_lab_code':
                lab_code_to_delete = user_message.strip()
                found_item = search_knowledge_base(lab_code_to_delete)
                if found_item:
                    state_info['data'] = found_item # Store the item data for confirmation
                    state_info['step'] = 'waiting_delete_confirmation'
                    
                    # Display item data and ask for confirmation
                    delete_confirmation_msg = "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n"
                    delete_confirmation_msg += f"‡∏£‡∏´‡∏±‡∏™: {found_item['lab_code']}\n"
                    delete_confirmation_msg += f"‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢: {found_item['name_th']}\n"
                    delete_confirmation_msg += f"‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©: {found_item['name_en']}\n\n"
                    delete_confirmation_msg += "‡∏û‡∏¥‡∏°‡∏û‡πå `confirm` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ `cancel` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
                    
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=delete_confirmation_msg))
                else:
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™ " + lab_code_to_delete + "\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå `cancel` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"))
                return

            elif step == 'waiting_delete_confirmation':
                if user_message.lower() == 'confirm':
                    try:
                        item_to_delete = state_info['data']
                        lab_code = item_to_delete['lab_code']

                        conn = sqlite3.connect(DB_FILE)
                        cursor = conn.cursor()
                        cursor.execute("DELETE FROM items WHERE lab_code = ?", (lab_code,))
                        conn.commit()
                        conn.close()
                        del admin_states[user_id]
                        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ {lab_code} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!"))
                    except Exception as e:
                        del admin_states[user_id]
                        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}"))
                else:
                    del admin_states[user_id]
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß"))
                return

            elif step == 'waiting_delete_confirmation':
                if user_message.lower() == 'confirm':
                    try:
                        item_to_delete = state_info['data']
                        lab_code = item_to_delete['lab_code']

                        conn = sqlite3.connect(DB_FILE)
                        cursor = conn.cursor()
                        cursor.execute("DELETE FROM items WHERE lab_code = ?", (lab_code,))
                        conn.commit()
                        conn.close()
                        del admin_states[user_id]
                        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ {lab_code} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!"))
                    except Exception as e:
                        del admin_states[user_id]
                        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}"))
                else:
                    del admin_states[user_id]
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß"))
                return

            elif step == 'waiting_new_value':
                field_to_edit = state_info['data']['field_to_edit']
                new_value = user_message.strip()

                # Type conversion for specific fields
                if field_to_edit == 'rate_baht':
                    try:
                        new_value = float(new_value)
                    except ValueError:
                        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 150 ‡∏´‡∏£‡∏∑‡∏≠ 80.50)"))
                        return
                elif field_to_edit == 'reimbursable':
                    new_value = new_value.lower() in ['yes', 'y', 'true', '‡πÉ‡∏ä‡πà']

                state_info['data']['new_value'] = new_value
                state_info['step'] = 'waiting_edit_confirmation'

                # Prepare confirmation message
                original_item = state_info['data']
                confirmation_msg = f"‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n"
                confirmation_msg += f"‡∏£‡∏´‡∏±‡∏™: {original_item['lab_code']}\n"
                confirmation_msg += f"‡∏ü‡∏¥‡∏•‡∏î‡πå: {field_to_edit}\n"
                confirmation_msg += f"‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°: {original_item[field_to_edit]}\n"
                confirmation_msg += f"‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà: {new_value}\n\n"
                confirmation_msg += "‡∏û‡∏¥‡∏°‡∏û‡πå `confirm` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ `cancel` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"

                line_bot_api.reply_message(event.reply_token, TextSendMessage(text=confirmation_msg))
                return

        # Fallback to prevent sending to user query handling
        return

    # --- Admin Menu ---
    if user_id == ADMIN_USER_ID:
        # Admin menu trigger
        print(f"Received text: '{user_message_lower}'") # Temporary debug print
        if user_message_lower.strip() in ["admin", "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"]:
            admin_menu_buttons = QuickReply(items=[
                QuickReplyButton(action=MessageAction(label="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", text="admin_add_start")),
                QuickReplyButton(action=MessageAction(label="‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", text="admin_edit_start")),
                QuickReplyButton(action=MessageAction(label="‚ùå ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", text="admin_delete_start")),
                QuickReplyButton(action=MessageAction(label="üìã ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="admin_list_all")),
            ])
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô! üëã\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:", quick_reply=admin_menu_buttons)
            )
            return
        
        # --- Start Add Item Flow ---
        if user_message_lower == "admin_add_start":
            admin_states[user_id] = {'state': 'adding_item', 'step': 'waiting_lab_code', 'data': {}}
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚û°Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (Lab Code) ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°:")
            )
            return

        # --- Start Edit Item Flow ---
        if user_message_lower == "admin_edit_start":
            admin_states[user_id] = {'state': 'editing_item', 'step': 'waiting_edit_lab_code', 'data': {}}
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚û°Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (Lab Code) ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
            )
            return

        # --- Start Delete Item Flow ---
        if user_message_lower == "admin_delete_start":
            admin_states[user_id] = {'state': 'deleting_item', 'step': 'waiting_delete_lab_code', 'data': {}}
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚û°Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (Lab Code) ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö:")
            )
            return

        # --- List All Items Flow ---
        if user_message_lower == "admin_list_all":
            all_items = get_all_items_from_db()
            if all_items:
                list_msg = "üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n\n"
                for item in all_items:
                    list_msg += f"‡∏£‡∏´‡∏±‡∏™: {item['lab_code']}\n"
                    list_msg += f"‡∏ä‡∏∑‡πà‡∏≠: {item['name_th']} ({item['name_en']})\n"
                    list_msg += f"‡∏≠‡∏±‡∏ï‡∏£‡∏≤: {item['rate_baht']:.2f} ‡∏ö‡∏≤‡∏ó\n"
                    list_msg += f"‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ: {'‡πÉ‡∏ä‡πà' if item['reimbursable'] else '‡πÑ‡∏°‡πà'}\n"
                    list_msg += f"‡∏™‡∏¥‡∏ó‡∏ò‡∏¥: {item['rights']}\n"
                    if item['notes']:
                        list_msg += f"‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {item['notes']}\n"
                    list_msg += "--------------------\n"
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text=list_msg))
            else:
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"))
            return

    

    # --- User Queries ---
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    greeting_keywords = ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "‡πÄ‡∏°‡∏ô‡∏π", "hi", "hello", "help", "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "start"]
    if any(keyword in user_message_lower for keyword in greeting_keywords):
        reply_message_text = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö?\n\n" \
                             "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô HbA1c, CBC, 31001) ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=reply_message_text, quick_reply=quick_reply)
        )
        return

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
    query_result = handle_user_query(user_message)
    reply_message_text = query_result["message"]
    found_in_kb = query_result["found"]
    
    if not found_in_kb:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á Quick Reply ‡∏î‡πâ‡∏ß‡∏¢
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=reply_message_text, quick_reply=quick_reply)
        )
    else:
        # ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=reply_message_text)
        )

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô Flask app
if __name__ == "__main__":
    # ‡πÉ‡∏ä‡πâ os.getenv ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á PORT ‡∏à‡∏≤‡∏Å environment variable ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ 5000 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
