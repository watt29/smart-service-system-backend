"""
Affiliate Product Review Bot - Main Application
‡∏£‡∏∞‡∏ö‡∏ö LINE Bot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞ Affiliate Marketing
"""

from flask import Flask, request, abort, render_template, jsonify
from linebot.exceptions import InvalidSignatureError

# Import modules ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á
from src.config import config
from src.utils.supabase_database import SupabaseDatabase
from src.handlers.affiliate_handler import affiliate_handler
from src.utils.ai_search import ai_search
from src.utils.review_generator import review_generator
import logging

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s in %(name)s: %(message)s'
)
logger = logging.getLogger(__name__)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Flask App
app = Flask(__name__)
app.config['SECRET_KEY'] = config.SECRET_KEY

# ‡∏™‡∏£‡πâ‡∏≤‡∏á database instance
db = SupabaseDatabase()

def create_app():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Flask application"""
    logger.info("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Affiliate Product Review Bot...")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    config_valid = config.validate_config()
    if not config_valid:
        logger.warning("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    stats = db.get_stats()
    db_type = config.get_database_name()
    logger.info(f"‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ({db_type}): {stats.get('total_products', 0)} ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤, ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {stats.get('average_price', 0):,.2f} ‡∏ö‡∏≤‡∏ó")
    
    return app

# ===== Flask Routes =====

@app.route('/')
def home():
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå"""
    return jsonify({
        "message": "üõçÔ∏è Affiliate Product Review Bot",
        "description": "LINE Bot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞ Affiliate Marketing",
        "endpoints": {
            "/health": "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö",
            "/callback": "LINE Bot Webhook",
            "/api/products": "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            "/api/search": "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            "/api/stats": "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö",
            "/api/review": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"
        }
    })

@app.route('/health')
def health_check():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
    stats = db.get_stats()
    return jsonify({
        "status": "healthy",
        "products_count": stats.get('total_products', 0),
        "database_type": config.get_database_name(),
        "database_connected": db.connected if hasattr(db, 'connected') else True,
        "line_bot_active": config.LINE_CHANNEL_ACCESS_TOKEN is not None,
        "ai_search_enabled": config.USE_AI_SEARCH,
        "supabase_enabled": config.USE_SUPABASE
    })

@app.route('/ping')
def ping():
    """Simple ping endpoint ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏¢‡∏∏‡∏î"""
    return "pong", 200

@app.route('/api/search', methods=['GET'])
def search_products_api():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
    try:
        query = request.args.get('query', '').strip()
        limit = int(request.args.get('limit', config.MAX_RESULTS_PER_SEARCH))
        use_ai = request.args.get('ai', 'false').lower() == 'true'
        
        logger.info(f"Product search API: '{query}' (limit={limit}, ai={use_ai})")
        
        if not query:
            return jsonify({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"}), 400
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        products = db.search_products(query, limit)
        
        # ‡πÉ‡∏ä‡πâ AI search ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        if use_ai and products:
            products = ai_search.enhanced_product_search(query, products, limit)
        
        if products:
            logger.info(f"Search successful: found {len(products)} products for '{query}'")
            return jsonify({
                "success": True,
                "query": query,
                "count": len(products),
                "products": products
            })
        else:
            logger.info(f"Search not found: '{query}'")
            suggestions = ["‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°", "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"]
            return jsonify({
                "success": False,
                "message": f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{query}'",
                "suggestions": suggestions
            })
            
    except Exception as e:
        logger.error(f"Search API error: {e}")
        return jsonify({"error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"}), 500

@app.route("/callback", methods=['POST'])
def line_callback():
    """Webhook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å LINE - Affiliate Bot"""
    try:
        signature = request.headers.get('X-Line-Signature', '')
        body = request.get_data(as_text=True)
        
        # ‡∏•‡∏î logging ‡πÉ‡∏ô production ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        if config.DEBUG:
            logger.debug(f"LINE webhook received: signature={signature[:10]}...")
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• webhook - ‡πÉ‡∏ä‡πâ affiliate handler
        affiliate_handler.handler.handle(body, signature)
        
        if config.DEBUG:
            logger.info("LINE webhook processed successfully")
        
        return 'OK'
        
    except InvalidSignatureError:
        if config.DEBUG:
            logger.error("Invalid LINE signature")
        abort(400)
        
    except Exception as e:
        logger.error(f"LINE webhook error: {str(e)}")
        abort(500)

@app.route('/api/products', methods=['GET', 'POST', 'PUT', 'DELETE'])
def products_api():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
    try:
        if request.method == 'GET':
            # ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
            category = request.args.get('category')
            limit = int(request.args.get('limit', 50))
            
            if category:
                products = db.get_products_by_category(category)
            else:
                products = db.get_all_products(limit)
            
            return jsonify({
                "success": True,
                "count": len(products),
                "products": products
            })
        
        elif request.method == 'POST':
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
            data = request.get_json()
            if not data:
                return jsonify({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"}), 400
            
            result = db.add_product(data)
            if result:
                logger.info(f"Product added: {data.get('product_name')}")
                return jsonify({
                    "success": True,
                    "message": "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                    "product": result
                })
            else:
                return jsonify({"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ"}), 500
        
        elif request.method == 'PUT':
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            product_code = request.args.get('code')
            data = request.get_json()
            
            if not product_code or not data:
                return jsonify({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}), 400
            
            success = db.update_product(product_code, data)
            if success:
                return jsonify({
                    "success": True,
                    "message": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
                })
            else:
                return jsonify({"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ"}), 500
        
        elif request.method == 'DELETE':
            # ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            product_code = request.args.get('code')
            if not product_code:
                return jsonify({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"}), 400
            
            success = db.delete_product(product_code)
            if success:
                return jsonify({
                    "success": True,
                    "message": "‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
                })
            else:
                return jsonify({"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ"}), 500
                
    except Exception as e:
        logger.error(f"Products API error: {e}")
        return jsonify({"error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"}), 500

@app.route('/api/stats')
def stats_api():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö"""
    try:
        stats = db.get_stats()
        popular_searches = db.get_popular_searches(10)
        
        result = {
            "system": {
                "database_type": config.get_database_name(),
                "debug_mode": config.DEBUG,
                "line_bot_active": config.LINE_CHANNEL_ACCESS_TOKEN is not None,
                "ai_search_enabled": config.USE_AI_SEARCH,
                "supabase_enabled": config.USE_SUPABASE
            },
            "database": stats,
            "popular_searches": popular_searches
        }
        
        logger.info("Stats API accessed")
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"Stats API error: {e}")
        return jsonify({"error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"}), 500

@app.route('/api/review', methods=['POST'])
def generate_review_api():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"}), 400
        
        product_code = data.get('product_code')
        style = data.get('style', 'medium')  # short, medium, long
        use_ai = data.get('ai', False)
        count = int(data.get('count', 1))
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        if product_code:
            product = db.get_product_by_code(product_code)
            if not product:
                return jsonify({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"}), 404
        else:
            product = data  # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
        if count > 1:
            reviews = review_generator.generate_multiple_reviews(product, count)
            review_stats = review_generator.get_review_stats(reviews)
        else:
            review = review_generator.generate_review(product, style, use_ai)
            reviews = [review]
            review_stats = review_generator.get_review_stats(reviews)
        
        logger.info(f"Generated {len(reviews)} review(s) for {product.get('product_name', 'product')}")
        
        return jsonify({
            "success": True,
            "product": {
                "name": product.get('product_name'),
                "code": product.get('product_code'),
                "price": product.get('price')
            },
            "reviews": reviews,
            "stats": review_stats
        })
        
    except Exception as e:
        logger.error(f"Review API error: {e}")
        return jsonify({"error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"}), 500

# ===== Error Handlers =====

@app.errorhandler(404)
def not_found_error(error):
    return jsonify({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö endpoint ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"}), 404

@app.errorhandler(405)
def method_not_allowed_error(error):
    return jsonify({"error": "Method ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}), 405

@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"}), 500

# ===== Application Startup =====

if __name__ == '__main__':
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
    app = create_app()
    
    # ‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    logger.info(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà {config.HOST}:{config.PORT}")
    logger.info(f"‡πÇ‡∏´‡∏°‡∏î DEBUG: {config.DEBUG}")
    logger.info("üõçÔ∏è Affiliate Product Review Bot ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
    
    app.run(
        host=config.HOST,
        port=config.PORT,
        debug=config.DEBUG
    )