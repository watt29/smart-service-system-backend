"""
Smart Service System - Main Application
‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πÄ‡∏ö‡∏¥‡∏Å‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
"""

from flask import Flask, request, abort, render_template, jsonify
from linebot.exceptions import InvalidSignatureError

# Import modules ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á
from src.config import config
from src.utils.db_adapter import db_adapter
from src.handlers.line_handler import line_handler
from src.utils.logger import system_logger, error_handler
from src.utils.ai_search import ai_search

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Flask App
app = Flask(__name__)
app.config['SECRET_KEY'] = config.SECRET_KEY

def create_app():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Flask application"""
    system_logger.info("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Smart Service System...")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    config_valid = config.validate_config()
    if not config_valid:
        system_logger.warning("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    summary = db_adapter.get_summary()
    db_type = "SQLite" if config.USE_SQLITE else "JSON"
    system_logger.info(f"‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ({db_type}): {summary['total_items']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {summary['average_rate']:.2f} ‡∏ö‡∏≤‡∏ó")
    
    return app

# ===== Flask Routes =====

@app.route('/')
def home():
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå"""
    return render_template('index.html')

@app.route('/health')
def health_check():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
    return jsonify({
        "status": "healthy",
        "database_items": len(db_adapter.get_all_items()),
        "database_type": "SQLite" if config.USE_SQLITE else "JSON",
        "line_bot_active": config.LINE_CHANNEL_ACCESS_TOKEN is not None
    })

@app.route('/search', methods=['GET'])
def search_api():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    try:
        query = request.args.get('query', '').strip()
        system_logger.info(f"API search request: '{query}'")
        
        if not query:
            error_result = error_handler.handle_validation_error("query", "empty")
            return jsonify({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"}), 400
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        found_items = db_adapter.fuzzy_search(query)
        
        if found_items:
            key, item_data = found_items[0]
            result_html = format_web_result(item_data, query)
            system_logger.info(f"Search successful: found '{key}' for query '{query}'")
            return jsonify({"success": True, "result": result_html})
        else:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£
            cgd_link = f"{config.CGD_BASE_URL}?method=search&service_name={query.replace(' ', '+')}"
            not_found_html = (
                f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '{query}' ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô<br><br>"
                f"‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà:<br>"
                f"<a href='{cgd_link}' target='_blank'>‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ '{query}' ‡πÉ‡∏ô mbdb.cgd.go.th</a>"
            )
            system_logger.info(f"Search not found: '{query}'")
            return jsonify({"success": False, "result": not_found_html})
            
    except Exception as e:
        error_result = error_handler.handle_api_error("/search", e)
        return jsonify(error_result), 500

@app.route("/callback", methods=['POST'])
def line_callback():
    """Webhook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å LINE - ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß"""
    try:
        signature = request.headers.get('X-Line-Signature', '')
        body = request.get_data(as_text=True)
        
        # ‡∏•‡∏î logging ‡πÉ‡∏ô production ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        if config.DEBUG:
            system_logger.debug(f"LINE webhook received: signature={signature[:10]}...")
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• webhook - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡πá‡∏ß!
        line_handler.handler.handle(body, signature)
        
        if config.DEBUG:
            system_logger.info("LINE webhook processed successfully")
        
        return 'OK'
        
    except InvalidSignatureError:
        if config.DEBUG:
            system_logger.error("Invalid LINE signature")
        abort(400)
        
    except Exception as e:
        system_logger.error(f"LINE webhook error: {str(e)}")
        abort(500)

@app.route('/search/ai', methods=['GET'])
def ai_search_api():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ AI"""
    try:
        query = request.args.get('query', '').strip()
        system_logger.info(f"AI search request: '{query}'")
        
        if not query:
            return jsonify({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"}), 400
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        all_items = db_adapter.get_all_items()
        items_list = [(k, v) for k, v in all_items.items()]
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ AI
        ai_results = ai_search.enhanced_search(query, items_list, limit=5)
        
        if ai_results:
            results = []
            for score, key, item_data in ai_results:
                result = {
                    "key": key,
                    "score": round(score, 2),
                    "data": format_web_result(item_data, query)
                }
                results.append(result)
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            insights = ai_search.get_search_insights(query, ai_results)
            suggestions = ai_search.suggest_alternatives(query, items_list)
            
            system_logger.info(f"AI search successful: found {len(results)} results with top score {ai_results[0][0]:.2f}")
            
            return jsonify({
                "success": True,
                "results": results,
                "insights": insights,
                "suggestions": suggestions
            })
        else:
            suggestions = ai_search.suggest_alternatives(query, items_list)
            return jsonify({
                "success": False,
                "message": f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '{query}' ‡∏î‡πâ‡∏ß‡∏¢ AI search",
                "suggestions": suggestions
            })
            
    except Exception as e:
        error_result = error_handler.handle_api_error("/search/ai", e)
        return jsonify(error_result), 500

@app.route('/stats')
def stats_api():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö"""
    try:
        summary = db_adapter.get_summary()
        search_stats = db_adapter.get_search_stats(limit=10)
        
        stats = {
            "database": summary,
            "search": search_stats,
            "system": {
                "database_type": "SQLite" if config.USE_SQLITE else "JSON",
                "debug_mode": config.DEBUG,
                "line_bot_active": config.LINE_CHANNEL_ACCESS_TOKEN is not None
            }
        }
        
        system_logger.info("Stats API accessed")
        return jsonify(stats)
        
    except Exception as e:
        error_result = error_handler.handle_api_error("/stats", e)
        return jsonify(error_result), 500

# ===== Helper Functions =====

def format_web_result(item_data, query):
    """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö"""
    cgd_link = f"{config.CGD_BASE_URL}?method=search&service_name={query.replace(' ', '+')}"
    
    return f"""
    <div class="card mb-3">
        <div class="card-body text-start">
            <h5 class="card-title">üîç ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {item_data['name_th']} ({item_data['name_en']})</h5>
            <p class="card-text">
                üíµ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤: <strong>{item_data['rate_baht']:.2f} ‡∏ö‡∏≤‡∏ó</strong><br>
                ‚úÖ ‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥: {', '.join(item_data['rights'])}<br>
                {f"üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {item_data['notes']}<br>" if item_data.get('notes') else ""}
            </p>
            <p class="card-text">
                ‚ÑπÔ∏è ‡∏£‡∏´‡∏±‡∏™‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô:<br>
                - CPT: {item_data['cpt']}<br>
                - ICD-10: {item_data['icd10']}
            </p>
            <a href="{cgd_link}" target="_blank" class="btn btn-sm btn-outline-primary mt-2">
                üîó ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô mbdb.cgd.go.th
            </a>
        </div>
    </div>
    """

# ===== Application Startup =====

if __name__ == '__main__':
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
    app = create_app()
    
    # ‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    system_logger.info(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà {config.HOST}:{config.PORT}")
    system_logger.info(f"‡πÇ‡∏´‡∏°‡∏î DEBUG: {config.DEBUG}")
    system_logger.info("Smart Service System ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
    
    app.run(
        host=config.HOST,
        port=config.PORT,
        debug=config.DEBUG
    )