from fastapi import FastAPI, Request, HTTPException
import urllib.parse
import os

from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage

# --- LINE Bot Configuration ---
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get("LINE_CHANNEL_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.environ.get("LINE_CHANNEL_SECRET")

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

app = FastAPI(
    title="Smart Service System Backend",
    description="API for LINE Bot to provide medical reimbursement information for Thai civil servants.",
    version="1.0.0"
)

# --- ‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô (Knowledge Base) ---
# ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Supabase
knowledge_base = [
    {
        "labCode": "31001",
        "nameTh": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (Urinalysis)",
        "nameEn": "Urinalysis (Physical + Chemical + Microscopic) PANEL.UA",
        "rate": 60,
        "reimbursable": true,
        "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥ (‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏•‡∏≤‡∏á / ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏° / ‡∏£‡∏±‡∏ê‡∏ß‡∏¥‡∏™‡∏≤‡∏´‡∏Å‡∏¥‡∏à)",
        "cgdCode": "MED0301010",
        "cpt": "81000",
        "icd10": "R82.9 (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞)",
        "notes": "‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏ß‡∏à albumin, glucose ‡∏´‡∏≤‡∏Å‡πÄ‡∏ö‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ö‡∏¥‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏ß‡∏à albumin ‡πÅ‡∏•‡∏∞ glucose ‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å ‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏•‡∏≤‡∏á ‡∏ó‡∏µ‡πà ‡∏Å‡∏Ñ 0416.2/‡∏ß 393 ‡∏•‡∏ß. 10 ‡∏ï.‡∏Ñ.60 ‡∏°‡∏µ‡∏ú‡∏•‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏°.‡∏Ñ.61 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ"
    },
    {
        "labCode": "30101",
        "nameTh": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î (CBC)",
        "nameEn": "Complete Blood Count (CBC)",
        "rate": 100,
        "reimbursable": true,
        "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥ (‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏•‡∏≤‡∏á / ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏° / ‡∏£‡∏±‡∏ê‡∏ß‡∏¥‡∏™‡∏≤‡∏´‡∏Å‡∏¥‡∏à)",
        "cgdCode": "MED0301020",
        "cpt": "85025",
        "icd10": "D69.6 (‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏≠‡∏∑‡πà‡∏ô‡πÜ)",
        "notes": "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
    },
    {
        "labCode": "32401",
        "nameTh": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏™‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î (HbA1c)",
        "nameEn": "Glycated Hemoglobin (HbA1c)",
        "rate": 180,
        "reimbursable": true,
        "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥ (‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏•‡∏≤‡∏á / ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏° / ‡∏£‡∏±‡∏ê‡∏ß‡∏¥‡∏™‡∏≤‡∏´‡∏Å‡∏¥‡∏à)",
        "cgdCode": "MED0302040",
        "cpt": "83036",
        "icd10": "E11.9 (‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏ó‡∏µ‡πà 2)",
        "notes": "‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏î‡πâ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏õ‡∏µ"
    },
    {
        "labCode": "30201",
        "nameTh": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î (Glucose)",
        "nameEn": "Blood Glucose",
        "rate": 50,
        "reimbursable": true,
        "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
        "cgdCode": "MED0302010",
        "cpt": "82947",
        "icd10": "R73.0 (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á)",
        "notes": "‡∏Ñ‡∏ß‡∏£‡∏á‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏° 8-12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤)"
    },
    {
        "labCode": "30301",
        "nameTh": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•‡∏£‡∏ß‡∏° (Cholesterol)",
        "nameEn": "Total Cholesterol",
        "rate": 60,
        "reimbursable": true,
        "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
        "cgdCode": "MED0303010",
        "cpt": "82465",
        "icd10": "E78.0 (‡∏†‡∏≤‡∏ß‡∏∞‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á)",
        "notes": "‡∏Ñ‡∏ß‡∏£‡∏á‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏° 9-12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤)"
    },
    {
        "labCode": "30302",
        "nameTh": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÑ‡∏ï‡∏£‡∏Å‡∏•‡∏µ‡πÄ‡∏ã‡∏≠‡πÑ‡∏£‡∏î‡πå (Triglyceride)",
        "nameEn": "Triglyceride",
        "rate": 80,
        "reimbursable": true,
        "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
        "cgdCode": "MED0303020",
        "cpt": "84478",
        "icd10": "E78.1 (‡∏†‡∏≤‡∏ß‡∏∞‡πÑ‡∏ï‡∏£‡∏Å‡∏•‡∏µ‡πÄ‡∏ã‡∏≠‡πÑ‡∏£‡∏î‡πå‡∏™‡∏π‡∏á)",
        "notes": "‡∏Ñ‡∏ß‡∏£‡∏á‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏° 9-12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤)"
    },
    {
        "labCode": "30303",
        "nameTh": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏Ç‡∏°‡∏±‡∏ô HDL (HDL-C)",
        "nameEn": "HDL Cholesterol",
        "rate": 70,
        "reimbursable": true,
        "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
        "cgdCode": "MED0303030",
        "cpt": "80061",
        "icd10": "E78.6 (‡∏†‡∏≤‡∏ß‡∏∞‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏≠‡∏∑‡πà‡∏ô‡πÜ)",
        "notes": "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
    },
    {
        "labCode": "30304",
        "nameTh": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏Ç‡∏°‡∏±‡∏ô LDL (LDL-C)",
        "nameEn": "LDL Cholesterol",
        "rate": 70,
        "reimbursable": true,
        "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
        "cgdCode": "MED0303040",
        "cpt": "80061",
        "icd10": "E78.2 (‡∏†‡∏≤‡∏ß‡∏∞‡πÑ‡∏Ç‡∏°‡∏±‡∏ô LDL ‡∏™‡∏π‡∏á)",
        "notes": "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
    },
    {
        "labCode": "30401",
        "nameTh": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ö (SGOT/AST)",
        "nameEn": "SGOT/AST",
        "rate": 50,
        "reimbursable": true,
        "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
        "cgdCode": "MED0304010",
        "cpt": "84450",
        "icd10": "R74.0 (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏≠‡∏ô‡πÑ‡∏ã‡∏°‡πå‡∏ï‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥)",
        "notes": "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
    },
    {
        "labCode": "30402",
        "nameTh": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ö (SGPT/ALT)",
        "nameEn": "SGPT/ALT",
        "rate": 50,
        "reimbursable": true,
        "rights": "‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥",
        "cgdCode": "MED0304020",
        "cpt": "84460",
        "icd10": "R74.0 (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏≠‡∏ô‡πÑ‡∏ã‡∏°‡πå‡∏ï‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥)",
        "notes": "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
    }
]

def generate_cgd_link(query: str) -> str:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏•‡∏≤‡∏á"""
    encoded_query = urllib.parse.quote(query)
    return f"https://mbdb.cgd.go.th/wel/searchmed.jsp?method=search&service_name={encoded_query}"

def process_query(query: str) -> str:
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"""
    lower_case_query = query.lower()
    found_item = None

    # Fuzzy search logic
    for item in knowledge_base:
        if (lower_case_query in item["labCode"].lower() or
            lower_case_query in item["nameTh"].lower() or
            lower_case_query in item["nameEn"].lower() or
            lower_case_query in item["cpt"].lower() or
            lower_case_query in item["icd10"].lower() or
            lower_case_query in item["cgdCode"].lower()):
            found_item = item
            break

    cgd_link = generate_cgd_link(query)

    if found_item:
        response_text = (
            f"‚ú® ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! üòä ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ **\"{found_item['nameTh']} ({found_item['nameEn']})\"** ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö:\n\n"
            f"üíµ **‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:** {found_item['rate']:.2f} ‡∏ö‡∏≤‡∏ó\n"
            f"‚úÖ **‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å:** ‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥ **{found_item['rights']}** ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö!\n"
        )
        if found_item.get("notes"):
            response_text += f"üìù **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏π‡πâ:** {found_item['notes']}\n"

        response_text += (
            f"\nüí° **‡∏£‡∏´‡∏±‡∏™‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:**\n"
            f"*   CPT: `{found_item['cpt']}`\n"
            f"*   ICD-10: `{found_item['icd10']}`\n"
            f"*   ‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏•‡∏≤‡∏á: `{found_item['cgdCode']}`\n\n"
            f"üîó **‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:**\n"
            f"[‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÉ‡∏ô mbdb.cgd.go.th]({cgd_link})\n\n"
            f"‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö! üòä"
        )
    else:
        response_text = (
            f"üòî ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ **\"{query}\"** ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡∏ú‡∏°‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ ‡∏Ñ‡∏£‡∏±‡∏ö!\n\n"
            f"‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πà‡∏ß‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏•‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üëá\n"
            f"[‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ \"{query}\" ‡πÉ‡∏ô mbdb.cgd.go.th]({cgd_link})\n\n"
            f"‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö! üôè"
        )
    return response_text

# --- LINE Webhook Endpoint ---
@app.post("/webhook")
async def line_webhook(request: Request):
    """
    Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö Webhook ‡∏à‡∏≤‡∏Å LINE Messaging API
    """
    # get X-Line-Signature header value
    signature = request.headers['X-Line-Signature']

    # get request body as text
    body = await request.body()
    body_str = body.decode('utf-8')

    # handle webhook body
    try:
        handler.handle(body_str, signature)
    except InvalidSignatureError:
        raise HTTPException(status_code=400, detail="Invalid signature. Please check your channel access token/channel secret.")
    
    return "OK" # LINE ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô "OK"

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_query = event.message.text
    print(f"Received message from LINE: {user_query}") # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
    
    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
    response_message = process_query(user_query)
    
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=response_message)
    )
    print(f"Responding to LINE with: \n{response_message}") # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug


@app.get("/")
async def root():
    return {"message": "Smart Service System Backend is running!"}

# ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ uvicorn ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á:
# uvicorn main:app --reload --port 8000