"""
üìÅ src/handlers/affiliate_handler.py
üéØ LINE Bot Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Affiliate Product Review Bot
"""

import re
import traceback
from typing import Dict, List, Optional
from urllib.parse import quote

from linebot.v3.messaging import (
    Configuration, ApiClient, MessagingApi, ReplyMessageRequest, 
    TextMessage, QuickReply, QuickReplyItem, MessageAction,
    FlexMessage, FlexContainer, FlexBox, FlexText, FlexButton,
    URIAction, FlexImage, FlexSeparator
)
from linebot.v3.webhook import WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.v3.webhooks import MessageEvent, TextMessageContent

from ..config import config
from ..utils.supabase_database import SupabaseDatabase
from ..utils.promotion_generator import PromotionGenerator
from ..utils.rich_menu_manager import rich_menu_manager
from ..utils.bulk_importer import bulk_importer
from ..utils.ai_recommender import ai_recommender

class AffiliateLineHandler:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ LINE Bot messages ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Affiliate Products"""
    
    def __init__(self):
        self.admin_state = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ user
        self.db = SupabaseDatabase()
        self.promo_generator = PromotionGenerator()
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Bot API
        if config.LINE_CHANNEL_ACCESS_TOKEN and config.LINE_CHANNEL_SECRET:
            configuration = Configuration(access_token=config.LINE_CHANNEL_ACCESS_TOKEN)
            self.line_bot_api = MessagingApi(ApiClient(configuration))
            self.handler = WebhookHandler(config.LINE_CHANNEL_SECRET)
            self._register_handlers()
            print("[OK] Affiliate LINE Bot API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        else:
            print("[WARNING] LINE Bot ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡πÑ‡∏°‡πà‡∏°‡∏µ tokens)")
            self.line_bot_api = self._create_dummy_api()
            self.handler = self._create_dummy_handler()
    
    def _create_dummy_api(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á dummy API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ LINE tokens"""
        class DummyLineBotApi:
            def reply_message(self, *args, **kwargs):
                print("[DEBUG] Dummy LINE API: reply_message called")
        return DummyLineBotApi()
    
    def _create_dummy_handler(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á dummy handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ LINE tokens"""
        class DummyWebhookHandler:
            def handle(self, *args, **kwargs):
                print("[DEBUG] Dummy Handler: handle called")
            def add(self, *args, **kwargs):
                return lambda f: f
        return DummyWebhookHandler()
    
    def _register_handlers(self):
        """‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô message handlers"""
        @self.handler.add(MessageEvent, message=TextMessageContent)
        def handle_text_message(event):
            self.handle_message(event)
    
    def handle_message(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å LINE"""
        user_id = event.source.user_id
        text = event.message.text.strip()
        
        print(f"[DEBUG] Received message: '{text}' from user: {user_id}")
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Admin
            if text.lower() in [word.lower() for word in config.ADMIN_KEYWORDS]:
                self._handle_admin_entry(event, user_id)
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if user_id in self.admin_state:
                self._handle_admin_flow(event, user_id, text)
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
            if text.lower() in ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "hello", "hi", "‡∏î‡∏µ", "‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ", "‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏Ñ‡πà‡∏∞", "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞"]:
                self._show_welcome_message(event)
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©
            if text.lower().startswith("‡∏£‡∏´‡∏±‡∏™ "):
                product_code = text[4:].strip()
                self._handle_product_code_search(event, product_code)
                return
            
            if text.lower().startswith("‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ï "):
                product_code = text[7:].strip()
                self._handle_promotion_generation(event, product_code)
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á pagination
            if text.startswith("‡∏´‡∏ô‡πâ‡∏≤") and ":" in text:
                self._handle_pagination_command(event, text, user_id)
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á filtering
            if text.lower().startswith("‡∏Å‡∏£‡∏≠‡∏á "):
                self._handle_filter_command(event, text[5:].strip(), user_id)
                return
            
            if text.lower().startswith("‡πÄ‡∏£‡∏µ‡∏¢‡∏á "):
                self._handle_sort_command(event, text[6:].strip(), user_id)
                return
            
            # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏à‡∏≤‡∏Å Quick Reply
            if text.lower().startswith("top-products "):
                self._handle_top_products_command(event, text)
                return
            
            if text.lower().startswith("‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î "):
                sort_type = text[14:].strip()  # ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î " ‡∏≠‡∏≠‡∏Å
                self._handle_global_sort_command(event, sort_type, user_id)
                return
            
            if text.lower().startswith("‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏´‡∏°‡∏ß‡∏î:"):
                self._handle_category_sort_command(event, text, user_id)
                return
            
            if text.lower() in ["‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥", "stats"]:
                self._show_stats(event)
                return
            
            if text.lower() in ["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", "categories"]:
                self._show_categories(event)
                return
            
            # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Rich Menu (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)
            if text.upper() in ["SEARCH", "Q"]:
                self._show_search_guide(event)
                return
            
            if text.upper() in ["CATEGORY", "C"]:
                self._show_categories(event)
                return
                
            if text.upper() in ["BESTSELLER", "B"]:
                self._show_bestsellers(event)
                return
            
            if text.upper() in ["PROMOTION", "P"]:
                self._show_promotions(event)
                return
                
            if text.upper() in ["STATS", "S"]:
                self._show_stats(event)
                return
            
            if text.upper() in ["HELP", "H"]:
                self._show_help_menu(event)
                return
            
            # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏á‡πà‡∏≤‡∏¢ ‡πÜ
            if text in ["‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", "‡∏´‡∏≤", "‡∏ã‡∏∑‡πâ‡∏≠", "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "search"]:
                self._show_search_guide(event)
                return
            
            # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå/‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
            mobile_keywords = ["‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠", "‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", "smartphone", "iphone", "samsung", "android"]
            if any(keyword in text.lower() for keyword in mobile_keywords):
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ
                self._handle_mobile_search_suggestion(event, text)
                return
                
            if text in ["‡∏´‡∏°‡∏ß‡∏î", "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏´‡∏°‡∏ß‡∏î ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "category"]:
                self._show_categories(event)
                return
                
            if text in ["‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ", "‡∏ô‡∏¥‡∏¢‡∏°", "‡∏Æ‡∏¥‡∏ï", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏¥‡∏¢‡∏°", "bestseller"]:
                self._show_bestsellers(event)
                return
                
            if text in ["‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô", "‡πÇ‡∏õ‡∏£", "‡∏•‡∏î", "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "promotion"]:
                self._show_promotions(event)
                return
                
            if text in ["‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥", "stats"]:
                self._show_stats(event)
                return
                
            if text in ["‡∏ä‡πà‡∏ß‡∏¢", "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ", "‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠", "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "help"]:
                self._show_help_menu(event)
                return
                
            if text in ["‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å", "‡∏Å‡∏•‡∏±‡∏ö", "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà", "home", "‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", "‡πÄ‡∏°‡∏ô‡∏π", "üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"]:
                self._show_home_menu(event)
                return
            
            # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Admin ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
            if user_id == config.ADMIN_USER_ID:
                if text.startswith("/"):
                    self._handle_admin_commands(event, text, user_id)
                    return
            
            if text.lower().startswith("‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥") or text.lower() in ["recommendations", "recommend", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]:
                # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ AI
                self._show_ai_recommendations(event, user_id, text)
                return
            
            if text.lower().startswith("‡∏´‡∏°‡∏ß‡∏î "):
                category_name = text[5:].strip()
                self._browse_category(event, category_name, user_id)
                return
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
            self._handle_product_search(event, text, user_id)
            
        except Exception as e:
            print(f"[ERROR] Affiliate LINE handler error: {traceback.format_exc()}")
            self._reply_error_message(event)
    
    def _handle_admin_commands(self, event, text: str, user_id: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Admin ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
        command = text.lower()
        
        if command == "/help":
            self._show_admin_help(event)
        elif command == "/stats" or command == "/‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥":
            self._show_admin_stats(event)
        elif command == "/products" or command == "/‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
            self._show_admin_products(event)
        elif command == "/users" or command == "/‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ":
            self._show_admin_users(event)
        elif command.startswith("/add"):
            self._show_add_product_guide(event)
        elif command.startswith("/import"):
            self._show_import_guide(event)
        else:
            self._show_admin_help(event)
    
    def _show_admin_help(self, event):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Admin ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        help_text = """üîê ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Admin

üìä /stats - ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö
üì¶ /products - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤  
üë• /users - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
‚ûï /add - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
üì• /import - ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å

üí° ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!"""
        
        self.line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=help_text)]
            )
        )

    def _handle_admin_entry(self, event, user_id: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î Admin"""
        welcome_text = """üîê ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö Admin!

‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ:

üìä /stats - ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
üì¶ /products - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
üë• /users - ‡∏î‡∏π‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
‚ûï /add - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
üì• /import - ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
‚ùì /help - ‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!"""
        
        quick_replies = QuickReply(items=[
            QuickReplyItem(action=MessageAction(label="üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥", text="/stats")),
            QuickReplyItem(action=MessageAction(label="üì¶ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", text="/products")),
            QuickReplyItem(action=MessageAction(label="üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", text="/users")),
            QuickReplyItem(action=MessageAction(label="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", text="/add")),
            QuickReplyItem(action=MessageAction(label="üì• ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤", text="/import")),
            QuickReplyItem(action=MessageAction(label="‚ùì ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", text="/help")),
        ])
        
        self.line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text="üõçÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ Affiliate - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:", quick_reply=quick_replies)]
            )
        )
    
    def _handle_admin_flow(self, event, user_id: str, text: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Admin workflow"""
        current_state = self.admin_state[user_id]
        current_mode = current_state.get("mode")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        if text.lower() == config.CANCEL_KEYWORD:
            del self.admin_state[user_id]
            self._reply_text(event, "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
            return
        
        # Main Menu
        if current_mode == "main_menu":
            self._handle_admin_menu(event, user_id, text)
        # Add Product Flow
        elif current_mode.startswith("add_"):
            self._handle_add_product_flow(event, user_id, text, current_mode)
        # Edit Product Flow  
        elif current_mode.startswith("edit_"):
            self._handle_edit_product_flow(event, user_id, text, current_mode)
        # Delete Product Flow
        elif current_mode.startswith("delete_"):
            self._handle_delete_product_flow(event, user_id, text, current_mode)
    
    def _handle_admin_menu(self, event, user_id: str, text: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
        if text == "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
            self.admin_state[user_id] = {"mode": "add_product_code", "data": {}}
            self._reply_text(event, "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà\nüìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô PHONE001):")
            
        elif text == "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
            self.admin_state[user_id] = {"mode": "edit_product_select"}
            self._reply_text(event, "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤\nüìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
            
        elif text == "‚ùå ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
            self.admin_state[user_id] = {"mode": "delete_product_select"}
            self._reply_text(event, "‚ùå ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤\nüìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö:")
            
        elif text == "üìã ‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            self._show_all_products(event, user_id)
            
        elif text == "üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥":
            self._show_admin_stats(event, user_id)
            
        elif text == "üéõÔ∏è Dashboard":
            self._show_admin_dashboard(event, user_id)
            
        else:
            self._reply_text(event, "‚ùì ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π")
    
    def _handle_add_product_flow(self, event, user_id: str, text: str, mode: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà"""
        state = self.admin_state[user_id]
        
        if mode == "add_product_code":
            state["data"]["product_code"] = text.upper()
            state["mode"] = "add_product_name"
            self._reply_text(event, "üìù ‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:")
            
        elif mode == "add_product_name":
            state["data"]["product_name"] = text
            state["mode"] = "add_product_price"
            self._reply_text(event, "üí∞ ‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç):")
            
        elif mode == "add_product_price":
            try:
                price = float(text)
                state["data"]["price"] = price
                state["mode"] = "add_shop_name"
                self._reply_text(event, "üè™ ‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤:")
            except ValueError:
                self._reply_text(event, "‚ùå ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà:")
                
        elif mode == "add_shop_name":
            state["data"]["shop_name"] = text
            state["mode"] = "add_commission_rate"
            self._reply_text(event, f"üìä ‡∏õ‡πâ‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô (%) [‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {config.DEFAULT_COMMISSION_RATE}%]:")
            
        elif mode == "add_commission_rate":
            try:
                if text.strip() == "":
                    rate = config.DEFAULT_COMMISSION_RATE
                else:
                    rate = float(text)
                state["data"]["commission_rate"] = rate
                state["mode"] = "add_product_link"
                self._reply_text(event, "üîó ‡∏õ‡πâ‡∏≠‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:")
            except ValueError:
                self._reply_text(event, "‚ùå ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà:")
                
        elif mode == "add_product_link":
            state["data"]["product_link"] = text
            state["mode"] = "add_offer_link"
            self._reply_text(event, "üéØ ‡∏õ‡πâ‡∏≠‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠ (Affiliate Link):")
            
        elif mode == "add_offer_link":
            state["data"]["offer_link"] = text
            state["mode"] = "add_category"
            self._reply_text(event, "üìÇ ‡∏õ‡πâ‡∏≠‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö):")
            
        elif mode == "add_category":
            state["data"]["category"] = text if text.strip() else "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
            state["mode"] = "add_description"
            self._reply_text(event, "üìã ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö):")
            
        elif mode == "add_description":
            state["data"]["description"] = text if text.strip() else ""
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            result = self.db.add_product(state["data"])
            
            if result:
                commission_amount = (state["data"]["price"] * state["data"]["commission_rate"]) / 100
                summary = (
                    f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n"
                    f"üîë ‡∏£‡∏´‡∏±‡∏™: {state['data']['product_code']}\n"
                    f"üì± ‡∏ä‡∏∑‡πà‡∏≠: {state['data']['product_name']}\n"
                    f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: {state['data']['price']:,.2f} ‡∏ö‡∏≤‡∏ó\n"
                    f"üè™ ‡∏£‡πâ‡∏≤‡∏ô: {state['data']['shop_name']}\n"
                    f"üìä ‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô: {state['data']['commission_rate']}% = {commission_amount:,.2f} ‡∏ö‡∏≤‡∏ó"
                )
                self._reply_text(event, summary)
            else:
                self._reply_text(event, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
            
            del self.admin_state[user_id]
    
    def _handle_pagination_command(self, event, text: str, user_id: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á pagination ‡πÄ‡∏ä‡πà‡∏ô '‡∏´‡∏ô‡πâ‡∏≤2:‡πÅ‡∏°‡∏ß'"""
        try:
            # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            parts = text.split(":")
            page_part = parts[0]
            page = int(page_part.replace("‡∏´‡∏ô‡πâ‡∏≤", ""))
            query = parts[1] if len(parts) > 1 else ""
            
            # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• filtering
            category = None
            min_price = None
            max_price = None
            order_by = 'created_at'
            
            for part in parts[2:]:
                if part.startswith("cat:"):
                    category = part[4:]
                elif part.startswith("minp:"):
                    min_price = float(part[5:])
                elif part.startswith("maxp:"):
                    max_price = float(part[5:])
                elif part.startswith("sort:"):
                    order_by = part[5:]
            
            self._handle_product_search(event, query, user_id, page, category, min_price, max_price, order_by)
            
        except (ValueError, IndexError) as e:
            print(f"[ERROR] Invalid pagination command: {text}, error: {e}")
            self._reply_text(event, "‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
    
    def _handle_filter_command(self, event, filter_text: str, user_id: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏£‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô '‡∏Å‡∏£‡∏≠‡∏á ‡πÅ‡∏°‡∏ß ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á ‡∏£‡∏≤‡∏Ñ‡∏≤:10-100'"""
        try:
            parts = filter_text.split()
            query = parts[0] if parts else ""
            
            category = None
            min_price = None
            max_price = None
            
            for part in parts[1:]:
                if part.startswith("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:"):
                    category = part[9:]
                elif part.startswith("‡∏£‡∏≤‡∏Ñ‡∏≤:"):
                    price_range = part[5:]
                    if "-" in price_range:
                        min_str, max_str = price_range.split("-")
                        min_price = float(min_str) if min_str else None
                        max_price = float(max_str) if max_str else None
            
            self._handle_product_search(event, query, user_id, 1, category, min_price, max_price)
            
        except Exception as e:
            print(f"[ERROR] Invalid filter command: {filter_text}, error: {e}")
            self._reply_text(event, "‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\nüí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: '‡∏Å‡∏£‡∏≠‡∏á ‡πÅ‡∏°‡∏ß ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á ‡∏£‡∏≤‡∏Ñ‡∏≤:10-100'")
    
    def _handle_sort_command(self, event, sort_text: str, user_id: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡πÄ‡∏ä‡πà‡∏ô '‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡πÅ‡∏°‡∏ß ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å'"""
        try:
            parts = sort_text.split()
            query = parts[0] if parts else ""
            sort_option = parts[1] if len(parts) > 1 else "‡πÉ‡∏´‡∏°‡πà"
            
            order_by_map = {
                "‡πÉ‡∏´‡∏°‡πà": "created_at",
                "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å": "price_low", 
                "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏û‡∏á": "price_high",
                "‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ": "popularity",
                "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô": "rating",
                "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà": "category",
                "‡∏ä‡∏∑‡πà‡∏≠": "product_name"
            }
            
            order_by = order_by_map.get(sort_option, "created_at")
            
            self._handle_product_search(event, query, user_id, 1, None, None, None, order_by)
            
        except Exception as e:
            print(f"[ERROR] Invalid sort command: {sort_text}, error: {e}")
            self._reply_text(event, "‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\nüí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: '‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡πÅ‡∏°‡∏ß ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å' (‡πÉ‡∏´‡∏°‡πà/‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å/‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏û‡∏á/‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ/‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà/‡∏ä‡∏∑‡πà‡∏≠)")
    
    def _handle_product_search(self, event, query: str, user_id: str = None, 
                             page: int = 1, category: str = None, 
                             min_price: float = None, max_price: float = None, 
                             order_by: str = 'created_at'):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° pagination ‡πÅ‡∏•‡∏∞ filtering"""
        try:
            print(f"[DEBUG] Searching for: '{query}' (page {page})")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì offset ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pagination
            limit = config.MAX_RESULTS_PER_SEARCH
            offset = (page - 1) * limit
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            search_result = self.db.search_products(
                query=query, 
                limit=limit, 
                offset=offset,
                category=category,
                min_price=min_price,
                max_price=max_price,
                order_by=order_by
            )
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï AI recommendations ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            if user_id and search_result.get('data'):
                ai_recommender.update_user_interests(user_id, query, search_result['data'])
            
            products = search_result.get('products', [])
            total = search_result.get('total', 0)
            has_more = search_result.get('has_more', False)
            
            print(f"[DEBUG] Found {len(products)} products (total: {total}, has_more: {has_more})")
            
            if products:
                if len(products) == 1 and total == 1:
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                    self._send_product_simple(event, products[0])
                else:
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏° pagination
                    self._send_products_list_with_pagination(
                        event, products, query, page, total, has_more, 
                        category, min_price, max_price, order_by
                    )
            else:
                self._send_not_found_message(event, query)
                
        except Exception as e:
            print(f"[ERROR] Product search error: {e}")
            self._reply_text(event, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
    
    def _handle_product_code_search(self, event, product_code: str):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        print(f"[DEBUG] Searching by product code: '{product_code}'")
        product = self.db.get_product_by_code(product_code.upper())
        print(f"[DEBUG] Product found: {product is not None}")
        
        if product:
            self._send_product_simple(event, product)
        else:
            self._reply_text(event, f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ '{product_code}'\nüí° ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ó‡∏ô")
    
    def _handle_promotion_generation(self, event, product_code: str):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        print(f"[DEBUG] Generating promotion for product code: '{product_code}'")
        product = self.db.get_product_by_code(product_code.upper())
        
        if product:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ï 3 ‡πÅ‡∏ö‡∏ö
            promotions = self.promo_generator.generate_multiple_promotions(product, 3)
            
            response = "üéØ ‡∏Ñ‡∏≥‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ 3 ‡πÅ‡∏ö‡∏ö:\n\n"
            
            for i, promo in enumerate(promotions, 1):
                response += f"üìù ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà {i}:\n{promo}\n\n" + "="*30 + "\n\n"
            
            response += "üí° Copy ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢! ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡πÉ‡∏à‡∏ä‡∏≠‡∏ö‡∏ô‡∏∞‡∏Ñ‡∏∞"
            
            self._reply_text(event, response)
        else:
            self._reply_text(event, f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ '{product_code}'\nüí° ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á '‡∏£‡∏´‡∏±‡∏™ {product_code}' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô")
    
    def _send_product_simple(self, event, product: Dict):
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ - ‡πÉ‡∏ä‡πâ Flex Message ‡∏ã‡πà‡∏≠‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå"""
        self._send_product_flex_hidden_link(event, product)
    
    def _shorten_product_name(self, name: str) -> str:
        """‡∏¢‡πà‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"""
        if len(name) <= 50:
            return name
            
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        name = name.replace('„Äê', '').replace('„Äë', '')
        name = name.replace('‚ú®', '').replace('üî•', '')
        
        # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        words = name.split()
        if len(words) <= 8:
            return name
            
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        important_words = words[:6]
        return ' '.join(important_words) + '...'
    
    def _format_sold_count(self, count: int) -> str:
        """‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"""
        if count >= 10000:
            return f"{count//1000}k+"
        elif count >= 1000:
            return f"{count//100}00+"
        else:
            return str(count)
    
    def _create_professional_link_display(self, offer_link: str) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏ã‡πà‡∏≠‡∏ô URL ‡∏¢‡∏≤‡∏ß‡πÜ"""
        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á URL
        link_styles = [
            "üì± ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
            "üõçÔ∏è ‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", 
            "üõí ‡∏™‡∏±‡πà‡∏á‡πÄ‡∏•‡∏¢",
            "üì¶ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
            "üéØ ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏•‡∏¢",
            "‚ú® ‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà",
            "üî• ‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
            "üíØ ‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ",
            "üåü ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏¢",
            "‚ö° ‡∏™‡∏±‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô"
        ]
        
        # ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πÑ‡∏ï‡∏•‡πå (‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á URL)
        import random
        style = random.choice(link_styles)
        
        return f"{style}"
    
    def _send_product_flex_hidden_link(self, event, product: Dict):
        """‡∏™‡πà‡∏á Flex Message ‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏ô‡∏õ‡∏∏‡πà‡∏°"""
        name = self._shorten_product_name(product['product_name'])
        price = product['price']
        sold_count = product.get('sold_count', 0)
        shop_name = product['shop_name']
        offer_link = product['offer_link']
        rating = product.get('rating', 0)
        
        sold_display = self._format_sold_count(sold_count)
        short_link = self._create_professional_link_display(offer_link)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á content ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö body
        body_contents = [
            {
                "type": "text",
                "text": name,
                "weight": "bold",
                "size": "lg",
                "wrap": True,
                "color": "#333333"
            },
            {
                "type": "text",
                "text": f"üí∏ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏û‡∏µ‡∏¢‡∏á {price:,.0f} ‡∏ö‡∏≤‡∏ó!",
                "size": "md",
                "weight": "bold",
                "color": "#E74C3C",
                "margin": "sm"
            }
        ]
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
        if sold_count >= 1000:
            body_contents.append({
                "type": "text",
                "text": f"üì¶ ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ {sold_display} ‡∏ä‡∏¥‡πâ‡∏ô",
                "size": "sm",
                "color": "#27AE60",
                "margin": "xs"
            })
        elif sold_count > 0:
            body_contents.append({
                "type": "text",
                "text": f"üì¶ ‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß {sold_display} ‡∏ä‡∏¥‡πâ‡∏ô",
                "size": "sm",
                "color": "#27AE60",
                "margin": "xs"
            })
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        if rating >= 4.0:
            stars = "‚≠ê" * min(int(rating), 5)
            body_contents.append({
                "type": "text",
                "text": f"{stars} ({rating})",
                "size": "sm",
                "color": "#F39C12",
                "margin": "xs"
            })
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô
        body_contents.append({
            "type": "text",
            "text": f"üè™ ‡∏£‡πâ‡∏≤‡∏ô {shop_name}",
            "size": "sm",
            "color": "#666666",
            "margin": "sm"
        })
        
        flex_contents = {
            "type": "bubble",
            "size": "kilo",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": body_contents,
                "spacing": "sm",
                "paddingAll": "18px"
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "button",
                        "action": {
                            "type": "uri",
                            "label": short_link,
                            "uri": offer_link
                        },
                        "style": "primary",
                        "color": "#FF6B35",
                        "height": "sm"
                    }
                ],
                "paddingAll": "18px"
            }
        }
        
        flex_message = FlexMessage(
            alt_text=f"üî∏ {name}",
            contents=FlexContainer.from_dict(flex_contents)
        )
        
        self.line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[flex_message]
            )
        )
    
    def _create_products_carousel(self, products: List[Dict], query: str) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Carousel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"""
        bubbles = []
        
        for product in products[:10]:  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            name = self._shorten_product_name(product['product_name'])
            price = product['price']
            sold_count = product.get('sold_count', 0)
            shop_name = product['shop_name']
            offer_link = product['offer_link']
            rating = product.get('rating', 0)
            
            sold_display = self._format_sold_count(sold_count)
            short_link = self._create_professional_link_display(offer_link)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á content ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ bubble
            body_contents = [
                {
                    "type": "text",
                    "text": name,
                    "weight": "bold",
                    "size": "md",
                    "wrap": True,
                    "maxLines": 3
                },
                {
                    "type": "text",
                    "text": f"üí∏ {price:,.0f} ‡∏ö‡∏≤‡∏ó",
                    "size": "sm",
                    "weight": "bold",
                    "color": "#E74C3C",
                    "margin": "sm"
                }
            ]
            
            if sold_count >= 1000:
                body_contents.append({
                    "type": "text",
                    "text": f"üì¶ {sold_display}",
                    "size": "xs",
                    "color": "#27AE60",
                    "margin": "xs"
                })
            
            if rating >= 4.0:
                stars = "‚≠ê" * min(int(rating), 5)
                body_contents.append({
                    "type": "text",
                    "text": f"{stars}",
                    "size": "xs",
                    "color": "#F39C12",
                    "margin": "xs"
                })
            
            bubble = {
                "type": "bubble",
                "size": "nano",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": body_contents,
                    "spacing": "xs",
                    "paddingAll": "12px"
                },
                "footer": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "button",
                            "action": {
                                "type": "uri",
                                "label": short_link,
                                "uri": offer_link
                            },
                            "style": "primary",
                            "color": "#FF6B35",
                            "height": "sm"
                        }
                    ],
                    "paddingAll": "12px"
                }
            }
            
            bubbles.append(bubble)
        
        return {
            "type": "carousel",
            "contents": bubbles
        }
    
    def _send_products_list_with_pagination(self, event, products: List[Dict], query: str, 
                                          page: int, total: int, has_more: bool,
                                          category: str = None, min_price: float = None, 
                                          max_price: float = None, order_by: str = 'created_at'):
        """‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° pagination controls"""
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Carousel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        flex_contents = self._create_products_carousel(products, query)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pagination
        total_pages = (total + config.MAX_RESULTS_PER_SEARCH - 1) // config.MAX_RESULTS_PER_SEARCH
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° pagination
        pagination_buttons = []
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        if page > 1:
            prev_action = f"‡∏´‡∏ô‡πâ‡∏≤{page-1}:{query}"
            if category:
                prev_action += f":cat:{category}"
            if min_price:
                prev_action += f":minp:{min_price}"
            if max_price:
                prev_action += f":maxp:{max_price}"
            if order_by != 'created_at':
                prev_action += f":sort:{order_by}"
                
            pagination_buttons.append({
                "type": "button",
                "action": {
                    "type": "message",
                    "label": "‚óÄÔ∏è ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô",
                    "text": prev_action
                },
                "style": "secondary",
                "height": "sm"
            })
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        if has_more:
            next_action = f"‡∏´‡∏ô‡πâ‡∏≤{page+1}:{query}"
            if category:
                next_action += f":cat:{category}"
            if min_price:
                next_action += f":minp:{min_price}"
            if max_price:
                next_action += f":maxp:{max_price}"
            if order_by != 'created_at':
                next_action += f":sort:{order_by}"
                
            pagination_buttons.append({
                "type": "button",
                "action": {
                    "type": "message",
                    "label": "‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚ñ∂Ô∏è",
                    "text": next_action
                },
                "style": "secondary", 
                "height": "sm"
            })
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° footer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pagination ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏´‡∏ô‡πâ‡∏≤
        if total_pages > 1:
            flex_contents["contents"].append({
                "type": "bubble",
                "size": "nano",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": f"üìÑ ‡∏´‡∏ô‡πâ‡∏≤ {page}/{total_pages}",
                            "size": "sm",
                            "align": "center",
                            "weight": "bold",
                            "color": "#666666"
                        },
                        {
                            "type": "text",
                            "text": f"‡∏£‡∏ß‡∏° {total} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
                            "size": "xs",
                            "align": "center",
                            "color": "#999999",
                            "margin": "xs"
                        }
                    ],
                    "paddingAll": "12px"
                },
                "footer": {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": pagination_buttons,
                    "spacing": "sm",
                    "paddingAll": "8px"
                } if pagination_buttons else None
            })
        
        flex_message = FlexMessage(
            alt_text=f"üîç ‡πÄ‡∏à‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {len(products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏´‡∏ô‡πâ‡∏≤ {page}/{total_pages})",
            contents=FlexContainer.from_dict(flex_contents)
        )
        
        self.line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[flex_message]
            )
        )
    
    def _send_product_flex(self, event, product: Dict):
        """‡∏™‡πà‡∏á Flex Message ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        commission_amount = product.get('commission_amount', 0)
        rating_stars = "‚≠ê" * int(product.get('rating', 0))
        
        flex_contents = {
            "type": "bubble",
            "size": "giga",
            "header": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": product['product_name'],
                        "weight": "bold",
                        "size": "lg",
                        "wrap": True
                    }
                ],
                "backgroundColor": "#4A90E2",
                "paddingAll": "20px"
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                            {
                                "type": "text",
                                "text": f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: {product['price']:,.0f} ‡∏ö‡∏≤‡∏ó",
                                "size": "md",
                                "weight": "bold",
                                "color": "#E74C3C"
                            },
                            {
                                "type": "text", 
                                "text": f"üè™ ‡∏£‡πâ‡∏≤‡∏ô: {product['shop_name']}",
                                "size": "sm",
                                "color": "#666666"
                            },
                            {
                                "type": "text",
                                "text": f"üî• ‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß: {product.get('sold_count', 0)} ‡∏ä‡∏¥‡πâ‡∏ô",
                                "size": "sm",
                                "color": "#666666"
                            }
                        ],
                        "spacing": "sm"
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                            {
                                "type": "text",
                                "text": f"üí∏ ‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô: {product['commission_rate']}%",
                                "size": "sm",
                                "color": "#27AE60",
                                "weight": "bold"
                            },
                            {
                                "type": "text",
                                "text": f"= {commission_amount:,.2f} ‡∏ö‡∏≤‡∏ó",
                                "size": "sm",
                                "color": "#27AE60",
                                "weight": "bold"
                            }
                        ],
                        "spacing": "xs",
                        "margin": "md"
                    }
                ],
                "spacing": "md",
                "paddingAll": "20px"
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "button",
                        "action": {
                            "type": "uri",
                            "label": "üõí ‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
                            "uri": product['offer_link']
                        },
                        "style": "primary",
                        "color": "#E74C3C"
                    }
                ],
                "spacing": "sm",
                "paddingAll": "20px"
            }
        }
        
        if product.get('description'):
            flex_contents["body"]["contents"].append({
                "type": "separator",
                "margin": "md"
            })
            flex_contents["body"]["contents"].append({
                "type": "text",
                "text": product['description'][:100] + ("..." if len(product['description']) > 100 else ""),
                "size": "xs",
                "color": "#888888",
                "wrap": True,
                "margin": "md"
            })
        
        if rating_stars:
            flex_contents["body"]["contents"][0]["contents"].append({
                "type": "text",
                "text": f"{rating_stars} ({product.get('rating', 0)})",
                "size": "sm",
                "color": "#F39C12"
            })
        
        flex_message = FlexMessage(
            alt_text=f"‡∏£‡∏µ‡∏ß‡∏¥‡∏ß: {product['product_name']}",
            contents=FlexContainer.from_dict(flex_contents)
        )
        
        self.line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[flex_message]
            )
        )
    
    def _send_products_list(self, event, products: List[Dict], query: str):
        """‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢"""
        if len(products) == 1:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢ Flex Message ‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå
            self._send_product_flex_hidden_link(event, products[0])
            return
        
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÉ‡∏ä‡πâ Flex Carousel
        flex_contents = self._create_products_carousel(products, query)
        
        flex_message = FlexMessage(
            alt_text=f"üîç ‡πÄ‡∏à‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡∏µ‡πÜ {len(products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
            contents=FlexContainer.from_dict(flex_contents)
        )
        
        self.line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[flex_message]
            )
        )
    
    def _send_not_found_message(self, event, query: str):
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        message = (
            f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{query}'\n\n"
            f"üí° ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢:\n"
            f"‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏°‡∏ß', '‡∏Ñ‡∏£‡∏µ‡∏°'\n"
            f"‚Ä¢ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÄ‡∏ä‡πà‡∏ô '‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°'\n\n"
            f"‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
        )
        self._reply_text(event, message)
    
    def _show_stats(self, event):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
        stats = self.db.get_stats()
        
        stats_text = (
            f"üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö Affiliate:\n"
            f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {stats.get('total_products', 0)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
            f"üîç ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {stats.get('total_searches', 0)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n"
            f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {stats.get('average_price', 0):,.2f} ‡∏ö‡∏≤‡∏ó\n"
            f"üíæ ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {stats.get('database_type', 'Unknown')}"
        )
        
        self._reply_text(event, stats_text)
    
    def _show_categories(self, event):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
        try:
            category_text = """üìã ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤

üí¨ ‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à:"""
            
            # Quick Reply ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏î‡πá‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
            quick_replies = QuickReply(items=[
                QuickReplyItem(action=MessageAction(label="üì± ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠", text="‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠")),
                QuickReplyItem(action=MessageAction(label="üëï ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤", text="‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤")),
                QuickReplyItem(action=MessageAction(label="üëü ‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤", text="‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤")),
                QuickReplyItem(action=MessageAction(label="üéí ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤", text="‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤")),
                QuickReplyItem(action=MessageAction(label="üíª ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå", text="‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå")),
                QuickReplyItem(action=MessageAction(label="üè† ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ö‡πâ‡∏≤‡∏ô", text="‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ö‡πâ‡∏≤‡∏ô")),
                QuickReplyItem(action=MessageAction(label="üéÆ ‡πÄ‡∏Å‡∏°‡∏™‡πå", text="‡πÄ‡∏Å‡∏°‡∏™‡πå")),
                QuickReplyItem(action=MessageAction(label="üìö ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠", text="‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"))
            ])
            
            self.line_bot_api.reply_message(
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text=category_text, quick_reply=quick_replies)]
                )
            )
        except Exception:
            # Fallback ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            category_text = """üìã ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤

üí¨ ‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à:"""
            
            quick_replies = QuickReply(items=[
                QuickReplyItem(action=MessageAction(label="üì± ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠", text="‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠")),
                QuickReplyItem(action=MessageAction(label="üëï ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤", text="‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤")),
                QuickReplyItem(action=MessageAction(label="üëü ‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤", text="‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤")),
                QuickReplyItem(action=MessageAction(label="üéí ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤", text="‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤")),
                QuickReplyItem(action=MessageAction(label="üíª ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå", text="‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå")),
                QuickReplyItem(action=MessageAction(label="üè† ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ö‡πâ‡∏≤‡∏ô", text="‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ö‡πâ‡∏≤‡∏ô")),
                QuickReplyItem(action=MessageAction(label="üéÆ ‡πÄ‡∏Å‡∏°‡∏™‡πå", text="‡πÄ‡∏Å‡∏°‡∏™‡πå")),
                QuickReplyItem(action=MessageAction(label="üìö ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠", text="‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"))
            ])
            
            self.line_bot_api.reply_message(
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text=category_text, quick_reply=quick_replies)]
                )
            )
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©
            quick_reply_items.extend([
                QuickReplyItem(action=MessageAction(label="üî• ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ")),
                QuickReplyItem(action=MessageAction(label="üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏µ", text="‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å")),
                QuickReplyItem(action=MessageAction(label="‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á", text="‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"))
            ])
            
            quick_replies = QuickReply(items=quick_reply_items)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            categories_text = "üéØ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°):\n\n"
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Æ‡∏¥‡∏ï
            if hot_categories:
                categories_text += "üî• **‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Æ‡∏¥‡∏ï**:\n"
                for cat in hot_categories[:5]:
                    categories_text += f"‚Ä¢ {cat['name']} ({cat['product_count']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {cat['popularity_score']})\n"
                categories_text += "\n"
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
            if popular_categories:
                categories_text += "‚≠ê **‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°**:\n"
                for cat in popular_categories[:3]:
                    categories_text += f"‚Ä¢ {cat['name']} ({cat['product_count']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)\n"
                categories_text += "\n"
            
            categories_text += f"üõçÔ∏è ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(categories_with_stats)} ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà\n"
            categories_text += f"üí∞ ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤: {price_range['min_price']:,.0f} - {price_range['max_price']:,.0f} ‡∏ö‡∏≤‡∏ó\n\n"
            
            categories_text += "üì± **‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å** ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå:\n"
            categories_text += "‚Ä¢ ‡∏´‡∏°‡∏ß‡∏î [‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà] ‡πÄ‡∏ä‡πà‡∏ô '‡∏´‡∏°‡∏ß‡∏î ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°'\n"
            categories_text += "‚Ä¢ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á [‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô] ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÄ‡∏ä‡πà‡∏ô '‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡πÅ‡∏°‡∏ß ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'"
            
            self.line_bot_api.reply_message(
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text=categories_text, quick_reply=quick_replies)]
                )
            )
            
        except Exception as e:
            print(f"[ERROR] Error showing smart categories: {e}")
            self._reply_text(event, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
    
    def _browse_category(self, event, category_name: str, user_id: str):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
        try:
            print(f"[DEBUG] Browsing category: '{category_name}'")
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
            search_result = self.db.search_products(
                query="",  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                limit=config.MAX_RESULTS_PER_SEARCH,
                offset=0,
                category=category_name,
                order_by='popularity'  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°
            )
            
            products = search_result.get('products', [])
            total = search_result.get('total', 0)
            has_more = search_result.get('has_more', False)
            
            print(f"[DEBUG] Found {len(products)} products in category '{category_name}' (total: {total})")
            
            if products:
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏° pagination ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                self._send_category_products(event, products, category_name, 1, total, has_more)
            else:
                self._reply_text(event, f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà '{category_name}'\nüí° ‡∏•‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
                
        except Exception as e:
            print(f"[ERROR] Category browse error: {e}")
            self._reply_text(event, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
    
    def _send_category_products(self, event, products: List[Dict], category_name: str,
                              page: int, total: int, has_more: bool):
        """‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° pagination"""
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Carousel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        flex_contents = self._create_products_carousel(products, f"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {category_name}")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pagination
        total_pages = (total + config.MAX_RESULTS_PER_SEARCH - 1) // config.MAX_RESULTS_PER_SEARCH
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° pagination ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        pagination_buttons = []
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        if page > 1:
            prev_action = f"‡∏´‡∏ô‡πâ‡∏≤{page-1}::cat:{category_name}:sort:popularity"
            pagination_buttons.append({
                "type": "button",
                "action": {
                    "type": "message",
                    "label": "‚óÄÔ∏è ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô",
                    "text": prev_action
                },
                "style": "secondary",
                "height": "sm"
            })
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        if has_more:
            next_action = f"‡∏´‡∏ô‡πâ‡∏≤{page+1}::cat:{category_name}:sort:popularity"
            pagination_buttons.append({
                "type": "button",
                "action": {
                    "type": "message",
                    "label": "‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚ñ∂Ô∏è",
                    "text": next_action
                },
                "style": "secondary",
                "height": "sm"
            })
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á
        sort_buttons = [
            {
                "type": "button",
                "action": {
                    "type": "message",
                    "label": "üî• ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ",
                    "text": f"‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏´‡∏°‡∏ß‡∏î:{category_name} ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ"
                },
                "style": "primary",
                "height": "sm"
            },
            {
                "type": "button", 
                "action": {
                    "type": "message",
                    "label": "üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å",
                    "text": f"‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏´‡∏°‡∏ß‡∏î:{category_name} ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å"
                },
                "style": "primary",
                "height": "sm"
            }
        ]
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° footer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö controls
        if total_pages > 1 or total > 0:
            footer_contents = [
                {
                    "type": "text",
                    "text": f"üìÇ {category_name}",
                    "size": "md",
                    "align": "center",
                    "weight": "bold",
                    "color": "#333333"
                }
            ]
            
            if total_pages > 1:
                footer_contents.append({
                    "type": "text",
                    "text": f"üìÑ ‡∏´‡∏ô‡πâ‡∏≤ {page}/{total_pages} | ‡∏£‡∏ß‡∏° {total} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
                    "size": "xs",
                    "align": "center",
                    "color": "#666666",
                    "margin": "xs"
                })
            else:
                footer_contents.append({
                    "type": "text", 
                    "text": f"‡∏£‡∏ß‡∏° {total} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
                    "size": "xs",
                    "align": "center",
                    "color": "#666666",
                    "margin": "xs"
                })
            
            # ‡∏£‡∏ß‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            all_buttons = []
            if pagination_buttons:
                all_buttons.extend(pagination_buttons)
            if len(all_buttons) < 4:  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
                all_buttons.extend(sort_buttons[:4-len(all_buttons)])
                
            flex_contents["contents"].append({
                "type": "bubble",
                "size": "nano",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": footer_contents,
                    "paddingAll": "12px"
                },
                "footer": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": all_buttons,
                            "spacing": "sm"
                        }
                    ],
                    "paddingAll": "8px"
                } if all_buttons else None
            })
        
        flex_message = FlexMessage(
            alt_text=f"üìÇ {category_name}: {len(products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
            contents=FlexContainer.from_dict(flex_contents)
        )
        
        self.line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[flex_message]
            )
        )
    
    def _show_all_products(self, event, user_id: str):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)"""
        products = self.db.get_all_products(20)  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        
        if products:
            products_text = f"üìã ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({len(products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):\n\n"
            
            for product in products:
                commission = product.get('commission_amount', 0)
                products_text += (
                    f"üîπ {product['product_code']}: {product['product_name']}\n"
                    f"   üí∞ {product['price']:,.0f}‡∏ø | üí∏ {commission:,.0f}‡∏ø\n"
                    f"   üè™ {product['shop_name']}\n\n"
                )
            
            self._reply_text(event, products_text)
        else:
            self._reply_text(event, "üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        
        del self.admin_state[user_id]
    
    def _show_admin_stats(self, event, user_id: str):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"""
        stats = self.db.get_stats()
        
        stats_text = (
            f"üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö (Admin):\n"
            f"üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {stats.get('total_products', 0)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
            f"üîç ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {stats.get('total_searches', 0)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n"
            f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {stats.get('average_price', 0):,.2f} ‡∏ö‡∏≤‡∏ó\n"
            f"üíæ ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {stats.get('database_type', 'Unknown')}"
        )
        
        self._reply_text(event, stats_text)
        del self.admin_state[user_id]
    
    def _show_category_stats(self, event):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)"""
        try:
            categories_with_stats = self.db.get_categories_with_stats()
            
            if not categories_with_stats:
                self._reply_text(event, "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
                return
            
            stats_text = "üìä **‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î**:\n\n"
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°
            hot_categories = [cat for cat in categories_with_stats if cat['popularity_score'] >= 50]
            popular_categories = [cat for cat in categories_with_stats if 20 <= cat['popularity_score'] < 50]
            normal_categories = [cat for cat in categories_with_stats if cat['popularity_score'] < 20]
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Æ‡∏¥‡∏ï
            if hot_categories:
                stats_text += "üî• **‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Æ‡∏¥‡∏ï** (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‚â• 50):\n"
                for i, cat in enumerate(hot_categories[:5], 1):
                    stats_text += (
                        f"{i}. **{cat['name']}**\n"
                        f"   üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°: {cat['popularity_score']}\n"
                        f"   üõçÔ∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {cat['product_count']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
                        f"   üî• ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°: {cat['total_sold']:,} ‡∏ä‡∏¥‡πâ‡∏ô\n"
                        f"   üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {cat['avg_price']:,.0f} ‡∏ö‡∏≤‡∏ó\n"
                        f"   ‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {cat['avg_rating']:.1f}/5.0\n\n"
                    )
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
            if popular_categories:
                stats_text += "‚≠ê **‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°** (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 20-49):\n"
                for i, cat in enumerate(popular_categories[:3], 1):
                    stats_text += (
                        f"{i}. **{cat['name']}**\n"
                        f"   üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {cat['popularity_score']} | "
                        f"üõçÔ∏è {cat['product_count']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ | "
                        f"üî• {cat['total_sold']:,} ‡∏ä‡∏¥‡πâ‡∏ô\n"
                        f"   üí∞ {cat['avg_price']:,.0f}‡∏ø | "
                        f"‚≠ê {cat['avg_rating']:.1f}/5.0\n\n"
                    )
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ
            total_products = sum(cat['product_count'] for cat in categories_with_stats)
            total_sold = sum(cat['total_sold'] for cat in categories_with_stats)
            
            stats_text += f"üìà **‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°**:\n"
            stats_text += f"‚Ä¢ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(categories_with_stats)} ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà\n"
            stats_text += f"‚Ä¢ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Æ‡∏¥‡∏ï: {len(hot_categories)} ‡∏´‡∏°‡∏ß‡∏î\n"
            stats_text += f"‚Ä¢ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°: {len(popular_categories)} ‡∏´‡∏°‡∏ß‡∏î\n"
            stats_text += f"‚Ä¢ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_products:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
            stats_text += f"‚Ä¢ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°: {total_sold:,} ‡∏ä‡∏¥‡πâ‡∏ô\n\n"
            
            stats_text += "üí° **‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö**: ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Æ‡∏¥‡∏ï‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡πÉ‡∏ô Quick Reply buttons"
            
            self._reply_text(event, stats_text)
            
        except Exception as e:
            print(f"[ERROR] Error showing category stats: {e}")
            self._reply_text(event, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
    
    def _show_admin_dashboard(self, event, user_id: str):
        """‡πÅ‡∏™‡∏î‡∏á Admin Dashboard ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            stats = self.db.get_stats()
            categories_stats = self.db.get_categories_with_stats()
            price_range = self.db.get_price_range()
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            total_products = stats.get('total_products', 0)
            total_searches = stats.get('total_searches', 0)
            avg_price = stats.get('average_price', 0)
            
            # ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
            hot_categories = [cat for cat in categories_stats if cat['popularity_score'] >= 50]
            
            # ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏à‡∏≥‡∏•‡∏≠‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ query ‡∏û‡∏¥‡πÄ‡∏®‡∏©)
            top_products = self.db.search_products("", limit=3, order_by='popularity')['products']
            
            dashboard_text = "üéõÔ∏è **Admin Dashboard - ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö**\n\n"
            
            # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏Å
            dashboard_text += "üìä **‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏Å**:\n"
            dashboard_text += f"‚Ä¢ üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: **{total_products:,}** ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
            dashboard_text += f"‚Ä¢ üîç ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: **{total_searches:,}** ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n"
            dashboard_text += f"‚Ä¢ üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: **{avg_price:,.0f}** ‡∏ö‡∏≤‡∏ó\n"
            dashboard_text += f"‚Ä¢ üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: **{len(categories_stats)}** ‡∏´‡∏°‡∏ß‡∏î\n\n"
            
            # ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            dashboard_text += "üí≥ **‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤**:\n"
            dashboard_text += f"‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: **{price_range['min_price']:,.0f}** ‡∏ö‡∏≤‡∏ó\n"
            dashboard_text += f"‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: **{price_range['max_price']:,.0f}** ‡∏ö‡∏≤‡∏ó\n\n"
            
            # ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Æ‡∏¥‡∏ï
            if hot_categories:
                dashboard_text += "üî• **‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Æ‡∏¥‡∏ï** (Top 3):\n"
                for i, cat in enumerate(hot_categories[:3], 1):
                    dashboard_text += f"{i}. **{cat['name']}** - ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {cat['popularity_score']}\n"
                    dashboard_text += f"   üì¶ {cat['product_count']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ | üî• {cat['total_sold']:,} ‡∏Ç‡∏≤‡∏¢\n"
                dashboard_text += "\n"
            
            # ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ
            if top_products:
                dashboard_text += "‚≠ê **‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ** (Top 3):\n"
                for i, product in enumerate(top_products[:3], 1):
                    name = product['product_name'][:30] + "..." if len(product['product_name']) > 30 else product['product_name']
                    dashboard_text += f"{i}. {name}\n"
                    dashboard_text += f"   üí∞ {product['price']:,.0f}‡∏ø | üî• {product.get('sold_count', 0):,} ‡∏Ç‡∏≤‡∏¢\n"
                dashboard_text += "\n"
            
            # ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö
            dashboard_text += "‚ö° **‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö**:\n"
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì search rate
            search_rate = total_searches / max(total_products, 1)
            dashboard_text += f"‚Ä¢ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: **{search_rate:.2f}** ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤\n"
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì conversion rate (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
            conversion_rate = min((total_searches / max(total_products * 10, 1)) * 100, 100)
            dashboard_text += f"‚Ä¢ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: **{conversion_rate:.1f}%**\n\n"
            
            # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            dashboard_text += "üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**:\n"
            
            if len(hot_categories) == 0:
                dashboard_text += "‚Ä¢ ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Æ‡∏¥‡∏ï - ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°\n"
            elif len(hot_categories) >= 3:
                dashboard_text += "‚Ä¢ ‚úÖ ‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Æ‡∏¥‡∏ï‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ - ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏î‡∏µ\n"
            
            if total_products < 100:
                dashboard_text += "‚Ä¢ üìà ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á 100+ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô\n"
            elif total_products >= 1000:
                dashboard_text += "‚Ä¢ üéâ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏ö 1000+ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ - ‡∏£‡∏∞‡∏î‡∏±‡∏ö Enterprise!\n"
            
            if search_rate < 0.1:
                dashboard_text += "‚Ä¢ üîç ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡πà‡∏≥ - ‡∏Ñ‡∏ß‡∏£ optimize SEO ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤\n"
            elif search_rate > 2.0:
                dashboard_text += "‚Ä¢ üî• ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏π‡∏á - ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡∏î‡∏µ!\n"
            
            dashboard_text += "\n---\n"
            dashboard_text += "üéØ **‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡πà‡∏ß‡∏ô**:\n"
            dashboard_text += "‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' - ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î\n"
            dashboard_text += "‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Smart Grouping\n"
            dashboard_text += "‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥' - ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"
            
            self._reply_text(event, dashboard_text)
            del self.admin_state[user_id]
            
        except Exception as e:
            print(f"[ERROR] Error showing admin dashboard: {e}")
            self._reply_text(event, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á Dashboard")
    
    def _handle_bulk_update(self, event, command: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á bulk update - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"""
        try:
            # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: codes field=value
            parts = command.split(' ', 1)
            if len(parts) != 2:
                self._reply_text(event, "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\nüí° ‡πÉ‡∏ä‡πâ: bulk-update [codes] [field]=[value]\nüî∏ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: bulk-update PROD001,PROD002 commission_rate=15")
                return
            
            codes_str = parts[0]
            field_value = parts[1]
            
            # ‡πÅ‡∏¢‡∏Å field=value
            if '=' not in field_value:
                self._reply_text(event, "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö field=value ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\nüí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: commission_rate=15 ‡∏´‡∏£‡∏∑‡∏≠ category=‡πÉ‡∏´‡∏°‡πà")
                return
            
            field, value = field_value.split('=', 1)
            
            # ‡πÅ‡∏¢‡∏Å product codes
            product_codes = [code.strip().upper() for code in codes_str.split(',')]
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á update data
            update_data = {}
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó field
            if field in ['price', 'commission_rate', 'rating']:
                try:
                    update_data[field] = float(value)
                except ValueError:
                    self._reply_text(event, f"‚ùå ‡∏Ñ‡πà‡∏≤ {field} ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
                    return
            elif field in ['sold_count']:
                try:
                    update_data[field] = int(value)
                except ValueError:
                    self._reply_text(event, f"‚ùå ‡∏Ñ‡πà‡∏≤ {field} ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°")
                    return
            else:
                # String fields
                update_data[field] = value
            
            # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ bulk update
            result = self.db.bulk_update_products(product_codes, update_data)
            
            if result['success']:
                response = f"‚úÖ **Bulk Update ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!**\n\n"
                response += f"üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: **{result['updated_count']}** ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
                response += f"üîß Field: **{field}** = **{value}**\n\n"
                response += f"üìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:\n"
                for code in product_codes[:10]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
                    response += f"‚Ä¢ {code}\n"
                
                if len(product_codes) > 10:
                    response += f"... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(product_codes) - 10} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
                
                self._reply_text(event, response)
            else:
                self._reply_text(event, f"‚ùå Bulk Update ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result['message']}")
                
        except Exception as e:
            print(f"[ERROR] Bulk update error: {e}")
            self._reply_text(event, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Bulk Update")
    
    def _handle_bulk_delete(self, event, codes_str: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á bulk delete - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"""
        try:
            # ‡πÅ‡∏¢‡∏Å product codes
            product_codes = [code.strip().upper() for code in codes_str.split(',')]
            
            if len(product_codes) == 0:
                self._reply_text(event, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö\nüí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: bulk-delete PROD001,PROD002")
                return
            
            # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
            if len(product_codes) > 5:
                self._reply_text(event, f"‚ö†Ô∏è **‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö {len(product_codes)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£**\n\n‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: bulk-delete {','.join(product_codes[:5])}")
                return
            
            # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ bulk delete
            result = self.db.bulk_delete_products(product_codes)
            
            if result['success']:
                response = f"‚úÖ **Bulk Delete ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!**\n\n"
                response += f"üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: **{result['deleted_count']}** ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n"
                response += f"üìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡∏ö:\n"
                for code in product_codes:
                    response += f"‚Ä¢ {code}\n"
                
                self._reply_text(event, response)
            else:
                self._reply_text(event, f"‚ùå Bulk Delete ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result['message']}")
                
        except Exception as e:
            print(f"[ERROR] Bulk delete error: {e}")
            self._reply_text(event, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Bulk Delete")
    
    def _handle_bulk_import(self, event, command: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á bulk import - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"""
        try:
            if command.lower() == 'sample':
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á CSV
                sample_path = "sample_products.csv"
                message = bulk_importer.create_sample_csv(sample_path)
                
                response = f"üìÅ **‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**\n\n"
                response += f"{message}\n\n"
                response += f"üìã **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**\n"
                response += f"1. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå `{sample_path}`\n"
                response += f"2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£\n"
                response += f"3. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå\n"
                response += f"4. ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: `bulk-import [URL]`\n\n"
                response += f"üîß **‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:**\n"
                response += f"‚Ä¢ product_name, category, price (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)\n"
                response += f"‚Ä¢ description, brand, rating, tags\n"
                response += f"‚Ä¢ affiliate_link, image_url\n"
                response += f"‚Ä¢ commission_rate, is_featured"
                
                self._reply_text(event, response)
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if command.startswith('http'):
                response = f"üöß **‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤**\n\n"
                response += f"‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≤‡∏Å URL\n"
                response += f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: `bulk-import sample`\n"
                response += f"‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô"
            else:
                response = f"‚ùå **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á**\n\n"
                response += f"üí° **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**\n"
                response += f"‚Ä¢ `bulk-import sample` - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á\n"
                response += f"‚Ä¢ `bulk-import [URL]` - ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≤‡∏Å URL (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤)"
            
            self._reply_text(event, response)
                
        except Exception as e:
            print(f"[ERROR] Bulk import error: {e}")
            self._reply_text(event, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    def _show_ai_recommendations(self, event, user_id: str, context: str = ""):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ AI"""
        try:
            print(f"[DEBUG] AI recommendations for user: {user_id}")
            
            # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß
            recommendations = ai_recommender.get_personalized_recommendations(user_id, context, limit=6)
            
            if not any(recommendations.values()):
                self._reply_text(event, "ü§ñ ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠\n‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
                return
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            response = "ü§ñ **AI ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì**\n\n"
            
            # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
            if recommendations['personal']:
                response += "üíù **‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à:**\n"
                for i, product in enumerate(recommendations['personal'][:3], 1):
                    name = product.get('product_name', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠')[:40]
                    price = f"{product.get('price', 0):,.0f}"
                    reason = product.get('recommendation_reason', '')
                    response += f"{i}. {name}\n   üí∞ {price} ‡∏ö‡∏≤‡∏ó | {reason}\n\n"
            
            # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≤‡πÅ‡∏£‡∏á
            if recommendations['trending']:
                response += "üî• **‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:**\n"
                for i, product in enumerate(recommendations['trending'][:2], 1):
                    name = product.get('product_name', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠')[:40]
                    price = f"{product.get('price', 0):,.0f}"
                    sold = product.get('sold_count', 0)
                    response += f"{i}. {name}\n   üí∞ {price} ‡∏ö‡∏≤‡∏ó | ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏õ {sold:,} ‡∏ä‡∏¥‡πâ‡∏ô\n\n"
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            user_profile = ai_recommender.get_user_profile_summary(user_id)
            if user_profile.get('top_interests'):
                interests = [interest[0] for interest in user_profile['top_interests'][:3]]
                response += f"üìä **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:** {', '.join(interests)}\n"
            
            response += f"üéØ **‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** {recommendations['total_score']}/10\n\n"
            response += "üí° **‡∏ó‡∏¥‡∏õ:** ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô!"
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Quick Reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            quick_reply_items = []
            all_products = recommendations['personal'] + recommendations['trending']
            
            for product in all_products[:3]:
                code = product.get('product_code')
                if code:
                    quick_reply_items.append({
                        'label': f"‡∏î‡∏π {product.get('product_name', '')[:15]}...",
                        'text': f"‡∏£‡∏´‡∏±‡∏™ {code}"
                    })
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
            quick_reply_items.extend([
                {'label': 'üîÑ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡∏°‡πà', 'text': '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'},
                {'label': 'üìä ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô', 'text': '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå'},
                {'label': 'üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å', 'text': '‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å'}
            ])
            
            quick_replies = self._create_modern_quick_reply(quick_reply_items[:13])  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î 13 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            
            self.line_bot_api.reply_message(
                event.reply_token,
                TextMessage(text=response, quick_reply=quick_replies)
            )
                
        except Exception as e:
            print(f"[ERROR] AI recommendations error: {e}")
            self._reply_text(event, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ AI")
    
    def _handle_top_products(self, event, command: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"""
        try:
            parts = command.split()
            
            # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            metric = 'sold_count'
            limit = 5
            
            if len(parts) >= 1:
                metric = parts[0]
            if len(parts) >= 2:
                try:
                    limit = int(parts[1])
                    limit = min(limit, 20)  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20
                except ValueError:
                    limit = 5
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            top_products = self.db.get_top_products_by_metric(metric, limit)
            
            if not top_products:
                self._reply_text(event, f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö metric: {metric}")
                return
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            metric_names = {
                'sold_count': '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢',
                'price': '‡∏£‡∏≤‡∏Ñ‡∏≤',
                'rating': '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô',
                'commission_amount': '‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô'
            }
            
            metric_display = metric_names.get(metric, metric)
            response = f"üèÜ **Top {limit} ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°{metric_display}**\n\n"
            
            for i, product in enumerate(top_products, 1):
                name = product['product_name'][:25] + "..." if len(product['product_name']) > 25 else product['product_name']
                code = product['product_code']
                
                response += f"{i}. **{name}**\n"
                response += f"   üîë {code} | üí∞ {product['price']:,.0f}‡∏ø\n"
                
                if metric == 'sold_count':
                    response += f"   üî• ‡∏Ç‡∏≤‡∏¢: {product.get('sold_count', 0):,} ‡∏ä‡∏¥‡πâ‡∏ô\n"
                elif metric == 'rating':
                    response += f"   ‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {product.get('rating', 0):.1f}/5.0\n"
                elif metric == 'commission_amount':
                    response += f"   üí∏ ‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô: {product.get('commission_amount', 0):,.0f}‡∏ø\n"
                
                response += "\n"
            
            response += f"üí° **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ**:\n"
            response += f"‚Ä¢ top-products sold_count 10 - ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö\n"
            response += f"‚Ä¢ top-products price 5 - ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö\n"
            response += f"‚Ä¢ top-products rating 3 - ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö"
            
            self._reply_text(event, response)
            
        except Exception as e:
            print(f"[ERROR] Top products error: {e}")
            self._reply_text(event, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á")
    
    def _create_modern_quick_reply(self, items: List[Dict[str, str]]) -> QuickReply:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Quick Reply ‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢"""
        quick_reply_items = []
        
        for item in items[:13]:  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î 13 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏° LINE limit
            quick_reply_items.append(
                QuickReplyItem(action=MessageAction(
                    label=item['label'], 
                    text=item['text']
                ))
            )
        
        return QuickReply(items=quick_reply_items)
    
    def _show_welcome_message(self, event):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà"""
        welcome_text = """ü§ñ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà LINE Bot Affiliate

üõçÔ∏è **‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì:**
‚Ä¢ üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
‚Ä¢ üí∞ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏µ
‚Ä¢ ‚≠ê ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á
‚Ä¢ üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à

üì± **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**
‚Ä¢ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Rich Menu ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
‚Ä¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠

üéâ **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!**"""

        # Quick Reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        welcome_options = [
            {'label': 'üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', 'text': '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'},
            {'label': 'üìÇ ‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', 'text': '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'},
            {'label': 'üî• ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ', 'text': '‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ'},
            {'label': 'üí∞ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô', 'text': '‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô'},  
            {'label': '‚ùì ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', 'text': '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠'}
        ]
        
        quick_replies = self._create_modern_quick_reply(welcome_options)
        self._reply_text(event, welcome_text, quick_replies)
    
    def _show_search_guide(self, event):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
        guide_text = """üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤

üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:
‚Ä¢ "‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠" "‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" 
‚Ä¢ "‡πÄ‡∏™‡∏∑‡πâ‡∏≠" "‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á"
‚Ä¢ "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤" "‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤"

üí° ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á"""
        
        # Quick Reply ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏î‡πá‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
        quick_replies = QuickReply(items=[
            QuickReplyItem(action=MessageAction(label="üì± ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠", text="‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠")),
            QuickReplyItem(action=MessageAction(label="üëï ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤", text="‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤")),
            QuickReplyItem(action=MessageAction(label="üëü ‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤", text="‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤")),
            QuickReplyItem(action=MessageAction(label="üéí ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤", text="‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤")),
            QuickReplyItem(action=MessageAction(label="üíª ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå", text="‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå")),
            QuickReplyItem(action=MessageAction(label="üè† ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ö‡πâ‡∏≤‡∏ô", text="‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ö‡πâ‡∏≤‡∏ô")),
            QuickReplyItem(action=MessageAction(label="üî• ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ", text="‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ")),
            QuickReplyItem(action=MessageAction(label="üí∞ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô", text="‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô"))
        ])
        
        self.line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=guide_text, quick_reply=quick_replies)]
            )
        )
    
    def _handle_mobile_search_suggestion(self, event, search_term):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå/‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠"""
        suggestion_text = f"""üì± ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{search_term}'

üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠

üí° ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô:
‚Ä¢ '‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á' - ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏°‡∏ß, ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏°‡∏≤
‚Ä¢ '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°' - ‡∏Ñ‡∏£‡∏µ‡∏°, ‡πÄ‡∏ã‡∏£‡∏±‡πà‡∏°  
‚Ä¢ '‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô' - ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤, ‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤
‚Ä¢ '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ' - ‡∏´‡∏π‡∏ü‡∏±‡∏á, ‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏•‡πá‡∏ï

‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        
        # Quick Reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        quick_replies = QuickReply(items=[
            QuickReplyItem(action=MessageAction(label="üêæ ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á", text="‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á")),
            QuickReplyItem(action=MessageAction(label="üíÑ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°", text="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°")),
            QuickReplyItem(action=MessageAction(label="üëï ‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", text="‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô")),
            QuickReplyItem(action=MessageAction(label="üíª ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ", text="‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ")),
            QuickReplyItem(action=MessageAction(label="üè† ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ö‡πâ‡∏≤‡∏ô", text="‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ö‡πâ‡∏≤‡∏ô")),
            QuickReplyItem(action=MessageAction(label="üìã ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", text="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")),
            QuickReplyItem(action=MessageAction(label="üî• ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ", text="‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ")),
            QuickReplyItem(action=MessageAction(label="üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", text="‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"))
        ])
        
        self.line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=suggestion_text, quick_reply=quick_replies)]
            )
        )
    
    def _show_bestsellers(self, event):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏û‡∏£‡πâ‡∏≠‡∏° Quick Reply ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ
            bestsellers = self.db.get_top_products_by_metric('sold_count', 5)
            categories = self.db.get_categories()[:8]  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 8 ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Quick Reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ
            category_options = []
            for cat in categories:
                category_options.append({
                    'label': f'üî• {cat}', 
                    'text': f'‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏´‡∏°‡∏ß‡∏î:{cat} ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ'
                })
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏¥‡πÄ‡∏®‡∏©
            category_options.extend([
                {'label': 'üèÜ Top 10 ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ', 'text': 'top-products sold_count 10'},
                {'label': 'üíé Top 5 ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏û‡∏á', 'text': 'top-products price 5'},
                {'label': '‚≠ê Top 5 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á', 'text': 'top-products rating 5'},
                {'label': 'üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'text': '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥'},
                {'label': 'üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å', 'text': 'üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å'}
            ])
            
            quick_replies = self._create_modern_quick_reply(category_options)
            
            response_text = "üî• **‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ï‡πâ‡∏ô‡πÜ**\n\n"
            
            if bestsellers:
                for i, product in enumerate(bestsellers, 1):
                    name = product['product_name'][:30] + "..." if len(product['product_name']) > 30 else product['product_name']
                    response_text += f"{i}. **{name}**\n"
                    response_text += f"   üí∞ {product['price']:,.0f}‡∏ø | üî• {product.get('sold_count', 0):,} ‡∏Ç‡∏≤‡∏¢\n"
                    response_text += f"   üè™ {product['shop_name']}\n\n"
            
            response_text += "üéØ **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏°‡∏ß‡∏î**"
            
            self.line_bot_api.reply_message(
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text=response_text, quick_reply=quick_replies)]
                )
            )
            
        except Exception as e:
            print(f"[ERROR] Show bestsellers error: {e}")
            self._reply_text(event, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ")
    
    def _show_promotions(self, event):
        """‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©"""
        promo_options = [
            {'label': 'üî• ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ', 'text': '‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ'},
            {'label': 'üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î', 'text': '‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å'},
            {'label': '‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î', 'text': '‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô'},
            {'label': 'üÜï ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà', 'text': '‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÉ‡∏´‡∏°‡πà'},
            {'label': 'üéØ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', 'text': '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥'},
            {'label': 'üè∑Ô∏è ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™', 'text': '‡∏£‡∏´‡∏±‡∏™'},
            {'label': 'üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', 'text': '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'},
            {'label': 'üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', 'text': '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥'}
        ]
        
        quick_replies = self._create_modern_quick_reply(promo_options)
        
        promo_text = """üí∞ **‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©**

üéâ **‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ**:
‚Ä¢ üî• ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ - ‡∏Ñ‡∏±‡∏î‡∏™‡∏£‡∏£‡πÅ‡∏•‡πâ‡∏ß!
‚Ä¢ üíé ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û - ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
‚Ä¢ ‚≠ê ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á - ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°
‚Ä¢ üÜï ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

üéØ **‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô**:
1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à
2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ/‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
3. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©!

üí° **‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö**: ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

üéÅ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á!"""
        
        self.line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=promo_text, quick_reply=quick_replies)]
            )
        )
    
    def _show_help_menu(self, event):
        """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°"""
        help_options = [
            {'label': 'üîç ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤', 'text': 'üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'},
            {'label': 'üìÇ ‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', 'text': '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'},
            {'label': 'üè∑Ô∏è ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™', 'text': '‡∏£‡∏´‡∏±‡∏™ EXAMPLE'},
            {'label': 'üí∞ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©', 'text': 'üí∞ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô'},
            {'label': 'üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', 'text': '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥'},
            {'label': 'üéØ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á', 'text': '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á'},
            {'label': 'üî• ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', 'text': 'üî• ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ'},
            {'label': 'üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å', 'text': 'üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å'}
        ]
        
        quick_replies = self._create_modern_quick_reply(help_options)
        
        help_text = """‚ùì **‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ - ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**

üéØ **‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô**:
‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: `‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏°‡∏ß`, `‡∏Ñ‡∏£‡∏µ‡∏°`, `‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå`
‚Ä¢ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™: `‡∏£‡∏´‡∏±‡∏™ PROD001`
‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ‡∏Å‡∏î `‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà`

‚ö° **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á**:
‚Ä¢ `‡∏Å‡∏£‡∏≠‡∏á [‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤] ‡∏£‡∏≤‡∏Ñ‡∏≤:100-500` - ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
‚Ä¢ `‡πÄ‡∏£‡∏µ‡∏¢‡∏á [‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤] ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ` - ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
‚Ä¢ `‡∏´‡∏ô‡πâ‡∏≤2:[‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤]` - ‡∏î‡∏π‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

üé® **‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©**:
‚Ä¢ Smart Category Grouping - ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°
‚Ä¢ Enterprise Pagination - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
‚Ä¢ Professional UI - ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢

üîß **Admin Features**:
‚Ä¢ Dashboard ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°
‚Ä¢ Bulk Operations ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
‚Ä¢ Analytics & Insights ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å

üí° **‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°?**
‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°!"""
        
        self.line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=help_text, quick_reply=quick_replies)]
            )
        )
    
    def _show_home_menu(self, event):
        """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°"""
        home_options = [
            {'label': 'üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', 'text': 'üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'},
            {'label': 'üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', 'text': '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'},
            {'label': 'üî• ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ', 'text': 'üî• ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ'},
            {'label': 'üí∞ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô', 'text': 'üí∞ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô'},
            {'label': 'üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', 'text': '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥'},
            {'label': '‚ùì ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', 'text': '‚ùì ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠'},
            {'label': '‚≠ê ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á', 'text': '‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô'},
            {'label': 'üÜï ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà', 'text': '‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÉ‡∏´‡∏°‡πà'}
        ]
        
        quick_replies = self._create_modern_quick_reply(home_options)
        
        stats = self.db.get_stats()
        total_products = stats.get('total_products', 0)
        categories_count = stats.get('categories_count', 0)
        
        home_text = f"""üè† **‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Affiliate Shopping Assistant**

üõçÔ∏è **‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö**:
‚Ä¢ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: **{total_products:,}** ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
‚Ä¢ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: **{categories_count}** ‡∏´‡∏°‡∏ß‡∏î
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° AI
‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

üéØ **‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏î‡πà‡∏ô**:
‚Ä¢ üîç **‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞** - ‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
‚Ä¢ üìÇ **Smart Category** - ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°
‚Ä¢ üî• **‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ Real-time** - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤
‚Ä¢ üí∞ **‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©** - ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏™‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°

üöÄ **‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß!**
‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!

üí° **‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö**: ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏°‡∏ß" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á!"""
        
        self.line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=home_text, quick_reply=quick_replies)]
            )
        )
    
    def _reply_text(self, event, text: str):
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö"""
        self.line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=text)]
            )
        )
    
    def _reply_error_message(self, event):
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        error_msg = "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"
        self._reply_text(event, error_msg)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
affiliate_handler = AffiliateLineHandler()