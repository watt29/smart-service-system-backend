"""
LINE Bot Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Smart Service System
‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ LINE Bot logic ‡πÅ‡∏•‡∏∞ message handling
"""

import re
import requests
import traceback
from typing import Dict, Optional

from linebot.v3.messaging import (
    Configuration, ApiClient, MessagingApi, ReplyMessageRequest, 
    TextMessage, QuickReply, QuickReplyItem, MessageAction
)
from linebot.v3.webhook import WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.v3.webhooks import MessageEvent, TextMessageContent

from ..config import config
from ..utils.db_adapter import db_adapter

class LineMessageHandler:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ LINE Bot messages"""
    
    def __init__(self):
        self.admin_state = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ user
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Bot API
        if config.LINE_CHANNEL_ACCESS_TOKEN and config.LINE_CHANNEL_SECRET:
            configuration = Configuration(access_token=config.LINE_CHANNEL_ACCESS_TOKEN)
            self.line_bot_api = MessagingApi(ApiClient(configuration))
            self.handler = WebhookHandler(config.LINE_CHANNEL_SECRET)
            self._register_handlers()
            print("[OK] LINE Bot API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        else:
            print("[WARNING] LINE Bot ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡πÑ‡∏°‡πà‡∏°‡∏µ tokens)")
            self.line_bot_api = self._create_dummy_api()
            self.handler = self._create_dummy_handler()
    
    def _create_dummy_api(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á dummy API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ LINE tokens"""
        class DummyLineBotApi:
            def reply_message(self, *args, **kwargs):
                print("[DEBUG] Dummy LINE API: reply_message called")
        return DummyLineBotApi()
    
    def _create_dummy_handler(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á dummy handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ LINE tokens"""
        class DummyWebhookHandler:
            def handle(self, *args, **kwargs):
                print("[DEBUG] Dummy Handler: handle called")
            def add(self, *args, **kwargs):
                return lambda f: f
        return DummyWebhookHandler()
    
    def _register_handlers(self):
        """‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô message handlers"""
        @self.handler.add(MessageEvent, message=TextMessageContent)
        def handle_text_message(event):
            self.handle_message(event)
    
    def handle_message(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å LINE"""
        user_id = event.source.user_id
        text = event.message.text.lower().strip()
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Admin
            if text in config.ADMIN_KEYWORDS:
                self._handle_admin_entry(event, user_id)
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if user_id in self.admin_state:
                self._handle_admin_flow(event, user_id, text)
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©
            if text.startswith("fetch "):
                self._handle_fetch_command(event, text)
                return
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏Å‡∏ï‡∏¥ - ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
            self._handle_search_fast(event, text)
            
        except Exception as e:
            print(f"[ERROR] LINE handler error: {traceback.format_exc()}")
            self._reply_error_message(event)
    
    def _handle_admin_entry(self, event, user_id: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î Admin"""
        self.admin_state[user_id] = {"mode": "main_menu"}
        
        quick_replies = QuickReply(items=[
            QuickReplyItem(action=MessageAction(label="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", text="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")),
            QuickReplyItem(action=MessageAction(label="‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", text="‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")),
            QuickReplyItem(action=MessageAction(label="‚ùå ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", text="‚ùå ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")),
            QuickReplyItem(action=MessageAction(label="üìã ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="üìã ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")),
            QuickReplyItem(action=MessageAction(label="üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥", text="üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")),
        ])
        
        self.line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text="üîß ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:", quick_reply=quick_replies)]
            )
        )
    
    def _handle_admin_flow(self, event, user_id: str, text: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Admin workflow"""
        current_state = self.admin_state[user_id]
        current_mode = current_state.get("mode")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        if text == config.CANCEL_KEYWORD:
            del self.admin_state[user_id]
            self._reply_text(event, "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
            return
        
        # Main Menu
        if current_mode == "main_menu":
            self._handle_admin_menu(event, user_id, text)
        
        # Add Item Flow
        elif current_mode.startswith("add_"):
            self._handle_add_item_flow(event, user_id, text, current_mode)
        
        # Edit Item Flow  
        elif current_mode.startswith("edit_"):
            self._handle_edit_item_flow(event, user_id, text, current_mode)
        
        # Delete Item Flow
        elif current_mode.startswith("delete_"):
            self._handle_delete_item_flow(event, user_id, text, current_mode)
    
    def _handle_admin_menu(self, event, user_id: str, text: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
        if text == "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•":
            self.admin_state[user_id] = {"mode": "add_item_key", "data": {}}
            self._reply_text(event, "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô CBC, 31001):")
            
        elif text == "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•":
            self.admin_state[user_id] = {"mode": "edit_item_select"}
            self._reply_text(event, "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
            
        elif text == "‚ùå ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•":
            self.admin_state[user_id] = {"mode": "delete_item_select"}
            self._reply_text(event, "‚ùå ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö:")
            
        elif text == "üìã ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            self._show_all_items(event, user_id)
            
        elif text == "üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥":
            self._show_statistics(event, user_id)
            
        else:
            self._reply_text(event, "‚ùì ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π")
    
    def _handle_add_item_flow(self, event, user_id: str, text: str, mode: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà"""
        state = self.admin_state[user_id]
        
        if mode == "add_item_key":
            state["data"]["key"] = text.lower()
            state["mode"] = "add_item_name_th"
            self._reply_text(event, "üìù ‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢:")
            
        elif mode == "add_item_name_th":
            state["data"]["name_th"] = text
            state["mode"] = "add_item_name_en"
            self._reply_text(event, "üìù ‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©:")
            
        elif mode == "add_item_name_en":
            state["data"]["name_en"] = text
            state["mode"] = "add_item_rate"
            self._reply_text(event, "üí∞ ‡∏õ‡πâ‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç):")
            
        elif mode == "add_item_rate":
            try:
                rate = float(text)
                state["data"]["rate_baht"] = rate
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                if db_adapter.add_item(state["data"]["key"], state["data"]):
                    summary = (f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n"
                             f"üîë ‡∏£‡∏´‡∏±‡∏™: {state['data']['key']}\n"
                             f"üìã ‡∏ä‡∏∑‡πà‡∏≠: {state['data']['name_th']}\n"
                             f"üí∞ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤: {rate:.2f} ‡∏ö‡∏≤‡∏ó")
                    self._reply_text(event, summary)
                else:
                    self._reply_text(event, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                
                del self.admin_state[user_id]  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
                
            except ValueError:
                self._reply_text(event, "‚ùå ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà:")
    
    def _handle_edit_item_flow(self, event, user_id: str, text: str, mode: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"""
        state = self.admin_state[user_id]
        
        if mode == "edit_item_select":
            item = db_adapter.get_item(text.lower())
            if item:
                state["key"] = text.lower()
                state["mode"] = "edit_item_field"
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                current_data = "\n".join([f"‚Ä¢ {k}: {v}" for k, v in item.items()])
                self._reply_text(event, f"üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:\n{current_data}\n\nüìù ‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
            else:
                self._reply_text(event, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà:")
        
        elif mode == "edit_item_field":
            field = text.lower()
            item = db_adapter.get_item(state["key"])
            
            if field in item:
                state["field"] = field
                state["mode"] = "edit_item_value"
                self._reply_text(event, f"üìù ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{field}':")
            else:
                self._reply_text(event, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:")
        
        elif mode == "edit_item_value":
            if db_adapter.update_item(state["key"], state["field"], text):
                self._reply_text(event, f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\nüîë ‡∏£‡∏´‡∏±‡∏™: {state['key']}\nüìù ‡∏ü‡∏¥‡∏•‡∏î‡πå: {state['field']}\nüíæ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà: {text}")
            else:
                self._reply_text(event, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
            
            del self.admin_state[user_id]
    
    def _handle_delete_item_flow(self, event, user_id: str, text: str, mode: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"""
        state = self.admin_state[user_id]
        
        if mode == "delete_item_select":
            item = db_adapter.get_item(text.lower())
            if item:
                state["key"] = text.lower()
                state["mode"] = "delete_item_confirm"
                self._reply_text(event, f"‚ö†Ô∏è  ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ '{item['name_th']}' ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n‡∏û‡∏¥‡∏°‡∏û‡πå 'confirm' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ 'cancel' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
            else:
                self._reply_text(event, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà:")
        
        elif mode == "delete_item_confirm":
            if text == "confirm":
                if db_adapter.delete_item(state["key"]):
                    self._reply_text(event, f"üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ '{state['key']}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    self._reply_text(event, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
            else:
                self._reply_text(event, "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            
            del self.admin_state[user_id]
    
    def _show_all_items(self, event, user_id: str):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        all_items = db_adapter.get_all_items()
        
        if all_items:
            items_text = "\n".join([
                f"üîπ {key}: {item['name_th']} ({item['rate_baht']:.2f} ‡∏ö‡∏≤‡∏ó)"
                for key, item in list(all_items.items())[:10]  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
            ])
            
            if len(all_items) > 10:
                items_text += f"\n... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(all_items) - 10} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
            
            self._reply_text(event, f"üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({len(all_items)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):\n{items_text}")
        else:
            self._reply_text(event, "üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        
        del self.admin_state[user_id]
    
    def _show_statistics(self, event, user_id: str):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        summary = db_adapter.get_summary()
        
        stats_text = (
            f"üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö:\n"
            f"üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {summary['total_items']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
            f"‚úÖ ‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ: {summary['claimable_items']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
            f"üí∞ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {summary['average_rate']:.2f} ‡∏ö‡∏≤‡∏ó\n"
            f"üìà ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {summary['max_rate']:.2f} ‡∏ö‡∏≤‡∏ó\n"
            f"üìâ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: {summary['min_rate']:.2f} ‡∏ö‡∏≤‡∏ó"
        )
        
        self._reply_text(event, stats_text)
        del self.admin_state[user_id]
    
    def _handle_fetch_command(self, event, text: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á fetch URL"""
        url = text[6:].strip()  # ‡∏ï‡∏±‡∏î "fetch " ‡∏≠‡∏≠‡∏Å
        
        if url:
            try:
                response = requests.get(url, timeout=config.REQUEST_TIMEOUT)
                response.raise_for_status()
                content = f"üåê ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å {url}:\n\n{response.text[:1000]}..."
                self._reply_text(event, content)
            except requests.exceptions.RequestException as e:
                self._reply_text(event, f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {url} ‡πÑ‡∏î‡πâ: {str(e)}")
        else:
            self._reply_text(event, "‚ùì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ URL (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: fetch https://www.example.com)")
    
    def _handle_search_fast(self, event, text: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß"""
        try:
            # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ limit 1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
            if config.USE_SQLITE:
                # SQLite search (faster)
                found_items = db_adapter.fuzzy_search(text)
                if found_items:
                    key, item_data = found_items[0]
                    result = self._format_search_result_short(item_data, text)
                else:
                    result = self._format_not_found_short(text)
            else:
                # JSON fallback
                found_items = db_adapter.fuzzy_search(text)
                if found_items:
                    key, item_data = found_items[0]
                    result = self._format_search_result_short(item_data, text)
                else:
                    result = self._format_not_found_short(text)
            
            self._reply_text(event, result)
            
        except Exception as e:
            print(f"[ERROR] Search error: {e}")
            self._reply_text(event, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
    
    def _format_search_result_short(self, item_data: Dict, query: str) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô (‡πÄ‡∏£‡πá‡∏ß)"""
        return (
            f"üîç {item_data['name_th']}\n"
            f"üíµ {item_data['rate_baht']:.0f} ‡∏ö‡∏≤‡∏ó\n"
            f"‚úÖ {', '.join(item_data['rights'][:2])}\n"  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 2 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
            f"üìã CPT: {item_data.get('cpt', 'N/A')}"
        )
    
    def _format_not_found_short(self, query: str) -> str:
        """‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô"""
        return f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö '{query}'\nüí° ‡∏•‡∏≠‡∏á‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏ä‡πà‡∏ô: CBC, ‡πÄ‡∏•‡∏∑‡∏≠‡∏î, 31001"
    
    def _format_search_result(self, item_data: Dict, query: str) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"""
        link = self._generate_cgd_link(query)
        
        result = (
            f"üîç ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {item_data['name_th']} ({item_data['name_en']})\n"
            f"üíµ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤: {item_data['rate_baht']:.2f} ‡∏ö‡∏≤‡∏ó\n"
            f"‚úÖ ‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥: {', '.join(item_data['rights'])}\n"
        )
        
        if item_data.get('notes'):
            result += f"üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {item_data['notes']}\n"
        
        result += (
            f"üîó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£: {link}\n"
            f"‚ÑπÔ∏è ‡∏£‡∏´‡∏±‡∏™‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô:\n"
            f"‚Ä¢ CPT: {item_data['cpt']}\n"
            f"‚Ä¢ ICD-10: {item_data['icd10']}"
        )
        
        return result
    
    def _generate_cgd_link(self, query: str) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô mbdb.cgd.go.th"""
        encoded_query = re.sub(r'\\s+', '+', query.strip())
        return f"{config.CGD_BASE_URL}?method=search&service_name={encoded_query}"
    
    def _reply_text(self, event, text: str):
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö"""
        self.line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=text)]
            )
        )
    
    def _reply_error_message(self, event):
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        error_msg = "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"
        self._reply_text(event, error_msg)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
line_handler = LineMessageHandler()