"""
ü§ñ AI Product Recommender
‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
"""

import json
import re
from typing import Dict, List, Optional, Tuple
from collections import defaultdict, Counter
from datetime import datetime, timedelta
import logging

from .supabase_database import SupabaseDatabase

class AIProductRecommender:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ AI"""
    
    def __init__(self):
        self.db = SupabaseDatabase()
        self.logger = logging.getLogger(__name__)
        
        # ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à
        self.interest_keywords = {
            'technology': ['‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠', '‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', '‡πÅ‡∏ó‡∏ö‡πÄ‡∏•‡πá‡∏ï', '‡∏´‡∏π‡∏ü‡∏±‡∏á', '‡∏•‡∏≥‡πÇ‡∏û‡∏á', '‡∏Å‡∏•‡πâ‡∏≠‡∏á', '‡∏™‡∏°‡∏≤‡∏£‡πå‡∏ó‡∏ß‡∏≠‡∏ó‡∏ä‡πå', '‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå', 'smartphone', 'laptop', 'gadget'],
            'fashion': ['‡πÄ‡∏™‡∏∑‡πâ‡∏≠', '‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á', '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤', '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö', '‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô', '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤', '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß'],
            'beauty': ['‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏≠‡∏≤‡∏á', '‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ú‡∏¥‡∏ß', '‡∏ô‡πâ‡∏≥‡∏´‡∏≠‡∏°', '‡∏Ñ‡∏£‡∏µ‡∏°', '‡πÇ‡∏•‡∏ä‡∏±‡πà‡∏ô', '‡∏°‡∏≤‡∏™‡πå‡∏Å', 'skincare', 'makeup'],
            'home': ['‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå', '‡∏Ç‡∏≠‡∏á‡∏ï‡∏∞‡πÅ‡∏ï‡πà‡∏á‡∏ö‡πâ‡∏≤‡∏ô', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤', '‡∏´‡∏°‡πâ‡∏≠', '‡∏Å‡∏£‡∏∞‡∏ó‡∏∞', '‡∏ú‡πâ‡∏≤‡∏õ‡∏π', '‡∏´‡∏°‡∏≠‡∏ô', '‡πÇ‡∏ã‡∏ü‡∏≤'],
            'sports': ['‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏µ‡∏¨‡∏≤', '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ß‡∏¥‡πà‡∏á', '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Å‡∏µ‡∏¨‡∏≤', '‡∏î‡∏±‡∏°‡πÄ‡∏ö‡∏•', '‡πÇ‡∏¢‡∏Ñ‡∏∞', '‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™', 'exercise'],
            'books': ['‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠', '‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢', '‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô', '‡∏ß‡∏£‡∏£‡∏ì‡∏Å‡∏£‡∏£‡∏°', 'book', 'novel'],
            'food': ['‡∏≠‡∏≤‡∏´‡∏≤‡∏£', '‡∏Ç‡∏ô‡∏°', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°', '‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô', 'snack', 'supplement']
        }
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        self.user_history = defaultdict(list)
        self.user_interests = defaultdict(Counter)
        
    def extract_interests_from_text(self, text: str) -> List[str]:
        """‡∏™‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå"""
        text_lower = text.lower()
        interests = []
        
        for category, keywords in self.interest_keywords.items():
            for keyword in keywords:
                if keyword.lower() in text_lower:
                    interests.append(category)
                    break
        
        return list(set(interests))  # Remove duplicates
    
    def update_user_interests(self, user_id: str, message: str, search_results: List[Dict] = None):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö"""
        try:
            # ‡∏™‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            interests = self.extract_interests_from_text(message)
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à
            for interest in interests:
                self.user_interests[user_id][interest] += 1
                
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            if search_results:
                for product in search_results:
                    category_interests = self.extract_interests_from_text(
                        f"{product.get('category', '')} {product.get('product_name', '')}"
                    )
                    for interest in category_interests:
                        self.user_interests[user_id][interest] += 0.5  # ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            self.user_history[user_id].append({
                'timestamp': datetime.now().isoformat(),
                'message': message,
                'interests': interests,
                'search_count': len(search_results) if search_results else 0
            })
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            if len(self.user_history[user_id]) > 50:
                self.user_history[user_id] = self.user_history[user_id][-50:]
                
        except Exception as e:
            self.logger.error(f"Error updating user interests: {e}")
    
    def get_user_top_interests(self, user_id: str, limit: int = 3) -> List[Tuple[str, int]]:
        """‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ï‡πâ‡∏ô ‡πÜ ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        if user_id not in self.user_interests:
            return []
        
        return self.user_interests[user_id].most_common(limit)
    
    def recommend_by_interest(self, user_id: str, limit: int = 5) -> List[Dict]:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        recommendations = []
        
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            top_interests = self.get_user_top_interests(user_id, limit=3)
            
            if not top_interests:
                # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ
                return self.db.get_top_products_by_metric('sold_count', limit)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à
            for interest, score in top_interests:
                keywords = self.interest_keywords.get(interest, [])
                if keywords:
                    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
                    search_query = ' '.join(keywords[:3])  # ‡πÉ‡∏ä‡πâ 3 ‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å
                    
                    products = self.db.search_products(
                        query=search_query,
                        limit=3,
                        order_by='rating'  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                    )
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
                    for product in products.get('data', []):
                        product['recommendation_score'] = score
                        product['recommendation_reason'] = f"‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à: {interest}"
                        recommendations.append(product)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥
            seen_codes = set()
            unique_recommendations = []
            
            for product in sorted(recommendations, key=lambda x: x.get('recommendation_score', 0), reverse=True):
                code = product.get('product_code')
                if code and code not in seen_codes:
                    seen_codes.add(code)
                    unique_recommendations.append(product)
                    
                if len(unique_recommendations) >= limit:
                    break
            
            return unique_recommendations
            
        except Exception as e:
            self.logger.error(f"Error in recommend_by_interest: {e}")
            return []
    
    def recommend_similar_products(self, product_code: str, limit: int = 5) -> List[Dict]:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°
            current_product = self.db.get_product_by_code(product_code)
            if not current_product:
                return []
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            similar_products = self.db.search_products(
                query="",
                category=current_product.get('category'),
                limit=limit + 2,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏≠‡∏Å
                order_by='rating'
            )
            
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏≠‡∏Å
            filtered_products = []
            for product in similar_products.get('data', []):
                if product.get('product_code') != product_code:
                    product['recommendation_reason'] = f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î {current_product.get('category', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}"
                    filtered_products.append(product)
                    
                if len(filtered_products) >= limit:
                    break
            
            return filtered_products
            
        except Exception as e:
            self.logger.error(f"Error in recommend_similar_products: {e}")
            return []
    
    def recommend_trending_products(self, limit: int = 5) -> List[Dict]:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≤‡πÅ‡∏£‡∏á"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á
            trending = self.db.get_top_products_by_metric('sold_count', limit * 2)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô trending (‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ + ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô + ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß)
            scored_products = []
            for product in trending:
                sold_count = product.get('sold_count', 0)
                rating = product.get('rating', 0)
                review_count = product.get('review_count', 0)
                
                # ‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°
                trending_score = (sold_count * 0.5) + (rating * 20 * 0.3) + (review_count * 0.2)
                
                product['recommendation_score'] = trending_score
                product['recommendation_reason'] = f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ (‡∏Ç‡∏≤‡∏¢‡πÑ‡∏õ {sold_count:,} ‡∏ä‡∏¥‡πâ‡∏ô)"
                scored_products.append(product)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô trending
            sorted_products = sorted(scored_products, key=lambda x: x.get('recommendation_score', 0), reverse=True)
            
            return sorted_products[:limit]
            
        except Exception as e:
            self.logger.error(f"Error in recommend_trending_products: {e}")
            return []
    
    def get_personalized_recommendations(self, user_id: str, context: str = "", limit: int = 8) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß"""
        try:
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏à‡∏≤‡∏Å context
            if context:
                self.update_user_interests(user_id, context)
            
            recommendations = {
                'personal': [],
                'trending': [],
                'categories': [],
                'total_score': 0
            }
            
            # 1. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (40%)
            personal_recs = self.recommend_by_interest(user_id, limit=4)
            recommendations['personal'] = personal_recs
            
            # 2. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≤‡πÅ‡∏£‡∏á (40%)
            trending_recs = self.recommend_trending_products(limit=3)
            recommendations['trending'] = trending_recs
            
            # 3. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° (20%)
            categories_recs = self._get_popular_categories_products(limit=2)
            recommendations['categories'] = categories_recs
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
            all_products = personal_recs + trending_recs + categories_recs
            recommendations['total_score'] = len(set(p.get('product_code') for p in all_products if p.get('product_code')))
            
            return recommendations
            
        except Exception as e:
            self.logger.error(f"Error in get_personalized_recommendations: {e}")
            return {'personal': [], 'trending': [], 'categories': [], 'total_score': 0}
    
    def _get_popular_categories_products(self, limit: int = 2) -> List[Dict]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
            categories_stats = self.db.get_categories_with_stats()
            
            if not categories_stats:
                return []
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°
            popular_categories = sorted(categories_stats, key=lambda x: x.get('popularity_score', 0), reverse=True)
            
            products = []
            for category_stat in popular_categories[:2]:  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 2 ‡∏´‡∏°‡∏ß‡∏î‡πÅ‡∏£‡∏Å
                category_name = category_stat.get('category_name')
                if category_name:
                    # ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏±‡πâ‡∏ô
                    category_products = self.db.search_products(
                        query="",
                        category=category_name,
                        limit=1,
                        order_by='rating'
                    )
                    
                    for product in category_products.get('data', []):
                        product['recommendation_reason'] = f"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°: {category_name}"
                        products.append(product)
                        
                        if len(products) >= limit:
                            break
                
                if len(products) >= limit:
                    break
            
            return products
            
        except Exception as e:
            self.logger.error(f"Error in _get_popular_categories_products: {e}")
            return []
    
    def get_user_profile_summary(self, user_id: str) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        try:
            profile = {
                'user_id': user_id,
                'top_interests': self.get_user_top_interests(user_id, limit=5),
                'interaction_count': len(self.user_history.get(user_id, [])),
                'last_interaction': None,
                'preferences': {}
            }
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            user_interactions = self.user_history.get(user_id, [])
            if user_interactions:
                profile['last_interaction'] = user_interactions[-1]['timestamp']
                
                # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                recent_interactions = user_interactions[-10:]  # 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                
                search_counts = [interaction.get('search_count', 0) for interaction in recent_interactions if interaction.get('search_count')]
                if search_counts:
                    profile['preferences']['avg_search_results'] = sum(search_counts) / len(search_counts)
                
                # ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                hours = []
                for interaction in recent_interactions:
                    try:
                        dt = datetime.fromisoformat(interaction['timestamp'].replace('Z', '+00:00'))
                        hours.append(dt.hour)
                    except:
                        continue
                
                if hours:
                    profile['preferences']['preferred_hours'] = Counter(hours).most_common(3)
            
            return profile
            
        except Exception as e:
            self.logger.error(f"Error in get_user_profile_summary: {e}")
            return {'user_id': user_id, 'error': str(e)}

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
ai_recommender = AIProductRecommender()