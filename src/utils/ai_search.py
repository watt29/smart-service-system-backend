"""
üìÅ src/utils/ai_search.py
üéØ AI-Enhanced Search ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Affiliate Product Review Bot
‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ AI
"""

import re
import logging
from typing import List, Dict, Tuple, Optional
from difflib import SequenceMatcher

try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

from ..config import config

class AISearchEngine:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö AI"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.client = None
        
        # ‡∏Ñ‡∏≥‡∏û‡πâ‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        self.synonyms = {
            '‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå': ['phone', '‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠', 'smartphone', 'iphone', 'android'],
            '‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå': ['computer', 'pc', 'laptop', '‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ', 'macbook'],
            '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤': ['fashion', '‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô', '‡πÄ‡∏™‡∏∑‡πâ‡∏≠', '‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á', '‡∏ä‡∏∏‡∏î'],
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°': ['beauty', 'cosmetic', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏≠‡∏≤‡∏á', '‡∏Ñ‡∏£‡∏µ‡∏°', '‡∏•‡∏¥‡∏õ‡∏™‡∏ï‡∏¥‡∏Å'],
            '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û': ['health', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°', '‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô', '‡∏¢‡∏≤', 'supple'],
            '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤': ['shoes', 'sneaker', '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ú‡πâ‡∏≤‡πÉ‡∏ö', '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô'],
            '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤': ['bag', 'handbag', 'backpack', '‡πÄ‡∏õ‡πâ', 'clutch'],
            '‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤': ['watch', 'clock', 'smartwatch', 'apple watch'],
            '‡∏´‡∏π‡∏ü‡∏±‡∏á': ['headphone', 'earphone', 'airpods', 'wireless'],
            '‡∏≠‡∏≤‡∏´‡∏≤‡∏£': ['food', 'snack', '‡∏Ç‡∏ô‡∏°', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°']
        }
        
        # ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
        self.brands = {
            'apple': ['iphone', 'ipad', 'macbook', 'apple watch', 'airpods'],
            'samsung': ['galaxy', 'note', 'samsung'],
            'nike': ['nike', 'air', 'jordan'],
            'adidas': ['adidas', 'three stripes'],
            'uniqlo': ['uniqlo', '‡∏¢‡∏π‡∏ô‡∏¥‡πÇ‡∏Ñ‡∏•‡πà']
        }
        
        # ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        self.categories = {
            '‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå': ['electronics', 'gadget', 'tech', 'device'],
            '‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô': ['fashion', 'style', 'clothing', 'wear'],
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°': ['beauty', 'cosmetic', 'skincare', 'makeup'],
            '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û': ['health', 'wellness', 'supplement', 'vitamin'],
            '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏ô': ['home', 'garden', 'furniture', 'decoration'],
            '‡∏Å‡∏µ‡∏¨‡∏≤': ['sport', 'fitness', 'exercise', 'gym'],
            '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠': ['book', 'ebook', 'novel', 'education'],
            '‡πÄ‡∏î‡πá‡∏Å‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô': ['kids', 'toys', 'children', 'baby'],
            '‡∏≠‡∏≤‡∏´‡∏≤‡∏£': ['food', 'snack', 'beverage', 'organic']
        }
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OpenAI client
        if OPENAI_AVAILABLE and config.OPENAI_API_KEY:
            try:
                openai.api_key = config.OPENAI_API_KEY
                self.client = openai
                self.logger.info("OpenAI client initialized successfully")
            except Exception as e:
                self.logger.error(f"Failed to initialize OpenAI client: {e}")
        else:
            self.logger.warning("OpenAI not available - using fallback search")
    
    def enhanced_product_search(self, query: str, products: List[Dict], limit: int = 10) -> List[Dict]:
        """‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö AI ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"""
        try:
            self.logger.debug(f"AI enhanced search for: '{query}'")
            
            query_processed = self._preprocess_query(query)
            scored_products = []
            
            for product in products:
                score = self._calculate_product_relevance_score(query_processed, product)
                if score > 0:
                    scored_products.append((score, product))
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
            scored_products.sort(key=lambda x: x[0], reverse=True)
            
            self.logger.debug(f"AI search found {len(scored_products)} relevant products")
            
            return [product for score, product in scored_products[:limit]]
            
        except Exception as e:
            self.logger.error(f"Enhanced search failed: {e}")
            return products[:limit]  # Fallback to original list
    
    def _preprocess_query(self, query: str) -> Dict:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô"""
        query_lower = query.lower().strip()
        
        # ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ synonyms
        expanded_terms = [query_lower]
        
        for thai_word, synonyms in self.synonyms.items():
            if thai_word in query_lower:
                expanded_terms.extend(synonyms)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå
        detected_brands = []
        for brand, keywords in self.brands.items():
            for keyword in keywords:
                if keyword.lower() in query_lower:
                    detected_brands.append(brand)
                    expanded_terms.extend(keywords)
                    break
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        detected_categories = []
        for category, keywords in self.categories.items():
            if category in query_lower:
                detected_categories.append(category)
                expanded_terms.extend(keywords)
            else:
                for keyword in keywords:
                    if keyword.lower() in query_lower:
                        detected_categories.append(category)
                        expanded_terms.extend([category])
                        break
        
        # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        words = query_lower.split()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
        price_range = self._extract_price_range(query_lower)
        
        return {
            'original': query_lower,
            'expanded_terms': list(set(expanded_terms)),  # ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ã‡πâ‡∏≥
            'words': words,
            'brands': detected_brands,
            'categories': detected_categories,
            'price_range': price_range,
            'has_numbers': bool(re.search(r'\d', query_lower))
        }
    
    def _extract_price_range(self, query: str) -> Optional[Dict]:
        """‡πÅ‡∏¢‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"""
        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏Ñ‡∏≤
        patterns = [
            (r'‡∏£‡∏≤‡∏Ñ‡∏≤.*?(\d+).*?(\d+)', 'range'),
            (r'‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô.*?(\d+)', 'max'),
            (r'‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤.*?(\d+)', 'min'),
            (r'‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì.*?(\d+)', 'around'),
            (r'(\d+).*?‡∏ö‡∏≤‡∏ó', 'around')
        ]
        
        for pattern, price_type in patterns:
            match = re.search(pattern, query)
            if match:
                if price_type == 'range':
                    return {
                        'min': int(match.group(1)),
                        'max': int(match.group(2))
                    }
                elif price_type == 'max':
                    return {'max': int(match.group(1))}
                elif price_type == 'min':
                    return {'min': int(match.group(1))}
                elif price_type == 'around':
                    price = int(match.group(1))
                    return {
                        'min': price * 0.8,
                        'max': price * 1.2
                    }
        
        return None
    
    def _calculate_product_relevance_score(self, query_info: Dict, product: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        score = 0.0
        query_original = query_info['original']
        expanded_terms = query_info['expanded_terms']
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        product_name = product.get('product_name', '').lower()
        product_code = product.get('product_code', '').lower()
        description = product.get('description', '').lower()
        category = product.get('category', '').lower()
        shop_name = product.get('shop_name', '').lower()
        
        # 1. Exact match ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
        if query_original == product_name:
            score += 100
        elif query_original in product_name:
            score += 80
        
        # 2. Fuzzy match ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        name_similarity = SequenceMatcher(None, query_original, product_name).ratio()
        score += name_similarity * 70
        
        # 3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        if query_original == product_code:
            score += 90
        elif query_original in product_code:
            score += 60
        
        # 4. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
        if query_original in description:
            score += 50
        
        desc_similarity = SequenceMatcher(None, query_original, description).ratio()
        score += desc_similarity * 30
        
        # 5. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        if query_original in category:
            score += 70
        
        # 6. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô
        if query_original in shop_name:
            score += 40
        
        # 7. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô expanded terms
        for term in expanded_terms[1:]:  # ‡∏Ç‡πâ‡∏≤‡∏° original term
            term_lower = term.lower()
            if term_lower in product_name:
                score += 45
            if term_lower in description:
                score += 35
            if term_lower in category:
                score += 40
        
        # 8. Brand matching
        if query_info['brands']:
            for brand in query_info['brands']:
                if brand.lower() in product_name or brand.lower() in description:
                    score += 60
        
        # 9. Category matching
        if query_info['categories']:
            for cat in query_info['categories']:
                if cat.lower() in category:
                    score += 50
        
        # 10. Price range matching
        if query_info['price_range']:
            product_price = product.get('price', 0)
            price_range = query_info['price_range']
            
            if 'min' in price_range and 'max' in price_range:
                if price_range['min'] <= product_price <= price_range['max']:
                    score += 30
            elif 'max' in price_range:
                if product_price <= price_range['max']:
                    score += 25
            elif 'min' in price_range:
                if product_price >= price_range['min']:
                    score += 25
        
        # 11. Word-level matching
        query_words = query_info['words']
        if len(query_words) > 1:
            word_matches = 0
            total_text = f"{product_name} {description} {category}".lower()
            
            for word in query_words:
                if word in total_text:
                    word_matches += 1
            
            word_ratio = word_matches / len(query_words)
            score += word_ratio * 25
        
        # 12. Bonus ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        rating = product.get('rating', 0)
        if rating >= 4.5:
            score += 10
        elif rating >= 4.0:
            score += 5
        
        sold_count = product.get('sold_count', 0)
        if sold_count > 100:
            score += 8
        elif sold_count > 50:
            score += 4
        elif sold_count > 10:
            score += 2
        
        return score
    
    def suggest_product_alternatives(self, query: str, products: List[Dict], limit: int = 5) -> List[str]:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        suggestions = set()
        query_lower = query.lower()
        
        # ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡∏à‡∏≤‡∏Å synonyms
        for thai_word, synonyms in self.synonyms.items():
            if thai_word in query_lower:
                suggestions.update(synonyms[:2])  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 2 ‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å
        
        # ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        for product in products[:20]:  # ‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏Ñ‡πà 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
            # ‡∏Ñ‡∏≥‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô
            product_words = product.get('product_name', '').split()
            for word in product_words:
                if len(word) > 2 and SequenceMatcher(None, query_lower, word.lower()).ratio() > 0.6:
                    suggestions.add(word)
            
            # ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            category = product.get('category', '')
            if category and len(category) > 1:
                suggestions.add(category)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
        popular_categories = ['‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå', '‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°', '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û']
        suggestions.update(popular_categories)
        
        return list(suggestions)[:limit]
    
    def get_search_insights(self, query: str, products: List[Dict]) -> Dict:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        query_info = self._preprocess_query(query)
        
        return {
            'query_length': len(query),
            'has_thai': bool(re.search(r'[‡∏Å-‡πô]', query)),
            'has_english': bool(re.search(r'[a-zA-Z]', query)),
            'has_numbers': query_info['has_numbers'],
            'detected_brands': query_info['brands'],
            'detected_categories': query_info['categories'],
            'price_range': query_info['price_range'],
            'results_count': len(products),
            'expanded_terms_count': len(query_info['expanded_terms'])
        }

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
ai_search = AISearchEngine()