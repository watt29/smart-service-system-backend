"""
üîß CSV Import System ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Admin API
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ RLS ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Admin API ‡∏Ç‡∏≠‡∏á Supabase
"""

import csv
import logging
from typing import Dict, List, Optional
import re

class AdminCSVImporter:
    """‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ CSV ‡∏ú‡πà‡∏≤‡∏ô Admin API ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ RLS"""
    
    def __init__(self, db_instance=None):
        self.db = db_instance
        self.logger = logging.getLogger(__name__)
        
        # ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
        self.valid_categories = {
            '‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°', '‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á', '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤', '‡πÄ‡∏Å‡∏°‡∏°‡∏¥‡πà‡∏á',
            '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢', '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á', '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢', '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á',
            '‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤', '‡∏Å‡∏•‡πâ‡∏≠‡∏á', '‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°',
            '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤', '‡∏Å‡∏µ‡∏¨‡∏≤'
        }
    
    def generate_product_code(self, category: str, index: int) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        category_codes = {
            '‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠': 'PHN',
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°': 'BTY',
            '‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á': 'PET',
            '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤': 'BAG',
            '‡πÄ‡∏Å‡∏°‡∏°‡∏¥‡πà‡∏á': 'GAM',
            '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢': 'MFH',
            '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á': 'WFH',
            '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢': 'MSH',
            '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á': 'WSH',
            '‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤': 'WAT',
            '‡∏Å‡∏•‡πâ‡∏≠‡∏á': 'CAM',
            '‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå': 'CMP',
            '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û': 'HTH',
            '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°': 'FDR',
            '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤': 'ELC',
            '‡∏Å‡∏µ‡∏¨‡∏≤': 'SPT'
        }
        
        code_prefix = category_codes.get(category, 'GEN')
        return f"{code_prefix}{index:03d}"
    
    def validate_row(self, row: Dict) -> Dict:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        result = {
            'valid': True,
            'errors': [],
            'warnings': []
        }
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        required_fields = ['product_name', 'category', 'price', 'description', 'affiliate_link']
        for field in required_fields:
            if not row.get(field) or str(row[field]).strip() == '':
                result['valid'] = False
                result['errors'].append(f"‡∏ü‡∏¥‡∏•‡∏î‡πå {field} ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        category = row.get('category', '').strip()
        if category not in self.valid_categories:
            result['warnings'].append(f"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà '{category}' ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
        try:
            price = float(str(row.get('price', 0)).replace(',', ''))
            if price <= 0:
                result['valid'] = False
                result['errors'].append("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
        except (ValueError, TypeError):
            result['valid'] = False
            result['errors'].append("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö rating
        try:
            rating = float(str(row.get('rating', 0)))
            if rating < 0 or rating > 5:
                result['warnings'].append("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-5")
        except (ValueError, TypeError):
            result['warnings'].append("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå
        affiliate_link = row.get('affiliate_link', '').strip()
        if not affiliate_link.startswith('http'):
            result['valid'] = False
            result['errors'].append("‡∏•‡∏¥‡∏á‡∏Å‡πå affiliate ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        
        return result
    
    def prepare_product_data(self, row: Dict, product_code: str) -> Dict:
        """‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤"""
        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        product_name = str(row.get('product_name', '')).strip()
        category = str(row.get('category', '')).strip()
        
        try:
            price = float(str(row.get('price', 0)).replace(',', ''))
        except (ValueError, TypeError):
            price = 0
        
        try:
            rating = float(str(row.get('rating', 0)))
        except (ValueError, TypeError):
            rating = 0
        
        try:
            sold_count = int(str(row.get('sold_count', 0)).replace(',', ''))
        except (ValueError, TypeError):
            sold_count = 0
        
        description = str(row.get('description', '')).strip()
        brand = str(row.get('brand', '')).strip() or '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
        tags = str(row.get('tags', '')).strip()
        affiliate_link = str(row.get('affiliate_link', '')).strip()
        shop_name = str(row.get('shop_name', '')).strip() or '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô (15% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤)
        commission_rate = 15.0
        commission = price * (commission_rate / 100)
        
        return {
            'product_code': product_code,
            'product_name': product_name,
            'category': category,
            'price': price,
            'description': description,
            'rating': rating,
            'sold_count': sold_count,
            'shop_name': shop_name,
            'commission_rate': commission_rate,
            'product_link': affiliate_link,  # ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ product_link ‡πÅ‡∏ó‡∏ô affiliate_link
            'offer_link': affiliate_link,    # ‡πÉ‡∏ä‡πâ link ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö offer
            'image_url': ''  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô CSV
        }
    
    def import_csv_file(self, csv_file_path: str, skip_duplicates: bool = True) -> Dict:
        """‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV"""
        results = {
            'success': 0,
            'errors': 0,
            'warnings': 0,
            'total_rows': 0,
            'details': []
        }
        
        if not self.db:
            results['details'].append("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return results
        
        try:
            with open(csv_file_path, 'r', encoding='utf-8') as file:
                csv_reader = csv.DictReader(file)
                
                for index, row in enumerate(csv_reader, 1):
                    results['total_rows'] += 1
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    validation = self.validate_row(row)
                    
                    if not validation['valid']:
                        results['errors'] += 1
                        error_msg = f"‡πÅ‡∏ñ‡∏ß {index}: {', '.join(validation['errors'])}"
                        results['details'].append(error_msg)
                        self.logger.error(error_msg)
                        continue
                    
                    if validation['warnings']:
                        results['warnings'] += 1
                        warning_msg = f"‡πÅ‡∏ñ‡∏ß {index}: {', '.join(validation['warnings'])}"
                        results['details'].append(warning_msg)
                        self.logger.warning(warning_msg)
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    product_code = self.generate_product_code(row['category'], index)
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if skip_duplicates:
                        existing = self.db.get_product_by_code(product_code)
                        if existing:
                            results['details'].append(f"‡πÅ‡∏ñ‡∏ß {index}: ‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß - {product_code}")
                            continue
                    
                    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    product_data = self.prepare_product_data(row, product_code)
                    
                    # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ Admin API)
                    success = self._insert_product_admin(product_data)
                    
                    if success:
                        results['success'] += 1
                        results['details'].append(f"‡πÅ‡∏ñ‡∏ß {index}: ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - {product_data['product_name']}")
                        self.logger.info(f"‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {product_code}")
                    else:
                        results['errors'] += 1
                        results['details'].append(f"‡πÅ‡∏ñ‡∏ß {index}: ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ - {product_data['product_name']}")
                        self.logger.error(f"‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {product_code}")
        
        except FileNotFoundError:
            results['details'].append(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {csv_file_path}")
        except Exception as e:
            results['details'].append(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            self.logger.error(f"Error importing CSV: {e}")
        
        return results
    
    def _insert_product_admin(self, product_data: Dict) -> bool:
        """‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô Admin API"""
        try:
            # ‡πÉ‡∏ä‡πâ database method ‡πÅ‡∏ó‡∏ô direct supabase access
            return self.db.add_product(product_data)
                
        except Exception as e:
            self.logger.error(f"Error inserting product {product_data['product_code']}: {e}")
            return False
    
    def create_sample_csv(self, output_path: str) -> bool:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
        sample_data = [
            {
                'product_name': 'iPhone 15 Pro Max 256GB',
                'category': '‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠',
                'price': '45900',
                'description': 'iPhone 15 Pro Max ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡∏Å‡∏•‡πâ‡∏≠‡∏á 48MP Pro',
                'brand': 'Apple',
                'rating': '4.8',
                'sold_count': '1250',
                'tags': 'iPhone,Apple,smartphone,5G',
                'affiliate_link': 'https://s.shopee.co.th/9ADyJMhFF0',
                'shop_name': 'Apple Store Official'
            },
            {
                'product_name': '‡πÄ‡∏ã‡∏£‡∏±‡πà‡∏°‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡∏ã‡∏µ 30ml',
                'category': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°',
                'price': '890',
                'description': '‡πÄ‡∏ã‡∏£‡∏±‡πà‡∏°‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡∏ã‡∏µ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô ‡∏•‡∏î‡∏à‡∏∏‡∏î‡∏î‡πà‡∏≤‡∏á‡∏î‡∏≥',
                'brand': 'Beauty Plus',
                'rating': '4.6',
                'sold_count': '850',
                'tags': '‡πÄ‡∏ã‡∏£‡∏±‡πà‡∏°,‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡∏ã‡∏µ,‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°',
                'affiliate_link': 'https://s.shopee.co.th/5VKfwcvCgS',
                'shop_name': 'Beauty House'
            }
        ]
        
        try:
            with open(output_path, 'w', newline='', encoding='utf-8') as file:
                fieldnames = [
                    'product_name', 'category', 'price', 'description', 'brand',
                    'rating', 'sold_count', 'tags', 'affiliate_link', 'shop_name'
                ]
                writer = csv.DictWriter(file, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows(sample_data)
            
            return True
        except Exception as e:
            self.logger.error(f"Error creating sample CSV: {e}")
            return False
    
    def get_import_summary(self, results: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤"""
        summary = f"üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n\n"
        summary += f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {results['success']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
        summary += f"‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {results['errors']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
        summary += f"‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: {results['warnings']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
        summary += f"üìù ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {results['total_rows']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n"
        
        if results['details']:
            summary += "üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:\n"
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
            for detail in results['details'][:10]:
                summary += f"‚Ä¢ {detail}\n"
            
            if len(results['details']) > 10:
                summary += f"... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(results['details']) - 10} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
        
        return summary