"""
Promotion Generator р╕кр╕│р╕лр╕гр╕▒р╕Ър╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╣Вр╕Ыр╕гр╣Вр╕бр╕Хр╕кр╕┤р╕Щр╕Др╣Йр╕▓р╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤
р╕Чр╕╡р╣Ир╕Фр╕╣р╣Ар╕Ыр╣Зр╕Щр╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤р╣Бр╕ер╕░р╕Щр╣Ир╕▓р╣Ар╕Кр╕╖р╣Ир╕нр╕Цр╕╖р╕н (р╣Др╕бр╣Ир╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Вр╕▓р╕вр╕Вр╕нр╕З)
"""

import random
from typing import Dict, List
from datetime import datetime

class PromotionGenerator:
    """р╕Др╕ер╕▓р╕кр╕кр╕│р╕лр╕гр╕▒р╕Ър╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╣Вр╕Ыр╕гр╣Вр╕бр╕Хр╕кр╕┤р╕Щр╕Др╣Йр╕▓р╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤"""
    
    def __init__(self):
        # р╕Др╕│р╕Щр╕│р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щр╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤
        self.natural_openings = [
            "р╣Ар╕Юр╕┤р╣Ир╕Зр╣Ар╕Ир╕нр╕кр╕┤р╕Щр╕Др╣Йр╕▓р╕Фр╕╡р╣Ж р╕бр╕▓р╣Бр╕Кр╕гр╣М",
            "р╕лр╕▓р╕Лр╕╖р╣Йр╕нр╕Вр╕нр╕Зр╕нр╕вр╕╣р╣Ир╣Ар╕Ир╕нр╣Ар╕Ир╣Йр╕▓р╕Щр╕╡р╣Й",
            "р╣Бр╕Щр╕░р╕Щр╕│р╕кр╕┤р╕Щр╕Др╣Йр╕▓р╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Фр╕╡р╕Ир╕гр╕┤р╕З",
            "р╣Ар╕Ир╕нр╕Вр╕нр╕Зр╕Фр╕╡р╕бр╕▓р╕Ър╕нр╕Бр╕Хр╣Ир╕н",
            "р╕кр╕┤р╕Щр╕Др╣Йр╕▓р╕Чр╕╡р╣Ир╕лр╕ер╕▓р╕вр╕Др╕Щр╕Цр╕▓р╕б",
            "р╕бр╕╡р╕Др╕Щр╕Цр╕▓р╕бр╣Ар╕гр╕╖р╣Ир╕нр╕Зр╕кр╕┤р╕Щр╕Др╣Йр╕▓р╕Щр╕╡р╣Йр╕Ър╕нр╕Бр╕Бр╕▒р╕Щр╕Др╣Ир╕░",
            "р╕гр╕╡р╕зр╕┤р╕зр╕кр╕┤р╕Щр╕Др╣Йр╕▓р╕Чр╕╡р╣Ир╕Бр╕│р╕ер╕▒р╕Зр╕ор╕┤р╕Х",
            "р╣Бр╕Кр╕гр╣Мр╕Вр╕нр╕Зр╕Фр╕╡р╕Чр╕╡р╣Ир╣Ар╕Юр╕┤р╣Ир╕Зр╕Др╣Йр╕Щр╕Юр╕Ъ"
        ]
        
        # р╕Др╕│р╕Ър╕гр╕гр╕вр╕▓р╕вр╕Вр╣Йр╕нр╕Фр╕╡ (р╣Ар╕Йр╕Юр╕▓р╕░р╣Ар╕Ир╕▓р╕░р╕Ир╕З)
        self.product_benefits = {
            'р╕нр╕▓р╕лр╕▓р╕гр╣Бр╕бр╕з': [
                "р╣Бр╕бр╕зр╕Бр╕┤р╕Щр╣Бр╕ер╣Йр╕зр╕Вр╕Щр╣Ар╕Зр╕▓р╕Зр╕▓р╕б",
                "р╕Кр╣Ир╕зр╕вр╣Гр╕лр╣Йр╕гр╕░р╕Ър╕Ър╕вр╣Ир╕нр╕вр╕нр╕▓р╕лр╕▓р╕гр╕Фр╕╡р╕Вр╕╢р╣Йр╕Щ", 
                "р╕бр╕╡р╣Вр╕Ыр╕гр╕Хр╕╡р╕Щр╕кр╕╣р╕З р╣Ар╕лр╕бр╕▓р╕░р╕Бр╕▒р╕Ър╣Бр╕бр╕зр╕Чр╕╕р╕Бр╕зр╕▒р╕в",
                "р╣Др╕бр╣Ир╕бр╕╡р╕кр╕╡р╕Ьр╕кр╕бр╕нр╕▓р╕лр╕▓р╕г р╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в",
                "р╣Бр╕бр╕зр╕Кр╕нр╕Ър╕Бр╕┤р╕Щр╣Др╕бр╣Ир╣Ар╕лр╕ер╕╖р╕н",
                "р╕Кр╣Ир╕зр╕вр╣Ар╕кр╕гр╕┤р╕бр╕ар╕╣р╕бр╕┤р╕Др╕╕р╣Йр╕бр╕Бр╕▒р╕Щ"
            ],
            'р╕кр╕╕р╕Вр╕ар╕▓р╕Ю': [
                "р╕Кр╣Ир╕зр╕вр╣Ар╕кр╕гр╕┤р╕бр╕ар╕╣р╕бр╕┤р╕Др╕╕р╣Йр╕бр╕Бр╕▒р╕Щр╣Др╕Фр╣Йр╕Фр╕╡",
                "р╕гр╕▒р╕Ър╕Ыр╕гр╕░р╕Чр╕▓р╕Щр╕Зр╣Ир╕▓р╕в р╣Др╕бр╣Ир╕бр╕╡р╕гр╕кр╕Вр╕б",
                "р╣Ар╕лр╣Зр╕Щр╕Ьр╕ер╕Кр╕▒р╕Фр╣Ар╕Ир╕Щр╕ар╕▓р╕вр╣Гр╕Щ 2 р╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М",
                "р╣Др╕бр╣Ир╕бр╕╡р╕Ьр╕ер╕Вр╣Йр╕▓р╕Зр╣Ар╕Др╕╡р╕вр╕З",
                "р╕зр╕┤р╕Хр╕▓р╕бр╕┤р╕Щр╕Др╕гр╕Ър╕Цр╣Йр╕зр╕Щ"
            ],
            'р╕Др╕зр╕▓р╕бр╕Зр╕▓р╕б': [
                "р╕Ьр╕┤р╕зр╣Ар╕Щр╕╡р╕вр╕Щр╣Гр╕кр╕Вр╕╢р╣Йр╕Щр╣Ар╕лр╣Зр╕Щр╣Др╕Фр╣Йр╕Кр╕▒р╕Ф",
                "р╣Др╕бр╣Ир╕Чр╕│р╣Гр╕лр╣Йр╕Ьр╕┤р╕зр╣Бр╕Юр╣Й р╣Бр╕бр╣Йр╕Ьр╕┤р╕зр╣Бр╕Юр╣Йр╕Зр╣Ир╕▓р╕в",
                "р╕Лр╕╢р╕бр╕Лр╕▓р╕Ър╣Ар╕гр╣Зр╕з р╣Др╕бр╣Ир╣Ар╕лр╕Щр╕╡р╕вр╕зр╣Ар╕лр╕Щр╕нр╕░р╕лр╕Щр╕░",
                "р╕Бр╕ер╕┤р╣Ир╕Щр╕лр╕нр╕бр╕нр╣Ир╕нр╕Щр╣Ж р╣Др╕бр╣Ир╕Йр╕╕р╕Щ",
                "р╣Гр╕Кр╣Йр╣Бр╕ер╣Йр╕зр╕Ьр╕┤р╕зр╕Кр╕╕р╣Ир╕бр╕Кр╕╖р╣Йр╕Щ"
            ],
            'р╕нр╕┤р╣Ар╕ер╣Зр╕Бр╕Чр╕гр╕нр╕Щр╕┤р╕Бр╕кр╣М': [
                "р╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╕Зр╣Ир╕▓р╕в р╣Гр╕Др╕гр╣Ж р╕Бр╣Зр╕Чр╕│р╣Др╕Фр╣Й",
                "р╕Др╕╕р╕Ур╕ар╕▓р╕Юр╕Фр╕╡ р╣Гр╕Кр╣Йр╣Др╕Фр╣Йр╕Щр╕▓р╕Щ",
                "р╕Ыр╕гр╕░р╕лр╕вр╕▒р╕Фр╕Юр╕ер╕▒р╕Зр╕Зр╕▓р╕Щ",
                "р╕Хр╕нр╕Ър╕кр╕Щр╕нр╕Зр╣Ар╕гр╣Зр╕з р╣Др╕бр╣Ир╕Др╣Йр╕▓р╕З",
                "р╕Бр╕▓р╕гр╕▒р╕Щр╕Хр╕╡р╕ир╕╣р╕Щр╕вр╣Мр╣Др╕Чр╕в"
            ]
        }
        
        # р╕Др╕│р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕гр╕▓р╕Др╕▓ (р╣Ар╕Ыр╣Зр╕Щр╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤)
        self.price_phrases = [
            "р╕гр╕▓р╕Др╕▓р╕Бр╣Зр╣Др╕бр╣Ир╣Бр╕Юр╕Зр╣Ар╕Бр╕┤р╕Щр╣Др╕Ы",
            "р╕гр╕▓р╕Др╕▓р╕Др╕╕р╣Йр╕бр╕Др╣Ир╕▓р╕Бр╕▒р╕Ър╕Др╕╕р╕Ур╕ар╕▓р╕Ю",
            "р╣Ар╕бр╕╖р╣Ир╕нр╣Ар╕Чр╕╡р╕вр╕Ър╕Бр╕▒р╕Ър╕Чр╕╡р╣Ир╕нр╕╖р╣Ир╕Щр╕Цр╕╖р╕нр╕зр╣Ир╕▓р╣Вр╕нр╣Ар╕Д",
            "р╕гр╕▓р╕Др╕▓р╕Щр╕╡р╣Йр╕Цр╕╖р╕нр╕зр╣Ир╕▓р╕кр╕бр╣Ар╕лр╕Хр╕╕р╕кр╕бр╕Ьр╕е",
            "р╣Гр╕Щр╕гр╕▓р╕Др╕▓р╕Чр╕╡р╣Ир╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╣Др╕Фр╣Й",
            "р╕Др╕┤р╕Фр╕зр╣Ир╕▓р╕гр╕▓р╕Др╕▓р╣Бр╕Яр╕гр╣Мр╕Юр╕нр╕кр╕бр╕Др╕зр╕г"
        ]
        
        # р╕Др╕│р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕гр╣Йр╕▓р╕Щр╕Др╣Йр╕▓
        self.shop_credibility = [
            "р╕гр╣Йр╕▓р╕Щр╕Щр╕╡р╣Йр╕Вр╕▓р╕вр╕Фр╕╡ р╕бр╕╡р╕Др╕Щр╕гр╕╡р╕зр╕┤р╕зр╣Ар╕вр╕нр╕░",
            "р╣Ар╕Ир╣Йр╕▓р╕Вр╕нр╕Зр╕гр╣Йр╕▓р╕Щр╕Хр╕нр╕Ър╣Ар╕гр╣Зр╕з р╕Ър╕гр╕┤р╕Бр╕▓р╕гр╕Фр╕╡",
            "р╕гр╣Йр╕▓р╕Щр╣Гр╕лр╕Нр╣И р╕Щр╣Ир╕▓р╣Ар╕Кр╕╖р╣Ир╕нр╕Цр╕╖р╕н",
            "р╕кр╣Ир╕Зр╕Вр╕нр╕Зр╣Др╕з р╕бр╕▓р╕Др╕гр╕Ър╕Хр╕▓р╕бр╕Чр╕╡р╣Ир╕кр╕▒р╣Ир╕З",
            "р╕гр╣Йр╕▓р╕Щр╕бр╕╡р╕Др╕Щр╕Лр╕╖р╣Йр╕нр╣Ар╕вр╕нр╕░ р╕Др╕Зр╣Др╕бр╣Ир╕Ьр╕┤р╕Фр╕лр╕зр╕▒р╕З"
        ]
        
        # р╕Др╕│р╕Ыр╕┤р╕Фр╕Чр╣Йр╕▓р╕в (р╣Ар╕Ыр╣Зр╕Щр╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤)
        self.natural_endings = [
            "р╣Гр╕Др╕гр╕кр╕Щр╣Гр╕Ир╕ер╕нр╕Зр╕Фр╕╣р╕Щр╕░р╕Др╕░",
            "р╣Бр╕Кр╕гр╣Мр╣Гр╕лр╣Йр╣Ар╕Юр╕╖р╣Ир╕нр╕Щр╣Ж р╕Чр╕╡р╣Ир╕лр╕▓р╕Лр╕╖р╣Йр╕нр╕нр╕вр╕╣р╣И",
            "р╕лр╕▓р╕Лр╕╖р╣Йр╕нр╕нр╕вр╕╣р╣Ир╕ер╕нр╕Зр╕Фр╕╣р╣Ар╕Ир╣Йр╕▓р╕Щр╕╡р╣Й",
            "р╣Гр╕Др╕гр╕Бр╕│р╕ер╕▒р╕Зр╕лр╕▓р╕нр╕вр╕╣р╣Ир╣Бр╕Щр╕░р╕Щр╕│р╣Ар╕ер╕в",
            "р╕бр╕╡р╕Ыр╕гр╕░р╣Вр╕вр╕Кр╕Щр╣Мр╕Бр╣Зр╣Ар╕нр╕▓р╣Др╕Ыр╣Гр╕Кр╣Йр╕Бр╕▒р╕Щр╕Щр╕░",
            "р╕лр╕зр╕▒р╕Зр╕зр╣Ир╕▓р╕Ир╕░р╕Кр╣Ир╕зр╕вр╣Др╕Фр╣Йр╕Щр╕░р╕Др╕░"
        ]
        
        # Hashtags р╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤
        self.natural_hashtags = [
            "#р╕гр╕╡р╕зр╕┤р╕зр╕Вр╕нр╕Зр╕Фр╕╡", "#р╣Бр╕Кр╕гр╣Мр╕Вр╕нр╕Зр╕Фр╕╡", "#р╕Вр╕нр╕Зр╕Фр╕╡р╕Ър╕нр╕Бр╕Хр╣Ир╕н",
            "#р╣Гр╕Кр╣Йр╕Фр╕╡р╣Бр╕Щр╕░р╕Щр╕│", "#р╕Др╕╕р╕Ур╕ар╕▓р╕Юр╕Фр╕╡", "#р╕гр╕▓р╕Др╕▓р╕Фр╕╡",
            "#shopee", "#р╕Кр╣Йр╕нр╕Ыр╕Ыр╕╡р╣Й", "#р╕Лр╕╖р╣Йр╕нр╕Вр╕нр╕Зр╕нр╕нр╕Щр╣Др╕ер╕Щр╣М"
        ]

    def generate_promotion(self, product: Dict, style: str = "casual") -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╣Вр╕Ыр╕гр╣Вр╕бр╕Хр╕кр╕┤р╕Щр╕Др╣Йр╕▓
        
        Args:
            product: р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕┤р╕Щр╕Др╣Йр╕▓
            style: р╕кр╣Др╕Хр╕ер╣М - casual, enthusiastic, informative
        """
        try:
            product_name = product.get('product_name', '')
            price = float(product.get('price', 0))
            shop_name = product.get('shop_name', '')
            rating = float(product.get('rating', 0))
            sold_count = int(product.get('sold_count', 0))
            category = product.get('category', '')
            
            # р╣Ар╕ер╕╖р╕нр╕Бр╕нр╕Зр╕Др╣Мр╕Ыр╕гр╕░р╕Бр╕нр╕Ър╕Хр╕▓р╕бр╕кр╣Др╕Хр╕ер╣М
            if style == "casual":
                return self._generate_casual_promotion(product_name, price, shop_name, rating, sold_count, category)
            elif style == "enthusiastic":
                return self._generate_enthusiastic_promotion(product_name, price, shop_name, rating, sold_count, category)
            else:  # informative
                return self._generate_informative_promotion(product_name, price, shop_name, rating, sold_count, category)
                
        except Exception as e:
            return f"р╣Бр╕Щр╕░р╕Щр╕│ {product.get('product_name', 'р╕кр╕┤р╕Щр╕Др╣Йр╕▓р╕Фр╕╡р╣Ж')} \nр╕гр╕▓р╕Др╕▓ {product.get('price', 0)} р╕Ър╕▓р╕Ч\nр╣Гр╕Др╕гр╕кр╕Щр╣Гр╕Ир╕ер╕нр╕Зр╕Фр╕╣р╕Щр╕░р╕Др╕░"

    def _generate_casual_promotion(self, name: str, price: float, shop: str, rating: float, sold: int, category: str) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Ыр╕гр╣Вр╕бр╕Хр╣Бр╕Ър╕Ър╕кр╕Ър╕▓р╕вр╣Ж р╣Ар╕Ыр╣Зр╕Щр╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤"""
        
        # р╣Ар╕ер╕╖р╕нр╕Бр╕Др╕│р╣Ар╕Ыр╕┤р╕Ф
        opening = random.choice(self.natural_openings)
        
        # р╕кр╕гр╣Йр╕▓р╕Зр╕Кр╕╖р╣Ир╕нр╕кр╕┤р╕Щр╕Др╣Йр╕▓ (р╕вр╣Ир╕нр╣Гр╕лр╣Йр╕нр╣Ир╕▓р╕Щр╕Зр╣Ир╕▓р╕в)
        short_name = self._shorten_product_name(name)
        
        # р╣Ар╕ер╕╖р╕нр╕Бр╕Вр╣Йр╕нр╕Фр╕╡
        benefits = self._get_category_benefits(category)
        benefit = random.choice(benefits) if benefits else "р╕Др╕╕р╕Ур╕ар╕▓р╕Юр╕Фр╕╡ р╣Гр╕Кр╣Йр╣Др╕Фр╣Йр╕Ир╕гр╕┤р╕З"
        
        # р╕Др╕│р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕гр╕▓р╕Др╕▓
        price_desc = random.choice(self.price_phrases)
        
        # р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╣Йр╕▓р╕Щр╕Др╣Йр╕▓ (р╕Цр╣Йр╕▓р╕бр╕╡)
        shop_desc = ""
        if shop:
            shop_desc = f"\nр╕гр╣Йр╕▓р╕Щ {shop} " + random.choice(self.shop_credibility)
        
        # р╕кр╕Цр╕┤р╕Хр╕┤ (р╕Цр╣Йр╕▓р╕бр╕╡)
        stats = ""
        if sold > 1000:
            stats = f"\nр╕Вр╕▓р╕вр╣Др╕Ыр╣Бр╕ер╣Йр╕з {self._format_sold_count(sold)} "
        if rating >= 4.0:
            stars = "тнР" * int(rating)
            stats += f" {stars} ({rating})"
        
        # р╕Др╕│р╕Ыр╕┤р╕Фр╕Чр╣Йр╕▓р╕в
        ending = random.choice(self.natural_endings)
        
        # Hashtags
        hashtags = random.sample(self.natural_hashtags, 3)
        hashtag_str = " ".join(hashtags)
        
        promotion = f"""{opening} ЁЯШК

ЁЯУж {short_name}
ЁЯТ░ {price:,.0f} р╕Ър╕▓р╕Ч - {price_desc}
тЬи {benefit}{shop_desc}{stats}

{ending}

{hashtag_str}"""
        
        return promotion

    def _generate_enthusiastic_promotion(self, name: str, price: float, shop: str, rating: float, sold: int, category: str) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Ыр╕гр╣Вр╕бр╕Хр╣Бр╕Ър╕Ър╕Бр╕гр╕░р╕Хр╕╖р╕нр╕гр╕╖р╕нр╕гр╣Йр╕Щ"""
        
        short_name = self._shorten_product_name(name)
        benefits = self._get_category_benefits(category)
        
        promotion = f"""ЁЯФе р╣Ар╕Ир╕нр╕Вр╕нр╕Зр╕Фр╕╡р╕бр╕▓р╣Бр╕Кр╕гр╣М! ЁЯФе

тЬи {short_name} тЬи
ЁЯТ╕ р╕гр╕▓р╕Др╕▓р╣Ар╕Юр╕╡р╕вр╕З {price:,.0f} р╕Ър╕▓р╕Ч!

ЁЯСН {random.choice(benefits) if benefits else 'р╕Др╕╕р╕Ур╕ар╕▓р╕Юр╣Ар╕Бр╕┤р╕Щр╕гр╕▓р╕Др╕▓!'}
ЁЯПк р╕гр╣Йр╕▓р╕Щ {shop} р╕бр╕╡р╕Др╕Щр╕Лр╕╖р╣Йр╕нр╣Ар╕вр╕нр╕░р╕бр╕▓р╕Б!"""

        if sold > 5000:
            promotion += f"\nЁЯФе р╕Вр╕▓р╕вр╕Фр╕╡р╕бр╕▓р╕Б! р╣Др╕Ыр╣Бр╕ер╣Йр╕зр╕Бр╕зр╣Ир╕▓ {self._format_sold_count(sold)}"
        
        if rating >= 4.5:
            promotion += f"\nтнРтнРтнРтнРтнР р╕Др╕░р╣Бр╕Щр╕Щ {rating} р╕Фр╕▓р╕з!"

        promotion += f"""

ЁЯЫТ р╣Гр╕Др╕гр╕Бр╕│р╕ер╕▒р╕Зр╕лр╕▓р╕нр╕вр╕╣р╣Ир╕Хр╣Йр╕нр╕Зр╕ер╕нр╕З!
ЁЯТХ р╕гр╕▒р╕Ър╕гр╕нр╕Зр╣Др╕бр╣Ир╕Ьр╕┤р╕Фр╕лр╕зр╕▒р╕З!

{' '.join(random.sample(self.natural_hashtags, 4))}"""
        
        return promotion

    def _generate_informative_promotion(self, name: str, price: float, shop: str, rating: float, sold: int, category: str) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Ыр╕гр╣Вр╕бр╕Хр╣Бр╕Ър╕Ър╣Гр╕лр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕е"""
        
        short_name = self._shorten_product_name(name)
        benefits = self._get_category_benefits(category)
        
        promotion = f"""ЁЯУЛ р╕гр╕╡р╕зр╕┤р╕зр╕кр╕┤р╕Щр╕Др╣Йр╕▓: {short_name}

ЁЯУК р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕┤р╕Щр╕Др╣Йр╕▓:
тАв р╕гр╕▓р╕Др╕▓: {price:,.0f} р╕Ър╕▓р╕Ч
тАв р╕гр╣Йр╕▓р╕Щр╕Др╣Йр╕▓: {shop}"""

        if rating > 0:
            promotion += f"\nтАв р╕Др╕░р╣Бр╕Щр╕Щр╕гр╕╡р╕зр╕┤р╕з: {rating}/5.0 тнР"
        
        if sold > 100:
            promotion += f"\nтАв р╕вр╕нр╕Фр╕Вр╕▓р╕в: {self._format_sold_count(sold)} р╕Кр╕┤р╣Йр╕Щ"

        if benefits:
            promotion += f"\n\nтЬЕ р╕Ир╕╕р╕Фр╣Ар╕Фр╣Ир╕Щ:\nтАв {random.choice(benefits)}"
            if len(benefits) > 1:
                promotion += f"\nтАв {random.choice([b for b in benefits if b != benefits[0]])}"

        promotion += f"\n\nЁЯУЭ р╕кр╕гр╕╕р╕Ы: {random.choice(self.price_phrases)}"
        promotion += f"\n{random.choice(self.natural_endings)}"
        
        return promotion

    def _shorten_product_name(self, name: str) -> str:
        """р╕вр╣Ир╕нр╕Кр╕╖р╣Ир╕нр╕кр╕┤р╕Щр╕Др╣Йр╕▓р╣Гр╕лр╣Йр╕нр╣Ир╕▓р╕Щр╕Зр╣Ир╕▓р╕в"""
        if len(name) <= 50:
            return name
            
        # р╕ер╕Ър╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щ
        name = name.replace('уАР', '').replace('уАС', '')
        name = name.replace('тЬи', '').replace('ЁЯФе', '')
        
        # р╣Бр╕вр╕Бр╕Др╕│р╣Бр╕ер╕░р╣Ар╕ер╕╖р╕нр╕Бр╕Др╕│р╕кр╕│р╕Др╕▒р╕Н
        words = name.split()
        if len(words) <= 8:
            return name
            
        # р╣Ар╕Бр╣Зр╕Ър╕Др╕│р╕кр╕│р╕Др╕▒р╕Нр╕Фр╣Йр╕▓р╕Щр╕лр╕Щр╣Йр╕▓
        important_words = words[:6]
        return ' '.join(important_words) + '...'

    def _get_category_benefits(self, category: str) -> List[str]:
        """р╣Ар╕ер╕╖р╕нр╕Бр╕Вр╣Йр╕нр╕Фр╕╡р╕Хр╕▓р╕бр╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣И"""
        category_map = {
            'р╕кр╕▒р╕Хр╕зр╣Мр╣Ар╕ер╕╡р╣Йр╕вр╕З': 'р╕нр╕▓р╕лр╕▓р╕гр╣Бр╕бр╕з',
            'р╕Др╕зр╕▓р╕бр╕Зр╕▓р╕б': 'р╕Др╕зр╕▓р╕бр╕Зр╕▓р╕б',
            'р╕кр╕╕р╕Вр╕ар╕▓р╕Ю': 'р╕кр╕╕р╕Вр╕ар╕▓р╕Ю',
            'р╕нр╕┤р╣Ар╕ер╣Зр╕Бр╕Чр╕гр╕нр╕Щр╕┤р╕Бр╕кр╣М': 'р╕нр╕┤р╣Ар╕ер╣Зр╕Бр╕Чр╕гр╕нр╕Щр╕┤р╕Бр╕кр╣М'
        }
        
        benefit_key = category_map.get(category, 'р╕нр╕▓р╕лр╕▓р╕гр╣Бр╕бр╕з')
        return self.product_benefits.get(benefit_key, self.product_benefits['р╕нр╕▓р╕лр╕▓р╕гр╣Бр╕бр╕з'])

    def _format_sold_count(self, count: int) -> str:
        """р╣Бр╕Ыр╕ер╕Зр╕Ир╕│р╕Щр╕зр╕Щр╕Вр╕▓р╕вр╣Гр╕лр╣Йр╕нр╣Ир╕▓р╕Щр╕Зр╣Ир╕▓р╕в"""
        if count >= 10000:
            return f"{count//1000}k+"
        elif count >= 1000:
            return f"{count//100}00+"
        else:
            return str(count)

    def generate_multiple_promotions(self, product: Dict, count: int = 3) -> List[str]:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╣Вр╕Ыр╕гр╣Вр╕бр╕Хр╕лр╕ер╕▓р╕вр╣Бр╕Ър╕Ъ"""
        styles = ["casual", "enthusiastic", "informative"]
        promotions = []
        
        for i in range(count):
            style = styles[i % len(styles)]
            promotion = self.generate_promotion(product, style)
            promotions.append(promotion)
            
        return promotions