"""
ЁЯУБ Smart Category Manager
р╕гр╕░р╕Ър╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣Ир╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░ р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕кр╕Фр╕Зр╣Вр╕Ыр╕гр╣Вр╕бр╕Х р╣Бр╕ер╕░р╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓
"""

import random
from typing import Dict, List, Optional, Tuple
from datetime import datetime
import logging

class SmartCategoryManager:
    """р╕Др╕ер╕▓р╕кр╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣Ир╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # р╕Бр╕│р╕лр╕Щр╕Фр╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣Ир╣Бр╕ер╕░р╣Др╕нр╕Др╕нр╕Щ
        self.categories = {
            'р╣Вр╕Чр╕гр╕ир╕▒р╕Юр╕Чр╣Мр╕бр╕╖р╕нр╕Цр╕╖р╕н': {
                'icon': 'ЁЯУ▒',
                'keywords': ['р╕бр╕╖р╕нр╕Цр╕╖р╕н', 'р╣Вр╕Чр╕гр╕ир╕▒р╕Юр╕Чр╣М', 'smartphone', 'iphone', 'samsung', 'android'],
                'priority': 1,  # р╕Др╕зр╕▓р╕бр╕кр╕│р╕Др╕▒р╕Нр╕кр╕╣р╕З
                'promo_style': 'tech',
                'color': '#007AFF'
            },
            'р╕Др╕зр╕▓р╕бр╕Зр╕▓р╕б': {
                'icon': 'ЁЯТД',
                'keywords': ['р╕Др╕зр╕▓р╕бр╕Зр╕▓р╕б', 'р╣Ар╕Лр╕гр╕▒р╣Ир╕б', 'р╕Др╕гр╕╡р╕б', 'р╕ер╕┤р╕Ы', 'р╣Бр╕Хр╣Ир╕Зр╕лр╕Щр╣Йр╕▓', 'beauty', 'skincare'],
                'priority': 1,
                'promo_style': 'beauty',
                'color': '#FF69B4'
            },
            'р╣Бр╕Яр╕Кр╕▒р╣Ир╕Щ': {
                'icon': 'ЁЯСХ',
                'keywords': ['р╣Бр╕Яр╕Кр╕▒р╣Ир╕Щ', 'р╣Ар╕кр╕╖р╣Йр╕нр╕Ьр╣Йр╕▓', 'р╣Ар╕кр╕╖р╣Йр╕н', 'р╕Бр╕▓р╕Зр╣Ар╕Бр╕З', 'fashion', 'clothes'],
                'priority': 1,
                'promo_style': 'fashion',
                'color': '#8B4513'
            },
            'р╕кр╕▒р╕Хр╕зр╣Мр╣Ар╕ер╕╡р╣Йр╕вр╕З': {
                'icon': 'ЁЯР╛',
                'keywords': ['р╕кр╕▒р╕Хр╕зр╣Мр╣Ар╕ер╕╡р╣Йр╕вр╕З', 'р╣Бр╕бр╕з', 'р╕лр╕бр╕▓', 'р╕нр╕▓р╕лр╕▓р╕гр╣Бр╕бр╕з', 'р╕нр╕▓р╕лр╕▓р╕гр╕лр╕бр╕▓', 'pet'],
                'priority': 2,
                'promo_style': 'pet',
                'color': '#FF6347'
            },
            'р╕Бр╕гр╕░р╣Ар╕Ыр╣Лр╕▓': {
                'icon': 'ЁЯОТ',
                'keywords': ['р╕Бр╕гр╕░р╣Ар╕Ыр╣Лр╕▓', 'р╣Ар╕Ыр╣Й', 'р╕кр╕░р╕Юр╕▓р╕в', 'bag', 'backpack'],
                'priority': 2,
                'promo_style': 'accessories',
                'color': '#8B4513'
            },
            'р╣Ар╕Бр╕бр╕бр╕┤р╣Ир╕З': {
                'icon': 'ЁЯОо',
                'keywords': ['р╣Ар╕Бр╕бр╕бр╕┤р╣Ир╕З', 'р╣Ар╕Бр╕б', 'р╕лр╕╣р╕Яр╕▒р╕З', 'р╕Др╕╡р╕вр╣Мр╕Ър╕нр╕гр╣Мр╕Ф', 'gaming', 'game'],
                'priority': 1,
                'promo_style': 'gaming',
                'color': '#9932CC'
            },
            'р╕гр╕нр╕Зр╣Ар╕Чр╣Йр╕▓': {
                'icon': 'ЁЯСЯ',
                'keywords': ['р╕гр╕нр╕Зр╣Ар╕Чр╣Йр╕▓', 'р╕Ьр╣Йр╕▓р╣Гр╕Ъ', 'р╕кр╣Йр╕Щр╕кр╕╣р╕З', 'shoes', 'sneaker'],
                'priority': 2,
                'promo_style': 'fashion',
                'color': '#2E8B57'
            },
            'р╕Щр╕▓р╕мр╕┤р╕Бр╕▓р╣Бр╕зр╣Ир╕Щр╕Хр╕▓': {
                'icon': 'тМЪ',
                'keywords': ['р╕Щр╕▓р╕мр╕┤р╕Бр╕▓', 'р╣Бр╕зр╣Ир╕Щр╕Хр╕▓', 'р╕кр╕бр╕▓р╕гр╣Мр╕Чр╕зр╕нр╕Чр╕Кр╣М', 'watch', 'glasses'],
                'priority': 2,
                'promo_style': 'accessories',
                'color': '#4682B4'
            },
            'р╕Бр╕ер╣Йр╕нр╕З': {
                'icon': 'ЁЯУ╖',
                'keywords': ['р╕Бр╕ер╣Йр╕нр╕З', 'р╣Ар╕ер╕Щр╕кр╣М', 'camera', 'lens', 'photography'],
                'priority': 2,
                'promo_style': 'tech',
                'color': '#FF4500'
            },
            'р╕Др╕нр╕бр╕Юр╕┤р╕зр╣Ар╕Хр╕нр╕гр╣М': {
                'icon': 'ЁЯТ╗',
                'keywords': ['р╕Др╕нр╕бр╕Юр╕┤р╕зр╣Ар╕Хр╕нр╕гр╣М', 'р╣Вр╕Щр╣Кр╕Хр╕Ър╕╕р╣Кр╕Д', 'р╣Ар╕бр╕▓р╕кр╣М', 'laptop', 'computer'],
                'priority': 1,
                'promo_style': 'tech',
                'color': '#4169E1'
            },
            'р╕кр╕╕р╕Вр╕ар╕▓р╕Ю': {
                'icon': 'ЁЯТК',
                'keywords': ['р╕кр╕╕р╕Вр╕ар╕▓р╕Ю', 'р╕зр╕┤р╕Хр╕▓р╕бр╕┤р╕Щ', 'р╕нр╕▓р╕лр╕▓р╕гр╣Ар╕кр╕гр╕┤р╕б', 'health', 'vitamin'],
                'priority': 2,
                'promo_style': 'health',
                'color': '#32CD32'
            },
            'р╕нр╕▓р╕лр╕▓р╕гр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕Фр╕╖р╣Ир╕б': {
                'icon': 'ЁЯН╜я╕П',
                'keywords': ['р╕нр╕▓р╕лр╕▓р╕г', 'р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕Фр╕╖р╣Ир╕б', 'р╕Бр╕▓р╣Бр╕Я', 'food', 'drink', 'coffee'],
                'priority': 3,
                'promo_style': 'food',
                'color': '#FF8C00'
            },
            'р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╣Гр╕Кр╣Йр╣Др╕Яр╕Яр╣Йр╕▓': {
                'icon': 'ЁЯФМ',
                'keywords': ['р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╣Гр╕Кр╣Йр╣Др╕Яр╕Яр╣Йр╕▓', 'р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕Ыр╕▒р╣Ир╕Щ', 'р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕Чр╕│р╕Бр╕▓р╣Бр╕Я', 'appliance'],
                'priority': 2,
                'promo_style': 'appliance',
                'color': '#DC143C'
            },
            'р╕Бр╕╡р╕мр╕▓': {
                'icon': 'тЪ╜',
                'keywords': ['р╕Бр╕╡р╕мр╕▓', 'р╕Яр╕╕р╕Хр╕Ър╕нр╕е', 'р╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в', 'sport', 'fitness'],
                'priority': 3,
                'promo_style': 'sport',
                'color': '#228B22'
            },
            'р╣Ар╕Фр╣Зр╕Бр╣Бр╕ер╕░р╕Вр╕нр╕Зр╣Ар╕ер╣Ир╕Щ': {
                'icon': 'ЁЯз╕',
                'keywords': ['р╣Ар╕Фр╣Зр╕Б', 'р╕Вр╕нр╕Зр╣Ар╕ер╣Ир╕Щ', 'baby', 'toys', 'kids'],
                'priority': 3,
                'promo_style': 'kids',
                'color': '#FFB6C1'
            }
        }
        
        # р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╣Вр╕Ыр╕гр╣Вр╕бр╕Кр╕▒р╣Ир╕Щр╕Хр╕▓р╕бр╕кр╣Др╕Хр╕ер╣М
        self.promo_templates = {
            'tech': [
                "ЁЯЪА р╣Ар╕Чр╕Др╣Вр╕Щр╣Вр╕ер╕вр╕╡р╕ер╣Йр╕│р╕кр╕бр╕▒р╕в {product} р╕гр╕▓р╕Др╕▓р╕Юр╕┤р╣Ар╕ир╕й {price:,} р╕Ър╕▓р╕Ч!",
                "тЪб р╕нр╕▒р╕Ыр╣Ар╕Бр╕гр╕Фр╕Кр╕╡р╕зр╕┤р╕Хр╕Фр╣Йр╕зр╕в {product} р╕ер╕Фр╣Ар╕лр╕ер╕╖р╕н {price:,} р╕Ър╕▓р╕Ч",
                "ЁЯФе Hot Deal! {product} р╣Ар╕Чр╕Др╣Вр╕Щр╣Вр╕ер╕вр╕╡р╕ер╣Ир╕▓р╕кр╕╕р╕Фр╣Гр╕Щр╕гр╕▓р╕Др╕▓р╕кр╕╕р╕Фр╕Др╕╕р╣Йр╕б!"
            ],
            'beauty': [
                "тЬи р╕кр╕зр╕вр╣Гр╕кр╣Ар╕Ыр╕ер╣Ир╕Зр╕Ыр╕ер╕▒р╣Ир╕Зр╕Фр╣Йр╕зр╕в {product} р╣Ар╕Юр╕╡р╕вр╕З {price:,} р╕Ър╕▓р╕Ч",
                "ЁЯТЦ р╕Др╕зр╕▓р╕бр╕Зр╕▓р╕бр╕Чр╕╡р╣Ир╕Др╕╕р╕Ур╕кр╕бр╕Др╕зр╕гр╣Др╕Фр╣Й! {product} р╕гр╕▓р╕Др╕▓р╕Юр╕┤р╣Ар╕ир╕й",
                "ЁЯМЯ р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕Зр╕Ьр╕┤р╕зр╣Гр╕лр╣Йр╕кр╕зр╕вр╕Бр╕зр╣Ир╕▓р╣Ар╕Фр╕┤р╕бр╕Фр╣Йр╕зр╕в {product}"
            ],
            'fashion': [
                "ЁЯСЧ р╣Бр╕Яр╕Кр╕▒р╣Ир╕Щр╣Ар╕Чр╕гр╕Щр╕Фр╣Мр╣Гр╕лр╕бр╣И! {product} р╕кр╣Др╕Хр╕ер╣Мр╣Ар╕Бр╣Л р╕гр╕▓р╕Др╕▓ {price:,} р╕Ър╕▓р╕Ч",
                "ЁЯФе р╕кр╕зр╕вр╣Гр╕кр╣Ир╣Др╕Фр╣Йр╕Чр╕╕р╕Бр╣Вр╕нр╕Бр╕▓р╕к {product} р╕ер╕Фр╕гр╕▓р╕Др╕▓р╕Юр╕┤р╣Ар╕ир╕й!",
                "ЁЯТл р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕ер╕╕р╕Др╣Гр╕лр╕бр╣Ир╕Бр╕▒р╕Ъ {product} р╕гр╕▓р╕Др╕▓р╕Др╕╕р╣Йр╕бр╕Др╣Ир╕▓"
            ],
            'pet': [
                "ЁЯР▒ р╕гр╕▒р╕Бр╕Щр╣Йр╕нр╕Зр╣Ар╕бр╕╡р╣Ир╕вр╕зр╕Фр╣Йр╕зр╕в {product} р╕Др╕╕р╕Ур╕ар╕▓р╕Юр╕Фр╕╡ р╕гр╕▓р╕Др╕▓ {price:,} р╕Ър╕▓р╕Ч",
                "ЁЯР╢ р╣Ар╕Юр╕╖р╣Ир╕нр╕Щ 4 р╕Вр╕▓р╕Вр╕нр╕Зр╕Др╕╕р╕Ур╕кр╕бр╕Др╕зр╕гр╣Др╕Фр╣Йр╕Фр╕╡р╕Чр╕╡р╣Ир╕кр╕╕р╕Ф! {product}",
                "тЭдя╕П р╕Фр╕╣р╣Бр╕ер╕кр╕▒р╕Хр╕зр╣Мр╣Ар╕ер╕╡р╣Йр╕вр╕Зр╕Фр╣Йр╕зр╕вр╣Гр╕И {product} р╕гр╕▓р╕Др╕▓р╕Юр╕┤р╣Ар╕ир╕й"
            ]
        }
    
    def get_category_info(self, category_name: str) -> Optional[Dict]:
        """р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣И"""
        return self.categories.get(category_name)
    
    def detect_category_from_query(self, query: str) -> List[str]:
        """р╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣Ир╕Ир╕▓р╕Бр╕Др╕│р╕Др╣Йр╕Щр╕лр╕▓"""
        query_lower = query.lower()
        detected_categories = []
        
        for category, info in self.categories.items():
            for keyword in info['keywords']:
                if keyword.lower() in query_lower:
                    detected_categories.append(category)
                    break
        
        return detected_categories
    
    def get_smart_categories_display(self) -> List[Dict]:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Бр╕▓р╕гр╣Бр╕кр╕Фр╕Зр╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣Ир╣Бр╕Ър╕Ър╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░"""
        categories_list = []
        
        # р╕Ир╕▒р╕Фр╣Ар╕гр╕╡р╕вр╕Зр╕Хр╕▓р╕б priority
        sorted_categories = sorted(
            self.categories.items(), 
            key=lambda x: x[1]['priority']
        )
        
        for category, info in sorted_categories:
            categories_list.append({
                'name': category,
                'display': f"{info['icon']} {category}",
                'priority': info['priority'],
                'color': info['color']
            })
        
        return categories_list
    
    def generate_promo_message(self, product_data: Dict, style: str = None) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Вр╕Ыр╕гр╣Вр╕бр╕Кр╕▒р╣Ир╕Щ"""
        if not style:
            category = product_data.get('category', '')
            category_info = self.get_category_info(category)
            style = category_info.get('promo_style', 'general') if category_info else 'general'
        
        templates = self.promo_templates.get(style, self.promo_templates['tech'])
        template = random.choice(templates)
        
        return template.format(
            product=product_data.get('product_name', 'р╕кр╕┤р╕Щр╕Др╣Йр╕▓р╕Юр╕┤р╣Ар╕ир╕й'),
            price=product_data.get('price', 0)
        )
    
    def get_category_based_quick_reply(self, detected_categories: List[str] = None) -> List[Dict]:
        """р╕кр╕гр╣Йр╕▓р╕З Quick Reply р╕Хр╕▓р╕бр╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣Ир╕Чр╕╡р╣Ир╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╣Др╕Фр╣Й"""
        if not detected_categories:
            # р╣Бр╕кр╕Фр╕Зр╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣Ир╕вр╕нр╕Фр╕Щр╕┤р╕вр╕б
            popular_categories = ['р╣Вр╕Чр╕гр╕ир╕▒р╕Юр╕Чр╣Мр╕бр╕╖р╕нр╕Цр╕╖р╕н', 'р╕Др╕зр╕▓р╕бр╕Зр╕▓р╕б', 'р╣Бр╕Яр╕Кр╕▒р╣Ир╕Щ', 'р╣Ар╕Бр╕бр╕бр╕┤р╣Ир╕З', 'р╕кр╕▒р╕Хр╕зр╣Мр╣Ар╕ер╕╡р╣Йр╕вр╕З']
        else:
            popular_categories = detected_categories[:5]
        
        quick_replies = []
        for category in popular_categories:
            info = self.get_category_info(category)
            if info:
                quick_replies.append({
                    'label': f"{info['icon']} {category}",
                    'text': category
                })
        
        # р╣Ар╕Юр╕┤р╣Ир╕бр╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Бр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б
        quick_replies.extend([
            {'label': 'ЁЯФе р╕Вр╕▓р╕вр╕Фр╕╡', 'text': 'р╕Вр╕▓р╕вр╕Фр╕╡'},
            {'label': 'ЁЯТ░ р╣Вр╕Ыр╕гр╣Вр╕бр╕Кр╕▒р╣Ир╕Щ', 'text': 'р╣Вр╕Ыр╕гр╣Вр╕бр╕Кр╕▒р╣Ир╕Щ'},
            {'label': 'ЁЯУЛ р╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣И', 'text': 'р╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣И'}
        ])
        
        return quick_replies[:8]  # р╕Ир╕│р╕Бр╕▒р╕Фр╣Др╕бр╣Ир╣Ар╕Бр╕┤р╕Щ 8 р╕Ыр╕╕р╣Ир╕б
    
    def get_smart_search_suggestions(self, query: str) -> Dict:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓р╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░"""
        detected_categories = self.detect_category_from_query(query)
        
        suggestions = {
            'detected_categories': detected_categories,
            'alternative_searches': [],
            'related_categories': []
        }
        
        if detected_categories:
            # р╣Бр╕Щр╕░р╕Щр╕│р╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓р╣Гр╕Щр╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣Ир╕Чр╕╡р╣Ир╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╣Др╕Фр╣Й
            for category in detected_categories:
                info = self.get_category_info(category)
                if info:
                    # р╣Бр╕Щр╕░р╕Щр╕│р╕Др╕│р╕Др╣Йр╕Щр╕лр╕▓р╕нр╕╖р╣Ир╕Щр╣Гр╕Щр╕лр╕бр╕зр╕Фр╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Щ
                    other_keywords = [kw for kw in info['keywords'] if kw != query.lower()]
                    suggestions['alternative_searches'].extend(other_keywords[:3])
            
            # р╕лр╕▓р╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣Ир╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕З
            for category in detected_categories:
                related = self._find_related_categories(category)
                suggestions['related_categories'].extend(related)
        else:
            # р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╣Ар╕Ир╕нр╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣И р╣Бр╕Щр╕░р╕Щр╕│р╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣Ир╕вр╕нр╕Фр╕Щр╕┤р╕вр╕б
            suggestions['related_categories'] = ['р╣Вр╕Чр╕гр╕ир╕▒р╕Юр╕Чр╣Мр╕бр╕╖р╕нр╕Цр╕╖р╕н', 'р╕Др╕зр╕▓р╕бр╕Зр╕▓р╕б', 'р╣Бр╕Яр╕Кр╕▒р╣Ир╕Щ', 'р╣Ар╕Бр╕бр╕бр╕┤р╣Ир╕З']
        
        return suggestions
    
    def _find_related_categories(self, category: str) -> List[str]:
        """р╕лр╕▓р╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣Ир╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕З"""
        category_info = self.get_category_info(category)
        if not category_info:
            return []
        
        style = category_info['promo_style']
        priority = category_info['priority']
        
        related = []
        for cat_name, cat_info in self.categories.items():
            if (cat_name != category and 
                (cat_info['promo_style'] == style or cat_info['priority'] == priority)):
                related.append(cat_name)
        
        return related[:3]
    
    def create_category_carousel_data(self, categories: List[str]) -> List[Dict]:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕лр╕гр╕▒р╕Ъ Carousel р╣Бр╕кр╕Фр╕Зр╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣И"""
        carousel_items = []
        
        for category in categories:
            info = self.get_category_info(category)
            if info:
                carousel_items.append({
                    'title': f"{info['icon']} {category}",
                    'subtitle': f"р╕кр╕┤р╕Щр╕Др╣Йр╕▓{category}р╕Др╕╕р╕Ур╕ар╕▓р╕Юр╕Фр╕╡ р╕гр╕▓р╕Др╕▓р╣Ар╕Ыр╣Зр╕Щр╕бр╕┤р╕Хр╕г",
                    'action_text': f"р╕Фр╕╣{category}",
                    'action_data': category,
                    'color': info['color']
                })
        
        return carousel_items