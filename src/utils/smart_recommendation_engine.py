"""
üìÅ Smart Recommendation Engine
‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°
"""

from typing import Dict, List, Optional
from datetime import datetime, timedelta
import json
import logging

class SmartRecommendationEngine:
    """‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞"""
    
    def __init__(self, db_instance=None):
        self.db = db_instance
        self.logger = logging.getLogger(__name__)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        self.user_interests = {}
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à
        self.interest_weights = {
            'search_count': 3,      # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            'category_view': 2,     # ‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
            'product_click': 4,     # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            'recent_activity': 2    # ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        }
        
        # ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        self.category_keywords = {
            '‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠': ['‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ', '‡πÑ‡∏Æ‡πÄ‡∏ó‡∏Ñ', '‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£', '‡∏™‡∏°‡∏≤‡∏£‡πå‡∏ó'],
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°': ['‡∏™‡∏Å‡∏¥‡∏ô‡πÅ‡∏Ñ‡∏£‡πå', '‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤', '‡∏ú‡∏¥‡∏ß‡∏™‡∏ß‡∏¢', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à'],
            '‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô': ['‡∏™‡πÑ‡∏ï‡∏•‡πå', '‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå', '‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß', '‡∏•‡∏∏‡∏Ñ'],
            '‡πÄ‡∏Å‡∏°‡∏°‡∏¥‡πà‡∏á': ['‡πÄ‡∏Å‡∏°', '‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á', '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å'],
            '‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á': ['‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å', '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ï‡∏ß‡πå'],
            '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û': ['‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', '‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô', '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢', '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ'],
            '‡∏Å‡∏µ‡∏¨‡∏≤': ['‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢', '‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™', '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á']
        }
    
    def track_user_interest(self, user_id: str, action: str, category: str = None, product_id: str = None):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        if user_id not in self.user_interests:
            self.user_interests[user_id] = {
                'categories': {},
                'last_activity': datetime.now(),
                'total_searches': 0
            }
        
        user_data = self.user_interests[user_id]
        user_data['last_activity'] = datetime.now()
        
        if category:
            if category not in user_data['categories']:
                user_data['categories'][category] = {
                    'search_count': 0,
                    'view_count': 0,
                    'click_count': 0,
                    'last_seen': datetime.now()
                }
            
            cat_data = user_data['categories'][category]
            cat_data['last_seen'] = datetime.now()
            
            if action == 'search':
                cat_data['search_count'] += 1
                user_data['total_searches'] += 1
            elif action == 'view':
                cat_data['view_count'] += 1
            elif action == 'click':
                cat_data['click_count'] += 1
    
    def get_user_interest_score(self, user_id: str, category: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"""
        if user_id not in self.user_interests:
            return 0.0
        
        user_data = self.user_interests[user_id]
        if category not in user_data['categories']:
            return 0.0
        
        cat_data = user_data['categories'][category]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ï‡πà‡∏≤‡∏á‡πÜ
        score = (
            cat_data['search_count'] * self.interest_weights['search_count'] +
            cat_data['view_count'] * self.interest_weights['category_view'] +
            cat_data['click_count'] * self.interest_weights['product_click']
        )
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤)
        days_ago = (datetime.now() - cat_data['last_seen']).days
        if days_ago <= 7:
            recent_bonus = self.interest_weights['recent_activity'] * (8 - days_ago) / 7
            score += recent_bonus
        
        return score
    
    def get_personalized_recommendations(self, user_id: str, limit: int = 5) -> List[Dict]:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•"""
        if not self.db:
            return []
        
        try:
            # ‡∏´‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡πÉ‡∏à
            interest_scores = {}
            for category in self.category_keywords.keys():
                score = self.get_user_interest_score(user_id, category)
                if score > 0:
                    interest_scores[category] = score
            
            if not interest_scores:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ
                return self._get_trending_products(limit)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à
            sorted_interests = sorted(interest_scores.items(), key=lambda x: x[1], reverse=True)
            
            recommendations = []
            products_per_category = max(1, limit // len(sorted_interests))
            
            for category, score in sorted_interests:
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à
                category_products = self.db.search_products(
                    query="", 
                    category=category, 
                    limit=products_per_category,
                    order_by='rating'
                )
                
                products = category_products.get('products', [])
                for product in products:
                    product['recommendation_score'] = score
                    product['recommendation_reason'] = f"‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô{category}"
                    recommendations.append(product)
                
                if len(recommendations) >= limit:
                    break
            
            return recommendations[:limit]
            
        except Exception as e:
            self.logger.error(f"Error getting personalized recommendations: {e}")
            return self._get_trending_products(limit)
    
    def get_similar_products(self, product_id: str, limit: int = 3) -> List[Dict]:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô"""
        if not self.db:
            return []
        
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
            product = self.db.get_product_by_code(product_id)
            if not product:
                return []
            
            category = product.get('category', '')
            price = product.get('price', 0)
            
            # ‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
            price_range_min = price * 0.7  # -30%
            price_range_max = price * 1.3  # +30%
            
            similar_products = self.db.search_products(
                query="",
                category=category,
                min_price=price_range_min,
                max_price=price_range_max,
                limit=limit + 1,  # +1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
                order_by='rating'
            )
            
            products = similar_products.get('products', [])
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
            filtered_products = [p for p in products if p.get('product_code') != product_id]
            
            for product in filtered_products:
                product['recommendation_reason'] = "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô"
            
            return filtered_products[:limit]
            
        except Exception as e:
            self.logger.error(f"Error getting similar products: {e}")
            return []
    
    def get_trending_products(self, limit: int = 5) -> List[Dict]:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≤‡πÅ‡∏£‡∏á"""
        return self._get_trending_products(limit)
    
    def _get_trending_products(self, limit: int) -> List[Dict]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≤‡πÅ‡∏£‡∏á (‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ + ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á)"""
        if not self.db:
            return []
        
        try:
            # ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á
            trending = self.db.search_products(
                query="",
                limit=limit,
                order_by='sold_count'  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
            )
            
            products = trending.get('products', [])
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô trending (‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ + ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß)
            for product in products:
                sold_count = product.get('sold_count', 0)
                rating = product.get('rating', 0)
                trending_score = (sold_count * 0.7) + (rating * 100 * 0.3)
                product['trending_score'] = trending_score
                product['recommendation_reason'] = "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≤‡πÅ‡∏£‡∏á"
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô trending
            products.sort(key=lambda x: x.get('trending_score', 0), reverse=True)
            
            return products[:limit]
            
        except Exception as e:
            self.logger.error(f"Error getting trending products: {e}")
            return []
    
    def get_category_recommendations(self, category: str, limit: int = 5) -> List[Dict]:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
        if not self.db:
            return []
        
        try:
            # ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
            category_products = self.db.search_products(
                query="",
                category=category,
                limit=limit,
                order_by='rating'
            )
            
            products = category_products.get('products', [])
            
            for product in products:
                product['recommendation_reason'] = f"‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô{category}"
            
            return products
            
        except Exception as e:
            self.logger.error(f"Error getting category recommendations: {e}")
            return []
    
    def generate_recommendation_message(self, recommendations: List[Dict], user_id: str = None) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        if not recommendations:
            return "ü§ñ ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"
        
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
        headers = [
            "üéØ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì",
            "‚≠ê ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à",
            "üî• Hot Items ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏•‡∏≤‡∏î"
        ]
        
        message = f"{headers[len(recommendations) % len(headers)]}\\n\\n"
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        for i, product in enumerate(recommendations, 1):
            name = product.get('product_name', 'N/A')
            price = product.get('price', 0)
            rating = product.get('rating', 0)
            reason = product.get('recommendation_reason', '')
            
            message += f"{i}. {name}\\n"
            message += f"   üí∞ {price:,.0f} ‡∏ö‡∏≤‡∏ó"
            if rating > 0:
                message += f" | ‚≠ê {rating:.1f}"
            if reason:
                message += f"\\n   üéØ {reason}"
            message += "\\n\\n"
        
        return message